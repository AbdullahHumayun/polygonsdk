import disnake
from disnake.ext import commands
import re
from disnake import ButtonStyle
from bs4 import BeautifulSoup
from webull import webull
from utils.webull_tickers import ticker_list
from disnake import ApplicationCommandInteraction
import requests




from api_master.cfg import YOUR_NASDAQ_KEY, YOUR_STOCKSERA_KEY, YOUR_FINNHUB_KEY
from time import sleep
import finnhub



import asyncio


from typing import List
from disnake.ui import Select, View
import stocksera
finnhub_client = finnhub.Client(api_key=f"{YOUR_FINNHUB_KEY}")
client = stocksera.Client(api_key=YOUR_STOCKSERA_KEY)



class MainMenu(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="🅰️LPHAQUERY", url=f"https://www.alphaquery.com/saved-screens"))
        self.add_item(LinksDropdown())
        self.add_item(LearningMainMenuDropdown())
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="🟢 Core Calls".center(1, " "), url="https://www.alphaquery.com/stock-screener/600010230?run=1"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="🔴 Core Puts".center(1, " "), url="https://www.alphaquery.com/stock-screener/600010229?run=1"))
    
    @disnake.ui.button(label="🪙 Opportunity", style=disnake.ButtonStyle.blurple)
    async def opportunity(self, butaton: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title="🪙 Opportunity", color=disnake.Colour.dark_orange())
        await interaction.response.edit_message(view=OpportunitiesView())


    @disnake.ui.button(label="🧠🇱 🇪 🇦 🇷 🇳", style=disnake.ButtonStyle.red, row=2)
    async def learn( self,interaction: disnake.ApplicationCommandInteraction):
        view = disnake.ui.View()
        view.add_item(LearningMainMenuDropdown())
        view.add_item(TechDropdown())
        view.add_item(TechAnalysisSelect())
        embed = disnake.Embed(title="🧠 Select a category from the dropdown!", color=disnake.Colour.fuchsia())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer( text="Implemented by Fudstop Trading")
        await interaction.response.edit_message(embed=embed, view=LearnView())


    @disnake.ui.button(label="⭕🇨 🇱 🇴 🇸 🇪", style=disnake.ButtonStyle.red, row=2)
    async def close( self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="⭕ FUDSTOP Application Closed", color=disnake.Colour.dark_red())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")

        embed.set_footer( text="Implemented by Fudstop Trading")
        await interaction.response.edit_message(embed=embed, view=None)

    @disnake.ui.button(label="🇦  🇳  🇦  🇱 💡 🇾  🇸  🇮  🇸", style=disnake.ButtonStyle.green, row=2)
    async def trade( self,interaction: disnake.ApplicationCommandInteraction):
        view = disnake.ui.View()
        view.add_item(TechDropdown())
        view.add_item(TechDropdown2())
       
        embed = disnake.Embed(title="🧠 Select a category from the dropdown!", color=disnake.Colour.fuchsia())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer( text="Implemented by Fudstop Trading")
        await interaction.response.edit_message(embed=embed, view=DropdownView())



class MainView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        self.add_item(Dropdown2())
        self.add_item(Dropdown3())

        

    @disnake.ui.button(label="Discord Tutorials⚔️", style=disnake.ButtonStyle.grey)
    async def tutes( self,  interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title="Discord Tutorials⚔️", color=disnake.Colour.dark_blue())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=HelpView())
    
    @disnake.ui.button(label="Bot Commands🤖", style=disnake.ButtonStyle.grey)
    async def botcmds( self,  interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title="Bot Commands🤖", color=disnake.Colour.dark_blue())
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=BotsView())

    @disnake.ui.button(label="Important Notes📖✒️", style=disnake.ButtonStyle.grey)
    async def notes( self,  interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title="Important Notes📖✒️", color=disnake.Colour.dark_blue())
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=NotesView())
    @disnake.ui.button(label="Educational Videos📽️", style=disnake.ButtonStyle.green)
    async def videos( self,  interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title="Educational Videos📽️", color=disnake.Colour.dark_blue())
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=VideoView())
    
    @disnake.ui.button(label="Data🔢", style=disnake.ButtonStyle.red)
    async def data( self,  interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Data🔢", color=disnake.Colour.dark_blue())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=dataView())


    @disnake.ui.button(label="Tools🛠️", style=disnake.ButtonStyle.blurple )
    async def tools( self,  interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title="Tools🛠️", color=disnake.Colour.dark_green())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=ToolsView())

    @disnake.ui.button(label="Webull & Market School🏫", style=disnake.ButtonStyle.green)
    async def school( self,  interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title="Webull & Market School🏫", color=disnake.Colour.dark_green())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=LearnView())

    @disnake.ui.button(label="Help/Settings⚙️", style=disnake.ButtonStyle.red)
    async def settings( self,  interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title="Help/Settings⚙️", color=disnake.Colour.dark_red())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=SettingsView())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple)
    async def pin( self,  interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="Welcome to FUDSTOP Main Menu", color=disnake.Colour.dark_blue())
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_footer(icon_url="https://uploads-ssl.webflow.com/62661f74776abb77ef7621a8/6272ac0a541297826e1a5209_963244979063517184.gif")
        await interaction.response.edit_message(view=MainMenu())

    @disnake.ui.button(label="🔄", style=disnake.ButtonStyle.blurple, row=2)
    async def homer( self,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🔄",description=f"```py\nYou just switched from 'LEARN' to 'TRADE'.```", color = disnake.Colour.dark_gold())
        em.add_field(name="Navigation", value="To naviate on the **TRADE SIDE** simply use the buttons below.")



        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="⬅️", style=disnake.ButtonStyle.red, row=2)
    async def home( self,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="⬅️",description=f"```py\nRise above the narrative.```", color = disnake.Colour.dark_gold())
        em.set_image(url="https://media.discordapp.net/attachments/896207280117264434/1018632105477013554/3235bb_fedadfcf38994349b7fa98fbf3f6f372_mv2.gif")


        await interaction.response.edit_message(embed=em, view=MainView())

    @disnake.ui.button(label="⭕", style=disnake.ButtonStyle.red, row=2)
    async def bye( self,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🔄",description=f"```py\nYou just switched from LEARN to TRADE.```", color = disnake.Colour.dark_gold())
        em.add_field(name="Navigation", value="To naviate on the **TRADE SIDE** simply use the buttons below.")



        await interaction.response.edit_message(embed=em, view=None)
class Menu(disnake.ui.View):
    def __init__(
        self, embeds: List[disnake.Embed]
    ):
        super().__init__(timeout=None)

        # Sets the embed list variable.
        self.embeds = embeds
        # Current embed number.
        self.embed_count = 0

        # Disables previous page button by default.

        # Sets the footer of the embeds with their respective page numbers.
        self.count = 0
        self.set_link_button()

        for i, embed in enumerate(self.embeds):
            embed.set_footer(
                text=f"Page {i + 1} of {len(self.embeds)}",
            )

    def set_link_button(self) -> None:
        if not hasattr(self, "link_button"):
            self.link_button = disnake.ui.Button(
                style=disnake.ButtonStyle.url,
                url="https://fudstop.io",
                label="FUDSTOP",
                row=0,
            )
        self.add_item(self.link_button)
        self.link_button.label = "Site"
        self.count += 1

    async def prev_page(  # pylint: disable=W0613
        self,
        interaction: disnake.MessageInteraction,
    ):
        # Decrements the embed count.
        self.embed_count -= 1

        # Gets the embed object.
        embed = self.embeds[self.embed_count]

        # Enables the next page button and disables the previous page button if we're on the first embed.
        self.next_page.disabled = False
        await interaction.response.edit_message(embed=embed, view=self)

    @disnake.ui.button(
        label="Next page",
        emoji="<a:rightarrow:929686891891155006>",
        style=disnake.ButtonStyle.red,
        custom_id=f"persistent_view:nextpage_{str(disnake.Member)}",
    )
    async def next_page(  # pylint: disable=W0613
        self,
        interaction: disnake.MessageInteraction,
    ):
        # Increments the embed count.
        self.embed_count += 1

        # Gets the embed object.
        embed = self.embeds[self.embed_count]


        # Enables the previous page button and disables the next page button if we're on the last embed.
        if self.embed_count == len(self.embeds) - 1:
            self.next_page.disabled = False

        await interaction.response.edit_message(embed=embed, view=self)



class LowFloatDropdown(disnake.ui.Select):
    def __init__(self):
        data = client.low_float()
        index0 = data[0]
        index1 = data[1]
        index2 = data[2]
        index3 = data[3]
        index4 = data[4]
        index5 = data[5]
        index6 = data[6]
        index7 = data[7]
        index8 = data[8]
        index9 = data[9]
        index10 = data[10]
        index11 = data[11]
        index12 = data[12]
        index13 = data[13]
        index14 = data[14]
        index15 = data[15]
        index16 = data[16]
        index17 = data[17]
        index18 = data[18]
        index19 = data[19]
        index20 = data[20]
        index21 = data[21]
        index22 = data[22]
        index23 = data[23]
        index24 = data[24]
        ticker0 = index0['ticker']
        ticker1 = index1['ticker']
        ticker2 = index2['ticker']
        ticker3 = index3['ticker']
        ticker4 = index4['ticker']
        ticker5 = index5['ticker']
        ticker6 = index6['ticker']
        ticker7 = index7['ticker']
        ticker8 = index8['ticker']
        ticker9 = index9['ticker']
        ticker10 = index10['ticker']
        ticker11 = index11['ticker']
        ticker12 = index12['ticker']
        ticker13 = index13['ticker']
        ticker14 = index14['ticker']
        ticker15 = index15['ticker']
        ticker16 = index16['ticker']
        ticker17 = index17['ticker']
        ticker18 = index18['ticker']
        ticker19 = index19['ticker']
        ticker20 = index20['ticker']
        ticker21 = index21['ticker']
        ticker22 = index22['ticker']
        ticker23 = index23['ticker']
        ticker24 = index24['ticker']
        floating_shares0 = index0['floating_shares']
        floating_shares1 = index1['floating_shares']
        floating_shares2 = index2['floating_shares']
        floating_shares3 = index3['floating_shares']
        floating_shares4 = index4['floating_shares']
        floating_shares5 = index5['floating_shares']
        floating_shares6 = index6['floating_shares']
        floating_shares7 = index7['floating_shares']
        floating_shares8 = index8['floating_shares']
        floating_shares9 = index9['floating_shares']
        floating_shares10 = index10['floating_shares']
        floating_shares11 = index11['floating_shares']
        floating_shares12 = index12['floating_shares']
        floating_shares13 = index13['floating_shares']
        floating_shares14 = index14['floating_shares']
        floating_shares15 = index15['floating_shares']
        floating_shares16 = index16['floating_shares']
        floating_shares17 = index17['floating_shares']
        floating_shares18 = index18['floating_shares']
        floating_shares19 = index19['floating_shares']
        floating_shares20 = index20['floating_shares']
        floating_shares21 = index21['floating_shares']
        floating_shares22 = index22['floating_shares']
        floating_shares23 = index23['floating_shares']
        floating_shares24 = index24['floating_shares']
        options = [
            disnake.SelectOption(label=f"{ticker0}", description=f"{floating_shares0}"),
            disnake.SelectOption(label=f"{ticker1}", description=f"{floating_shares1}"),
            disnake.SelectOption(label=f"{ticker2}", description=f"{floating_shares2}"),
            disnake.SelectOption(label=f"{ticker3}", description=f"{floating_shares3}"),
            disnake.SelectOption(label=f"{ticker4}", description=f"{floating_shares4}"),
            disnake.SelectOption(label=f"{ticker5}", description=f"{floating_shares5}"),
            disnake.SelectOption(label=f"{ticker6}", description=f"{floating_shares6}"),
            disnake.SelectOption(label=f"{ticker7}", description=f"{floating_shares7}"),
            disnake.SelectOption(label=f"{ticker8}", description=f"{floating_shares8}"),
            disnake.SelectOption(label=f"{ticker9}", description=f"{floating_shares9}"),
            disnake.SelectOption(label=f"{ticker10}", description=f"{floating_shares10}"),
            disnake.SelectOption(label=f"{ticker11}", description=f"{floating_shares11}"),
            disnake.SelectOption(label=f"{ticker12}", description=f"{floating_shares12}"),
            disnake.SelectOption(label=f"{ticker13}", description=f"{floating_shares13}"),
            disnake.SelectOption(label=f"{ticker14}", description=f"{floating_shares14}"),
            disnake.SelectOption(label=f"{ticker15}", description=f"{floating_shares15}"),
            disnake.SelectOption(label=f"{ticker16}", description=f"{floating_shares16}"),
            disnake.SelectOption(label=f"{ticker17}", description=f"{floating_shares17}"),
            disnake.SelectOption(label=f"{ticker18}", description=f"{floating_shares18}"),
            disnake.SelectOption(label=f"{ticker19}", description=f"{floating_shares19}"),
            disnake.SelectOption(label=f"{ticker20}", description=f"{floating_shares20}"),
            disnake.SelectOption(label=f"{ticker21}", description=f"{floating_shares21}"),
            disnake.SelectOption(label=f"{ticker22}", description=f"{floating_shares22}"),
            disnake.SelectOption(label=f"{ticker23}", description=f"{floating_shares23}"),]

        super().__init__(
            placeholder = "🇱 🇴 🇼  🇫 🇱 🇴 🇦 🇹",
            min_values = 1,
            max_values = 1,
            options = options
        )
    async def callback(self, interaction: disnake.MessageCommandInteraction):
        data = client.low_float()
        index0 = data[0]
        index1 = data[1]
        index2 = data[2]
        index3 = data[3]
        index4 = data[4]
        index5 = data[5]
        index6 = data[6]
        index7 = data[7]
        index8 = data[8]
        index9 = data[9]
        index10 = data[10]
        index11 = data[11]
        index12 = data[12]
        index13 = data[13]
        index14 = data[14]
        index15 = data[15]
        index16 = data[16]
        index17 = data[17]
        index18 = data[18]
        index19 = data[19]
        index20 = data[20]
        index21 = data[21]
        index22 = data[22]
        index23 = data[23]
        index24 = data[24]
        ticker0 = index0['ticker']
        ticker1 = index1['ticker']
        ticker2 = index2['ticker']
        ticker3 = index3['ticker']
        ticker4 = index4['ticker']
        ticker5 = index5['ticker']
        ticker6 = index6['ticker']
        ticker7 = index7['ticker']
        ticker8 = index8['ticker']
        ticker9 = index9['ticker']
        ticker10 = index10['ticker']
        ticker11 = index11['ticker']
        ticker12 = index12['ticker']
        ticker13 = index13['ticker']
        ticker14 = index14['ticker']
        ticker15 = index15['ticker']
        ticker16 = index16['ticker']
        ticker17 = index17['ticker']
        ticker18 = index18['ticker']
        ticker19 = index19['ticker']
        ticker20 = index20['ticker']
        ticker21 = index21['ticker']
        ticker22 = index22['ticker']
        ticker23 = index23['ticker']
        ticker24 = index24['ticker']
        await interaction.response.defer(with_message=True)
        if self.values[0] == self.values[0]:
            wb = webull()
            a = webull.get_financials(stock=f"{ticker0}")
        ids = ticker_list[self.values[0].upper()]

        forecast = a['forecast']
        simple = a['simpleStatement']
        quote= requests.get(url=f"https://quotes-gw.webullfintech.com/api/bgw/quote/realtime?ids={ids}&includeSecu=1&delay=0&more=1")
        quoted = quote.json() or None
        estimateEarningsDate=quoted[0]["estimateEarningsDate"]#quote
        earningscrush = requests.get(url=f"https://data.nasdaq.com/api/v3/datasets/QOR/{self.values[0]}/data.json?api_key={YOUR_NASDAQ_KEY}")
        earningscrushd = earningscrush.json() or None
        analyst = requests.get(url=f"https://quoteapi.webullfintech.com/api/securities/stock/{ids}/recommendation")
        analystd = analyst.json() or None
        rating = requests.get(url="https://securitiesapi.webullfintech.com/api/securities/ticker/v5/analysis/913255341")#performance
        ratingd = rating.json()#performance
        ratingtotal = ratingd['rating']#performance
        ratingtotals = ratingtotal['ratingAnalysisTotals']#performance
        ratinganalysis = ratingtotal['ratingAnalysis']#performance
        values = data[0]
        latestEarningsDate=quoted[0]["latestEarningsDate"]#quote
        fiftyTwoWkHigh=quoted[0]["fiftyTwoWkHigh"]#quote
        fiftyTwoWkLow=quoted[0]["fiftyTwoWkLow"]#quote
        avgvol10= quoted[0]["avgVol10D"]#quote
        high=quoted[0]["high"]#quote
        low=quoted[0]["low"]#quote
        open=quoted[0]["open"]#quote
        close=quoted[0]["close"]#quote
        float10 = float(avgvol10)#quote
        avg10 = round(float10*0.000001, ndigits=2)#quote
        avg3m=quoted[0]["avgVol3M"]#quote
        float3m = float(avg3m)#quote
        avg3mo = round(float3m*0.000001, ndigits=2)#quote
        analysis = a['analysis']
        industry = analysis['industryName']#good
        total = analysis['totalCount']# of analysts | good
        datas = analysis['datas']
        eps = datas[0]
        epsname = eps['name']#good
        epsval = eps['value']#good
        epsrank = eps['rank']#good


        bvps = datas[1]
        bvpsname = bvps['name']#good
        bvpsval = bvps['value']#good
        bvpsrank = bvps['rank']#good

        dps = datas[2]
        dpsname = dps['name'] #good
        dpsval = dps['label']#good
        dpsrank = dps['rank']#good

        pe = datas[3]
        pename = pe['name']#good
        peval = pe['value']#good
        perank = pe['rank']#good

        pb = datas[4]
        pbname = pb['name']#good
        pbval = pb['value']#good
        pbrank = pb['rank']#good

        roe = datas[5]
        roename = roe['name']#good
        roeval = roe['label']#good %
        roerank = roe['rank']#good

        debt_to_asset = datas[7]
        debt_to_assetname = debt_to_asset['name']#good
        debt_to_assetval = debt_to_asset['value']#good %
        debt_to_assetrank = debt_to_asset['rank']#good
        incomestatement = simple[0]
        incomestatementtitle = incomestatement['title']
        incomestatementlist = incomestatement['list']#this

        incomerevenueq2 = round(float(incomestatementlist[3]['revenue'])*0.000000001,ndigits=2)#good

        netincomeq2 = round(float(incomestatementlist[3]['netIncomeAfterTax'])*0.000001,ndigits=2)#good




        balancesheet = simple[1]
        balancetitle = balancesheet['title']
        balancelist = balancesheet['list']


        balanceliabilityq2 = balancelist[3]['liabilityRate']


        balanceassetsq2 = round(float(balancelist[3]['totalAsset'])*0.000000001,ndigits=2)#billion
        cashflow = simple[2]
        cashflowtitle = cashflow['title']
        cashflowlist = cashflow['list']

        cashfinancingbriefq2 = round(float(cashflowlist[2]['netFinancingCashBrief'])*0.000000001,ndigits=2)

        cashoperatingbriefq2 = round(float(cashflowlist[2]['netOperatingCashBrief'])*0.000000001,ndigits=2)

        finsel = disnake.ui.Select(
            placeholder=f"💸 🇫 🇮 🇳 🇦 🇳 🇨 🇮 🇦 🇱 🇸 💸 for {self.values[0]}",
            min_values=1,
            max_values=1,
            custom_id ="financials",
            
            options= [
            disnake.SelectOption(label=f"Next earnings: {estimateEarningsDate}🗓️", description=f"Industry: {industry}"),
            disnake.SelectOption(label=f"Earnings Per Share ({epsname})", description=f"Value: {epsval} | Industry Rank: {epsrank}"),
            disnake.SelectOption(label=f"Book Value Per Share ({bvpsname})", description=f"Value: {bvpsval} | Industry Rank: {bvpsrank}"),
            disnake.SelectOption(label=f"{dpsname}", description=f"Value: {dpsval} | Industry Rank: {dpsrank}"),
            disnake.SelectOption(label=f"Price to Earnings: {pename}", description=f"Value: {peval} | Industry Rank: {perank}"),
            disnake.SelectOption(label=f"Price to Book: {pbname}", description=f"Value: {pbval} | Industry Rank: {pbrank}"),
            disnake.SelectOption(label=f"Return on Equity: {roename}", description=f"Value: {roeval}% | Industry Rank: {roerank}"),
            disnake.SelectOption(label=f"Debt to Asset: {debt_to_assetname}", description=f"Value: {debt_to_assetval}% | Industry Rank: {debt_to_assetrank} billion."),
            disnake.SelectOption(label=f"{incomestatementtitle} Q2 2022🗓️", description=f"Revenue: {incomerevenueq2} billion | Net After Tax: {netincomeq2} billion."),
            disnake.SelectOption(label=f"{balancetitle} Q2 2022🗓️", description=f"Assets: {balanceassetsq2} billion | Total Liability: {balanceliabilityq2} billion."),
            disnake.SelectOption(label=f"{cashflowtitle} Q2 2022🗓️", description=f"Financing: {cashfinancingbriefq2} billion | Operating: {cashoperatingbriefq2} billion."),
            ])
        view = disnake.ui.View()
        view.add_item(finsel)

        r2 = requests.get(url=f"https://quotes-gw.webullfintech.com/api/stock/capitalflow/ticker?tickerId={ids}&showHis=true")
        d2 = r2.json()
        latest = d2['latest']
        date = latest['date']
        item = latest['item']
        superlgin=round(float(item["superLargeInflow"]*0.000001), ndigits=2)
        superlgout=round(float(item["superLargeOutflow"]*0.000001), ndigits=2)
        superlgnet=round(float(item["superLargeNetFlow"]*0.000001), ndigits=2)
        lgin = round(float(item["largeInflow"]*0.000001), ndigits=2)
        lgout =round(float(item["largeOutflow"]*0.000001), ndigits=2)
        lgnet = round(float(item["largeNetFlow"]*0.000001), ndigits=2)
        newlgin =round(float(item["newLargeInflow"]*0.000001), ndigits=2)
        newlgout = round(float(item["newLargeOutflow"]*0.000001), ndigits=2)
        newlgnet = round(float(item["newLargeNetFlow"]*0.000001), ndigits=2)
        medin = round(float(item["mediumInflow"]*0.000001), ndigits=2)
        medout = round(float(item["mediumOutflow"]*0.000001), ndigits=2)
        mednet = round(float(item["mediumNetFlow"]*0.000001), ndigits=2)
        smallin = round(float(item["smallInflow"]*0.000001), ndigits=2)
        smallout = round(float(item["smallOutflow"]*0.000001), ndigits=2)
        smallnet = round(float(item["smallNetFlow"]*0.000001), ndigits=2)
        majorin = round(float(item["majorInflow"]*0.000001), ndigits=2)
        majorout = round(float(item["majorOutflow"]*0.000001), ndigits=2)
        majornet = round(float(item["majorNetFlow"]*0.000001), ndigits=2)
        retailin = round(float(item["retailInflow"]*0.000001), ndigits=2)
        retailout = round(float(item["retailOutflow"]*0.000001), ndigits=2)
        retailinratio =round(float(item["retailInflowRatio"]*100), ndigits=2)
        retailoutratio = round(float(item["retailOutflowRatio"]*100), ndigits=2)
        newlginratio =round(float(item["newLargeInflowRatio"]*100), ndigits=2)
        newlgoutratio = round(float(item["newLargeOutflowRatio"]*100), ndigits=2)
        mediuminratio =round(float(item["mediumInflowRatio"]*100),ndigits=2)
        mediumoutratio = round(float(item["mediumOutflowRatio"]*100),ndigits=2)
        smallinratio =round(float(item["smallInflowRatio"]*100),ndigits=2)
        smalloutratio = round(float(item["smallOutflowRatio"]*100),ndigits=2)
        majorinratio =round(float(item["majorInflowRatio"]*100),ndigits=2)
        majoroutratio = round(float(item["majorOutflowRatio"]*100),ndigits=2)
        orderflow = requests.get(f"https://quotes-gw.webullfintech.com/api/stock/capitalflow/stat?count=10&tickerId={ids}&type=0")
        orderflowd = orderflow.json()
        dateset = orderflowd['dates']
        datelist = [i['date'] for i in dateset]

        date1 = datelist[0]
        sellvol1 = round(float(orderflowd['sellVolume']) * 0.000001, ndigits=2)
        nvol1 = round(float(orderflowd['nVolume']) * 0.000001, ndigits=2)
        buyvol1 = round(float(orderflowd['buyVolume']) * 0.000001, ndigits=2)
        avg1 = orderflowd['avePrice']
        max1 = round(float(orderflowd['maxT']) * 0.000001, ndigits=2)
        select4 = disnake.ui.Select( placeholder=f"🇴 🇷 🇩 🇪 🇷 🔥  🇫 🇱 🇴 🇼 for {self.values[0]}", min_values=1, max_values=1, custom_id=f"flowselect",
        options= [
            disnake.SelectOption( label=f"New Ratio % IN: {newlginratio}%", description=f"New Ratio % OUT: {newlgoutratio}%", ),
            disnake.SelectOption( label="Today's Sell Flow", description=f"🔴{sellvol1} million.", ),
            disnake.SelectOption( label="Today's Buy Flow", description=f"🟢{buyvol1} million.", ),
            disnake.SelectOption( label="Today's Neutral Flow", description=f"⚫{nvol1} million.", ),
            disnake.SelectOption( label=f"Super Large Flow IN:", description=f"{superlgin} million."),
            disnake.SelectOption( label=f"Super Large Flow OUT:", description=f"{superlgout} million.", ),
            disnake.SelectOption( label=f"Major Flow IN:", description=f"{majorout} million."),
            disnake.SelectOption( label=f"Major Flow OUT:", description=f"{majorin} million.", ),
            disnake.SelectOption( label=f"Large Flow IN:", description=f"{lgin} million."),
            disnake.SelectOption( label=f"Large Flow OUT:", description=f"{lgout} million.", ),
            disnake.SelectOption( label=f"Medium Flow IN:", description=f"{medin} million."),
            disnake.SelectOption( label=f"Medium Flow OUT:", description=f"{medout} million.", ),
            disnake.SelectOption( label=f"Small Flow IN:", description=f"{smallin} million."),
            disnake.SelectOption( label=f"Small Flow OUT:", description=f"{smallout} million.", ),
            disnake.SelectOption( label=f"Retail Flow IN:", description=f"{retailin} million."),
            disnake.SelectOption( label=f"Retail Flow OUT:", description=f"{retailout} million.", ),
            disnake.SelectOption( label=f"New Flow IN:", description=f"{newlgin} million."),
            disnake.SelectOption( label=f"New Flow OUT:", description=f"{newlgout} million.", ),])
        view.add_item(select4)
        select6 = disnake.ui.Select( placeholder=f"🏹 🇩  🇦  🇹  🇦 for {self.values[0]} 🏹", min_values=1, max_values=1, custom_id=f"priceselect",
        options= [
            disnake.SelectOption( label=f"Todays Price Levels:", description=f"Open: {open} Current: {close} Low: {low} High: {high}"),
            disnake.SelectOption( label=f"Latest Earnings",description=f"🗓️ {latestEarningsDate}" ),
            disnake.SelectOption( label=f"52 Week High:", description=f"🎯 {fiftyTwoWkHigh}"),
            disnake.SelectOption( label=f"52 Week Low:", description=f"🎯 {fiftyTwoWkLow}", ),
            disnake.SelectOption( label="Average Volume, 10 Days:", description=f"{avg10} million.", ),
            disnake.SelectOption( label="Average Volume, 3 Months:", description=f"{avg3mo} million.", ),
            disnake.SelectOption( label="Latest Rating:", description=f"{ratinganalysis} with {ratingtotals} analysts.", ),])

                
        view.add_item(select6)


        
        await interaction.edit_original_message(view=view)




class FTDStocks(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        self.add_item(LowFloatDropdown())
        self.add_item(FTDStocksDropdown())

        data = client.ftd()
        index0 = data[0]
        index1 = data[1]
        index2 = data[2]
        index3 = data[3]
        index4 = data[4]
        index5 = data[5]
        index6 = data[6]
        index7 = data[7]
        index8 = data[8]
        index9 = data[9]
        index10 = data[10]
        index11 = data[11]
        index12 = data[12]
        index13 = data[13]
        index14 = data[14]
        t350 = index0['T+35 Date']
        t351 = index1['T+35 Date']
        t352 = index2['T+35 Date']
        t353 = index3['T+35 Date']
        t354 = index4['T+35 Date']
        t355 = index5['T+35 Date']
        t356 = index6['T+35 Date']
        t357 = index7['T+35 Date']
        t358 = index8['T+35 Date']
        t359 = index9['T+35 Date']
        t3510 = index10['T+35 Date']
        t3511 = index11['T+35 Date']
        t3512 = index12['T+35 Date']
        t3513 = index13['T+35 Date']
        t3514 = index14['T+35 Date']
        symbol0 = index0['Ticker']
        symbol1 = index1['Ticker']
        symbol2 = index2['Ticker']
        symbol3 = index3['Ticker']
        symbol4 = index4['Ticker']
        symbol5 = index5['Ticker']
        symbol6 = index6['Ticker']
        symbol7 = index7['Ticker']
        symbol8 = index8['Ticker']
        symbol9 = index9['Ticker']
        symbol10 = index10['Ticker']
        symbol11 = index11['Ticker']
        symbol12 = index12['Ticker']
        symbol13 = index13['Ticker']
        symbol14 = index14['Ticker']

        @disnake.ui.button(label=f"#1: {symbol0} | T35 Date: 🗓️ {t350}", style= disnake.ButtonStyle.grey)
        async def button1(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates``````", color = disnake.Colour.dark_orange())


            await inter.response.edit_message(embed=em, view=FTDStocks())

        @disnake.ui.button(label=f"#2: {symbol1} | T35 Date: 🗓️ {t351}", style= disnake.ButtonStyle.grey)
        async def button2(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates``````", color = disnake.Colour.dark_orange())
            em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

            await inter.response.edit_message(embed=em, view=FTDStocks())

        @disnake.ui.button(label=f"#3: {symbol2} | T35 Date: 🗓️ {t352}", style= disnake.ButtonStyle.grey)
        async def button3(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates```", color = disnake.Colour.dark_orange())
            em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

            await inter.response.edit_message(embed=em, view=FTDStocks())

        @disnake.ui.button(label=f"#4: {symbol3} | T35 Date: 🗓️{t353}", style= disnake.ButtonStyle.grey)
        async def button4(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates```", color = disnake.Colour.dark_orange())
            em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

            await inter.response.edit_message(embed=em, view=FTDStocks())

        @disnake.ui.button(label=f"#5: {symbol4} | T35 Date: {t354}", style= disnake.ButtonStyle.grey)
        async def button5(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates```", color = disnake.Colour.dark_orange())
            em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

            await inter.response.edit_message(embed=em, view=FTDStocks())

        @disnake.ui.button(label=f"#6: {symbol5} | T35 Date: 🗓️ {t355}", style= disnake.ButtonStyle.grey)
        async def button6(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates```", color = disnake.Colour.dark_orange())
            em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

            await inter.response.edit_message(embed=em, view=FTDStocks())

        @disnake.ui.button(label=f"#7: {symbol6} | T35 Date: 🗓️ {t356}", style= disnake.ButtonStyle.grey)
        async def button7(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates```", color = disnake.Colour.dark_orange())
            em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

            await inter.response.edit_message(embed=em, view=FTDStocks())

        @disnake.ui.button(label=f"#8: {symbol7} | T35 Date: 🗓️ {t357}", style= disnake.ButtonStyle.grey)
        async def button9(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates```", color = disnake.Colour.dark_orange())
            em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

            await inter.response.edit_message(embed=em, view=FTDStocks())

        @disnake.ui.button(label=f"#9: {symbol8} | T35 Date: 🗓️ {t358}", style= disnake.ButtonStyle.grey)
        async def button10(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates```", color = disnake.Colour.dark_orange())
            em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

            await inter.response.edit_message(embed=em, view=FTDStocks())

        @disnake.ui.button(label=f"#10: {symbol9} | T35 Date: 🗓️ {t359}", style= disnake.ButtonStyle.grey)
        async def buttona(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates```", color = disnake.Colour.dark_orange())
            em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

            await inter.response.edit_message(embed=em, view=FTDStocks())

        @disnake.ui.button(label=f"#11: {symbol10} | T35 Date: 🗓️ {t3510}", style= disnake.ButtonStyle.grey)
        async def buttonb(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates```", color = disnake.Colour.dark_orange())
            em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

            await inter.response.edit_message(embed=em, view=FTDStocks())
        @disnake.ui.button(label=f"#12: {symbol11} | T35 Date: 🗓️ {t3511}", style= disnake.ButtonStyle.grey)
        async def buttonc(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates```", color = disnake.Colour.dark_orange())
            em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

            await inter.response.edit_message(embed=em, view=FTDStocks())

        @disnake.ui.button(label=f"#13: {symbol12} | T35 Date: 🗓️ {t3512}", style= disnake.ButtonStyle.grey)
        async def buttone(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates```", color = disnake.Colour.dark_orange())
            em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

            await inter.response.edit_message(embed=em, view=FTDStocks())

        @disnake.ui.button(label=f"#14: {symbol13} | T35 Date: 🗓️ {t3513}", style= disnake.ButtonStyle.grey)
        async def buttond(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates```", color = disnake.Colour.dark_orange())
            em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

            await inter.response.edit_message(embed=em, view=FTDStocks())

        @disnake.ui.button(label=f"#15: {symbol14} | T35 Date: 🗓️ {t3514}", style= disnake.ButtonStyle.grey)
        async def buttonf(self, inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Stocks with high FTDS", description=f"```py\nTop 15 FTDs with t35 Dates```", color = disnake.Colour.dark_orange())
            em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

            await inter.response.edit_message(embed=em, view=FTDStocks())




class FTDStocksDropdown(disnake.ui.Select):
    def __init__(self):
        data = client.ftd()
        index0 = data[0]
        index1 = data[1]
        index2 = data[2]
        index3 = data[3]
        index4 = data[4]
        index5 = data[5]
        index6 = data[6]
        index7 = data[7]
        index8 = data[8]
        index9 = data[9]
        index10 = data[10]
        index11 = data[11]
        index12 = data[12]
        index13 = data[13]
        index14 = data[14]
        t350 = index0['T+35 Date']
        t351 = index1['T+35 Date']
        t352 = index2['T+35 Date']
        t353 = index3['T+35 Date']
        t354 = index4['T+35 Date']
        t355 = index5['T+35 Date']
        t356 = index6['T+35 Date']
        t357 = index7['T+35 Date']
        t358 = index8['T+35 Date']
        t359 = index9['T+35 Date']
        t3510 = index10['T+35 Date']
        t3511 = index11['T+35 Date']
        t3512 = index12['T+35 Date']
        t3513 = index13['T+35 Date']
        t3514 = index14['T+35 Date']
        symbol0 = index0['Ticker']
        symbol1 = index1['Ticker']
        symbol2 = index2['Ticker']
        symbol3 = index3['Ticker']
        symbol4 = index4['Ticker']
        symbol5 = index5['Ticker']
        symbol6 = index6['Ticker']
        symbol7 = index7['Ticker']
        symbol8 = index8['Ticker']
        symbol9 = index9['Ticker']
        symbol10 = index10['Ticker']
        symbol11 = index11['Ticker']
        symbol12 = index12['Ticker']
        symbol13 = index13['Ticker']
        symbol14 = index14['Ticker']

        options = [
            disnake.SelectOption(label=f"{symbol0}")
        ]
        super().__init__(
            placeholder = "🇫 🇹 🇩 🇸",
            min_values = 1,
            max_values = 1,
            options = options
        )
    async def callback(self, interaction:disnake.MessageCommandInteraction):
        pass

class DirectionDropdown(disnake.ui.Select):
    def __init__(self):

        # Set the options that will be presented inside the dropdown
        options = [
            disnake.SelectOption(
                label="Top Gainers - Premarket" ,description="Top gainers from pre-market session on the day.",
            ),
            disnake.SelectOption(
                label="Top Gainers - Aftermarket",description="Top gainers from after-market session on the day.",
            ),
            disnake.SelectOption(
                label="Top Gainers - 5 minutes",description="Top gainers from the past 5minutes on the day and updates real time.",
            ),
            disnake.SelectOption(
                label="Top Gainers - One Day",description="Top gainers from the daily time-frame.",
            ),
            disnake.SelectOption(
                label="Top Gainers - Five Days",description="Top gainers from the past five trading days.",
            ),
            disnake.SelectOption(
                label="Top Gainers - 3 Months",description="Top gainers from the past three months.",
            ),
            disnake.SelectOption(
                label="Top Losers - Premarket" ,description="Top Losers from pre-market session on the day.",
            ),
            disnake.SelectOption(
                label="Top Losers - Aftermarket",description="Top Losers from after-market session on the day.",
            ),
            disnake.SelectOption(
                label="Top Losers - 5 minutes",description="Top Losers from the past 5minutes on the day and updates real time.",
            ),
            disnake.SelectOption(
                label="Top Losers - One Day",description="Top Losers from the daily time-frame.",
            ),
            disnake.SelectOption(
                label="Top Losers - Five Days",description="Top Losers from the past five trading days.",
            ),
            disnake.SelectOption(
                label="Top Losers - 3 Months",description="Top Losers from the past three months.",
            ),

        ]

        super().__init__(
            placeholder="🛒 🇹  🇴  🇵 | 🇲  🇴  🇻  🇪  🇷  🇸 🛒",
            min_values=1,
            max_values=1,
            custom_id ="xxxx9",
            options=options,
        ),

    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.defer(with_message=False)
        if self.values[0] == "Top Gainers - Premarket":
            r = requests.get(url=f"https://quotes-gw.webullfintech.com/api/wlas/ranking/topGainers?regionId=6&rankType=preMarket&pageIndex=1&pageSize=15")
            d = r.json()
            data = d['data']
            items = '\n\n'.join(f"\n{d['symbol']} {d['name']} | ${d['close']} 52W_LOW: ${d['fiftyTwoWkLow']} 52W_HIGH: ${d['fiftyTwoWkHigh']}" for d in ticker)
            embed = disnake.Embed(title=f"Realtime Gainers", description=f" ```py\n{items}```", colour=disnake.Colour.green())
            await interaction.edit_original_message(embed=embed, view=DirectionDropdownView())
        elif self.values[0] == "Top Gainers - Aftermarket":
            r = requests.get(url=f"https://quotes-gw.webullfintech.com/api/wlas/ranking/topGainers?regionId=6&rankType=afterMarket&pageIndex=1&pageSize=15")
            d = r.json()
            data = d['data']
            ticker = [d['ticker'] for d in data]
            iitems = '\n\n'.join(f"\n{d['symbol']} {d['name']} | ${d['close']} 52W_LOW: ${d['fiftyTwoWkLow']} 52W_HIGH: ${d['fiftyTwoWkHigh']}" for d in ticker)
            embed = disnake.Embed(title=f"Realtime Gainers", description=f"```py\n ```{items}```", colour=disnake.Colour.green())
            await interaction.edit_original_message(embed=embed, view=DirectionDropdownView())
            
        elif self.values[0] == "Top Gainers - 5 minutes":
            r = requests.get(url=f"https://quotes-gw.webullfintech.com/api/wlas/ranking/topGainers?regionId=6&rankType=5min&pageIndex=1&pageSize=15")
            d = r.json()
            data = d['data']
            ticker = [d['ticker'] for d in data]
            items = '\n\n'.join(f"\n{d['symbol']} {d['name']} | ${d['close']} 52W_LOW: ${d['fiftyTwoWkLow']} 52W_HIGH: ${d['fiftyTwoWkHigh']}" for d in ticker)
            embed = disnake.Embed(title=f"Realtime Gainers", description=f" ```py\n{items}```", colour=disnake.Colour.green())
            await interaction.edit_original_message(embed=embed, view=DirectionDropdownView())
        elif self.values[0] == "Top Gainers - One Day":
            r = requests.get(url=f"https://quotes-gw.webullfintech.com/api/wlas/ranking/topGainers?regionId=6&rankType=5min&pageIndex=1&pageSize=15")
            d = r.json()
            data = d['data']
            ticker = [d['ticker'] for d in data]
            items = '\n\n'.join(f"\n{d['symbol']} {d['name']} | ${d['close']} 52W_LOW: ${d['fiftyTwoWkLow']} 52W_HIGH: ${d['fiftyTwoWkHigh']}" for d in ticker)
            embed = disnake.Embed(title=f"Realtime Gainers", description=f" ```py\n{items}```", colour=disnake.Colour.green())
            await interaction.edit_original_message(embed=embed, view=DirectionDropdownView())
            
        elif self.values[0] == "Top Gainers - Five Days":
            r = requests.get(url=f"https://quotes-gw.webullfintech.com/api/wlas/ranking/topGainers?regionId=6&rankType=5min&pageIndex=1&pageSize=15")
            d = r.json()
            data = d['data']
            ticker = [d['ticker'] for d in data]
            items = '\n\n'.join(f"\n{d['symbol']} {d['name']} | ${d['close']} 52W_LOW: ${d['fiftyTwoWkLow']} 52W_HIGH: ${d['fiftyTwoWkHigh']}" for d in ticker)
            embed = disnake.Embed(title=f"Realtime Gainers", description=f" ```py\n{items}```", colour=disnake.Colour.green())
            await interaction.edit_original_message(embed=embed, view=DirectionDropdownView())
            
        elif self.values[0] == "Top Gainers - 3 Months":
            r = requests.get(url=f"https://quotes-gw.webullfintech.com/api/wlas/ranking/topGainers?regionId=6&rankType=5min&pageIndex=1&pageSize=15")
            d = r.json()
            data = d['data']
            ticker = [d['ticker'] for d in data]
            items = '\n\n'.join(f"\n{d['symbol']} {d['name']} | ${d['close']} 52W_LOW: ${d['fiftyTwoWkLow']} 52W_HIGH: ${d['fiftyTwoWkHigh']}" for d in ticker)
            embed = disnake.Embed(title=f"Realtime Gainers", description=f" ```py\n{items}```", colour=disnake.Colour.green())
            await interaction.edit_original_message(embed=embed, view=DirectionDropdownView())
            
        elif self.values[0] == "Top Losers - Premarket":
            r = requests.get(url=f"https://quotes-gw.webullfintech.com/api/wlas/ranking/dropGainers?regionId=6&rankType=preMarket&pageIndex=1&pageSize=15")
            d = r.json()
            data = d['data']
            ticker = [d['ticker'] for d in data]
            items = '\n\n'.join(f"\n{d['symbol']} {d['name']} | ${d['close']} 52W_LOW: ${d['fiftyTwoWkLow']} 52W_HIGH: ${d['fiftyTwoWkHigh']}" for d in ticker)
            embed = disnake.Embed(title=f"Realtime Losers - PreMarket", description=f" ```py\n{items}```", colour=disnake.Colour.green())

            await interaction.edit_original_message(embed=embed, view=DirectionDropdownView())
            
        elif self.values[0] == "Top Losers - Aftermarket":
            r = requests.get(url=f"https://quotes-gw.webullfintech.com/api/wlas/ranking/topLosers?regionId=6&rankType=afterMarket&pageIndex=1&pageSize=15")
            d = r.json()
            data = d['data']
            ticker = [d['ticker'] for d in data]
            items = '\n\n'.join(f"\n{d['symbol']} {d['name']} | ${d['close']} 52W_LOW: ${d['fiftyTwoWkLow']} 52W_HIGH: ${d['fiftyTwoWkHigh']}" for d in ticker)
            embed = disnake.Embed(title=f"Realtime Losers - AfterMarket", description=f" ```py\n{items}```", colour=disnake.Colour.green())
            await interaction.edit_original_message(embed=embed, view=DirectionDropdownView())
            
        elif self.values[0] == "Top Losers - 5 minutes":
            r = requests.get(url=f"https://quotes-gw.webullfintech.com/api/wlas/ranking/dropGainers?regionId=6&rankType=5min&pageIndex=1&pageSize=15")
            d = r.json()
            data = d['data']
            ticker = [d['ticker'] for d in data]
            items = '\n\n'.join(f"\n{d['symbol']} {d['name']} | ${d['close']} 52W_LOW: ${d['fiftyTwoWkLow']} 52W_HIGH: ${d['fiftyTwoWkHigh']}" for d in ticker)
            embed = disnake.Embed(title=f"Realtime Losers - 5 Minutes", description=f" ```py\n{items}```", colour=disnake.Colour.green())
            await interaction.edit_original_message(embed=embed, view=DirectionDropdownView())
            
        elif self.values[0] == "Top Losers - One Day":
            r = requests.get(url=f"https://quotes-gw.webullfintech.com/api/wlas/ranking/dropGainers?regionId=6&rankType=1d&pageIndex=1&pageSize=15")
            d = r.json()
            data = d['data']
            ticker = [d['ticker'] for d in data]
            items = '\n\n'.join(f"\n{d['symbol']} {d['name']} | ${d['close']} 52W_LOW: ${d['fiftyTwoWkLow']} 52W_HIGH: ${d['fiftyTwoWkHigh']}" for d in ticker)
            embed = disnake.Embed(title=f"Realtime Losers - One Day", description=f" ```py\n{items}```", colour=disnake.Colour.green())
            await interaction.edit_original_message(embed=embed, view=DirectionDropdownView())
            
        elif self.values[0] == "Top Losers - Five Days":
            r = requests.get(url=f"https://quotes-gw.webullfintech.com/api/wlas/ranking/dropGainers?regionId=6&rankType=5d&pageIndex=1&pageSize=15")
            d = r.json()
            data = d['data']
            ticker = [d['ticker'] for d in data]
            items = '\n\n'.join(f"\n{d['symbol']} {d['name']} | ${d['close']} 52W_LOW: ${d['fiftyTwoWkLow']} 52W_HIGH: ${d['fiftyTwoWkHigh']}" for d in ticker)
            embed = disnake.Embed(title=f"Realtime Losers", description=f" ```py\n{items}```", colour=disnake.Colour.green())

            await interaction.edit_original_message(embed=embed, view=DirectionDropdownView())

        elif self.values[0] == "Top Losers - 3 Months":
            r = requests.get(url=f"https://quotes-gw.webullfintech.com/api/wlas/ranking/dropGainers?regionId=6&rankType=3m&pageIndex=1&pageSize=15")
            d = r.json()
            data = d['data']
            ticker = [d['ticker'] for d in data]
            items = '\n\n'.join(f"\n{d['symbol']} {d['name']} | ${d['close']} 52W_LOW: ${d['fiftyTwoWkLow']} 52W_HIGH: ${d['fiftyTwoWkHigh']}" for d in ticker)
            embed = disnake.Embed(title=f"Realtime Losers - 3 months", description=f" ```py\n{items}```", colour=disnake.Colour.green())

            await interaction.edit_original_message(embed=embed, view=DirectionDropdownView())



class TopOptionDropdown(disnake.ui.Select):
    def __init__(self):
        options = [
            disnake.SelectOption(
            label="The Eight Conditions of the List🌟", description="Learn About the 8 Conditions of the List",
            ),
                disnake.SelectOption(
            label="How to access and use the options list on Webull", description="Learn about this tool from the Webull App.",
            ),
        ]

        super().__init__(
            placeholder="🔎🇹 🇴 🇵  🇴 🇵 🇹 🇮 🇴 🇳 🇸🔍",
            min_values=1,
            max_values=1,
            custom_id="XX",
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
            await interaction.response.defer(with_message=True, ephemeral=True)
            if self.values[0] == "The Eight Conditions of the List🌟":
                embed = disnake.Embed(title="The Eight Conditions of the Top Options List🌟", color=disnake.Colour.random())
                embed.add_field(name="-", value="**Total Volume**")
                embed.add_field(name="-", value="**Total Position**")
                embed.add_field(name="-", value="**Volume**")
                embed.add_field(name="-", value="**Turnover**")
                embed.add_field(name="-", value="**Position**")
                embed.add_field(name="-", value="**Position Increase**")
                embed.add_field(name="-", value="**Position Decrease**")
                embed.add_field(name="-", value="**Implied Volatility**")
                embed.set_footer(text="Implemented by FUDSTOP Trading", )

                await interaction.edit_original_message(embed=embed, view=TopOptionsView())
            else:
                if self.values[0] == "How to access and use the options list on Webull":
                    embed = disnake.Embed(title="How to access and use the options list on Webull", description="```py\nPlease apply for options trading if you want to check the options list on Webull. ``` ```py\nYou need to subscribe OPRA real-time options quotes to view the top options list. The list updates every 30s.```",color=disnake.Colour.random())
                    embed.set_image(url="https://u1sweb.webullfinance.com/social/724dca743bcb47aca557a3bce6a9f6f8.gif")
                    embed.set_footer(text="Implemented by FUDSTOP Trading", )

                    await interaction.edit_original_message(embed=embed, view=TopOptionsView())





class MainSelect(disnake.ui.Select):
    def __init__(self):

        options=[
            disnake.SelectOption(label=f"🔁 Recurring Investments"),
            disnake.SelectOption(label=f"⚓ ETFs"),
            disnake.SelectOption(label=f"🔍 Technical Analysis"),
            disnake.SelectOption(label=f"⭕ Options"),
            disnake.SelectOption(label=f"📈 Stock Basics"),
            disnake.SelectOption(label=f"💼 Portfolio Basics"),
            disnake.SelectOption(label=f"🇺🇸 US Markets"),
            disnake.SelectOption(label=f"📊 Trading Signals, Charts, Patterns"),
            disnake.SelectOption(label=f"♻️ Recurring Investment"),
            disnake.SelectOption(label=f"🪙 Crypto Currency")]

        
        super().__init__(
                placeholder="🏫 🇨 🇴 🇺 🇷 🇸 🇪 🇸",
                min_values=1,
                max_values=1,
                options=options
        )

    async def callback(self, interaction:disnake.MessageCommandInteraction):
        if self.values[0] == "🔁 Recurring Investments":
            await interaction.response.edit_message(view=RecurringView())
        elif self.values[0] == "⚓ ETFs":
            view = disnake.ui.View()
            view.add_item(ETFSelect())
            await interaction.response.edit_message(view=view)
        elif self.values[0] == "🔍 Technical Analysis":
            view = disnake.ui.View()
            view.add_item(TechAnalysisSelect())
            await interaction.response.edit_message(view=view)
class MainSelectView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(MainSelect())



class RepoView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    


        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/FRED/RRPTSYD.csv?&api_key={YOUR_NASDAQ_KEY}", label="⛓️Treasury Securities Sold by the Federal Reserve"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/FRED/RPTSYD.csv?&api_key={YOUR_NASDAQ_KEY}", label="⛓️Treasury Securities Purchased by the Federal Reserve"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/FRED/RPTTLD.csv?&api_key={YOUR_NASDAQ_KEY}", label="⛓️Total Securities Purchased by the Federal Reserve"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/FRED/RPTTLD.csv?&api_key={YOUR_NASDAQ_KEY}", label="⛓️Overnight Repurchase Agreements: Mortgage Backed Securities Sold"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/FRED/RPONMBSD.csv?&api_key={YOUR_NASDAQ_KEY}", label="⛓️Overnight Repurchase Agreements: Mortgage-Backed Securities Purchased"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/FRED/RPONTSYD.csv?&api_key={YOUR_NASDAQ_KEY}", label="⛓️Overnight Repurchase Agreements: Treasury Securities Purchased"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/FRED/RPONAGYD.csv?&api_key={YOUR_NASDAQ_KEY}", label="⛓️Overnight Repurchase Agreements: Federal Agency Securities Purchased"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/FRED/RPMBSD.csv?&api_key={YOUR_NASDAQ_KEY}", label="⛓️Repurchase Agreements: Mortgage-Backed Securities Purchased"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/FRED/RPAGYD.csv?&api_key={YOUR_NASDAQ_KEY}", label="⛓️Repurchase Agreements: Federal Agency Securities Sold"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/FRED/RRPTTLD.csv?&api_key={YOUR_NASDAQ_KEY}", label="⛓️Repurchase Agreements: Federal Agency Securities Purchased"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/FRED/RRPONTTLD.csv?&api_key={YOUR_NASDAQ_KEY}", label="⛓️Reverse Repurchase Agreements: Total Securities Sold"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def gohome( self,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="data menu.", color=disnake.Colour.dark_gold())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, view=dataView())









class BotsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
        self.add_item(CommandsDropdown())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def goback( self,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, )
    



class FUDSTOPView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    
    @disnake.ui.button(label="Active Stock Tickers", style=disnake.ButtonStyle.blurple, )
    async def active( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/active", description = "Returns the most active tickers for the day. Can easily plug into excel!",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/cvChp7P/active.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="🎯Advanced Price Target", style=disnake.ButtonStyle.grey, )
    async def active( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/advanced_pricetarget", description = "Advanced Price Target not only gives you analyst rating and industry thoughts, but it updaes once per week and constantly searches for new data for the average pricing!",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/gJszfyP/ADVANCED-PRICE-TARGET.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Agency Mortgage Backed Securities - FED", style=disnake.ButtonStyle.blurple, )
    async def ambs( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/ambs", description = "/ambs lists the recent Mortgage Backed Security Transactions out of the FED. Your options are: **all** ** sales** **purchases** **rolls** **swaps**",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/Wk3vpdB/AMBS.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Beneficial Owner", style=disnake.ButtonStyle.green, )
    async def beneficialowner( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/beneficial_owner", description = "/beneficial_owner lists the latest recorded 13F filed for a specific ticker of your choosing. Must search for tickers in all caps!**",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/jDGnzqJ/beneficialowner.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Criminals", style=disnake.ButtonStyle.grey, )
    async def criminals( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/criminals",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media0.giphy.com/media/EnOeJR5MUwR5tYol0m/giphy.gif?cid=790b7611790ee13ce59f1ac474aff94fb98af687496d8e9f&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Analyst Consensus", style=disnake.ButtonStyle.green, )
    async def analystconsensus( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/xHj1q29FBK3u9ZkYHp/giphy.gif?cid=790b761116c88281f98d49dc7617c98071f8a430efc2968a&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())


    @disnake.ui.button(label="Check Moving Averages (50ma and 200ma - DAILY)", style=disnake.ButtonStyle.grey, )
    async def checkmas( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/check_moving_averages",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media4.giphy.com/media/MA8oZhZLpsf04Y4cQN/giphy.gif?cid=790b7611e6c681d5b36d1eb4798ac05070b00cbd877df588&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Check all Major Indexes", style=disnake.ButtonStyle.blurple, )
    async def checkindex( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/check_indexes",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media4.giphy.com/media/wfzmlEV4joHdppVoPO/giphy.gif?cid=790b7611970dfa8cf41f4fd298c2ae6e656539f60b5f2aca&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Check Price Performance", style=disnake.ButtonStyle.grey, )
    async def check( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/check",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media1.giphy.com/media/m8xCbh80CfLjimDrv8/giphy.gif?cid=790b7611150592dcfa4af5fd09c6c086f7dde4149db4ba84&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Earnings", style=disnake.ButtonStyle.green, )
    async def earnings( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/earnings",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://giphy.com/gifs/RswiJjpckvTTi8fdRa")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Earnings Upcoming", style=disnake.ButtonStyle.blurple )
    async def earningsupcoming( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/earnings_upcoming <date>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/YcGDyz8/earnings-UPCOMING.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())


    @disnake.ui.button(label="Enviornmental, Social, and Governance Risk", style=disnake.ButtonStyle.grey, )
    async def esgrisk( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/IoWcUqVy8KlNnZerHn/giphy.gif?cid=790b7611ba41e28ad4b2675b57748008c8446a6b6d14a6d2&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Enviornmental, Social, and Governance Metrics", style=disnake.ButtonStyle.green, )
    async def esg( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media1.giphy.com/media/khvcU2xXGdKI3jw3pk/giphy.gif?cid=790b7611bfadbf75e499ede5e5e2f14197b47255a1312869&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Dow Jones List", style=disnake.ButtonStyle.grey, )
    async def dowjones( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/dowjones",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/7w3LnCN2lvpRQlBlcG/giphy.gif?cid=790b7611e87a8c7453800751137e56a5848d3641970e030e&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Realtime Top Gainers / Losers(dropGainers)", style=disnake.ButtonStyle.blurple, )
    async def topgain( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/direction <direction> <gainer/loser>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media0.giphy.com/media/vkqzRijPaYex4vnlcs/giphy.gif?cid=790b76110a1d363d8e7c4aa338be43c1574600bbb4c0c4ab&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Daily Ratings", style=disnake.ButtonStyle.blurple, )
    async def dailyrating( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/hoLAIJForW8v9L5pMy/giphy.gif?cid=790b761126c0d861142b53cfb6bcc1f18263e412ab46d699&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Company Notes Due", style=disnake.ButtonStyle.blurple, )
    async def companynotes( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/company_notes_due",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/5M31qN7/COMPANY-notes-due.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="ETF Ticker List", style=disnake.ButtonStyle.green, )
    async def etflist( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/etf_holders",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/wz2Hb5K/etf-holders.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Evaluate A Company", style=disnake.ButtonStyle.grey, )
    async def evaluate( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/evaluate",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/pXj2x8p/evaluate.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Listed Exchange", style=disnake.ButtonStyle.grey, )
    async def exchange( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/exchange",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/BqBt9KD/exchange.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Fails to Deliver - Excel Ready", style=disnake.ButtonStyle.green, )
    async def fails( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fails",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/ZMfLsnG/fails.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Fair Value - Industry", style=disnake.ButtonStyle.grey, )
    async def fair_value( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fair_value",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/ZMfLsnG/fails.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="52 week high / low + Dates", style=disnake.ButtonStyle.blurple, )
    async def fiftytwo( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fifty_two",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/wdWsFfq/fiftytwo.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Page 2 -->", style=disnake.ButtonStyle.red, )
    async def page2( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fifty_two",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/wdWsFfq/fiftytwo.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media2.giphy.com/media/bVPcXheO9jDBYP2zXH/giphy.gif?cid=790b76116c18f3195489b517ff7ebc22a6fa6fa904ac40b1&rid=giphy.gif&ct=g")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, )
    
    
    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def pin( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=FUDSTOPView)


class QuantDataView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="Quant Data Bot", style=disnake.ButtonStyle.blurple, )
    async def quantdata( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "Quant Data", description = " **Quant Data Bot provides the following four feeds which we have set-up by industry here in the discord:",color=disnake.Colour.random())
        embed.set_image(url="https://media.giphy.com/media/EEbWVfRi4QeBPymCCe/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=QuantDataView())

    @disnake.ui.button(label="1️⃣Dark Pool Feeds", style=disnake.ButtonStyle.blurple, )
    async def unusualopt( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "1️⃣Dark Pool Feeds", description = "Dark Pool feeds come with side of sentiment. \n\n 🔴 = Sell Side \n\n 🟢 = Buy Side, GRAY = Neutral \n\n Dark Pool Feeds can be search using the Discord search by using the following search options: \n ```'Dark Pool Trade: <ticker>''' \n **or** \n ````Dark Pool Trade:' during:<date>```",color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/0rHRffZ/DARKPOOLTRADER.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=QuantDataView())
    
    @disnake.ui.button(label="2️⃣Unusual Options", style=disnake.ButtonStyle.blurple, )
    async def quantalerts( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "2️⃣Unusual Options", description = "Unusual Options Activity identifies options contracts that are trading at a higher volume relative to the contract's open interest. Unusual Options can provide insight on what **smart money** is doing with large volume orders, signaling new positions and potentially a big move in the underlying asset. \n\n 🔴 = Puts \n\n 🟢 = Calls \n\n Unusual Options Feeds can be searched in discord by using: \n ```'Unusual Opt' <ticker>``` **or** ```'Unusual Opt' during:<date>``` ",color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/7GD4rY2/UNUSUAL.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=QuantDataView())

    @disnake.ui.button(label="3️⃣Golden Sweeps", style=disnake.ButtonStyle.blurple, )
    async def sweeps( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "Quant Data", description = "Golden Sweeps are basically a very large order that hits the market and takes all or most the inventory/offers at once. This is usually a very high probability signal given the aggressive stance of the trader(s) behind it. \n\n These orders can be both **bullish or bearish** not only based on whether Puts or Calls were bought but also based on whether the sweep was on the Call or Put side. \n\n Golden Feeds can be searched in discord by using: \n ```'Golden' <ticker>``` **or** ```'Golden' during:<date>```",color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/6NjkxNj/golden-sweeps.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=QuantDataView())
    
    @disnake.ui.button(label="4️⃣Quant Alerts", style=disnake.ButtonStyle.blurple, )
    async def darkpool( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "4️⃣Quant Data", description = "Quant Alerts are **bullish** or **bearish** buy signals. I would avoid these as these feeds are solely for research, intention purposes and are 15 minute delayed. 🔴 = Bearish \n\n 🟢 = Bullish",color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/fqxQbbN/QUANTALERTING.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        
        await interaction.response.edit_message(embed=embed, view=QuantDataView())

    
    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def goback(self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message()
    




class OpenBBView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @disnake.ui.button(label="**OpenBB Bot**", style=disnake.ButtonStyle.grey, )
    async def openbbslash( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="openBB Slash Help",  color=disnake.Colour.random())
        embed.add_field(name="EXPLANATION", value="Slash commands will come with different `ARGUMENTS.` The `ARGUMENTS` are often optional, but give more versatility to some options commands. \n\n  If on a P.C. you can use `TAB` to quickly move to the next argument. Once you have what you want, press `Enter` to run the command.", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())
    
    @disnake.ui.button(label="**OpenBB Bot - /candle**", style=disnake.ButtonStyle.grey, )
    async def openbbcandle( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        embed = disnake.Embed(title="/candle", description="Copy/Paste these command helpers into chat and press spacebar to auto-fill. All you need to do is replace the TICKER with the one you want.", color=disnake.Colour.random())
        embed.add_field(name="COMMAND: */candle*",value='Use `/candle` to chart stocks. `ARGUMENTS:` interval:`TRUE/FALSE` trendline:`TRUE/FALSE` start:`YYYY-MM-DD` past_days:`#of days` extended_hours:`TRUE/FALSE` end:`YYYY-MM-DD` news:`TRUE/FALSE` heikin_candles:`TRUE/FALSE`', inline=False)
        embed.add_field(name="COMMAND HELPER*",value='```/candle ticker: interval:1440 trendline:True heikin_candles:False extended_hours:True```', inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())   
    
    @disnake.ui.button(label="**OpenBB Bot - Technical Analysis**", style=disnake.ButtonStyle.grey, )
    async def openbbta( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        await interaction.response.edit_message(view=OpenBBHelpers())      

    @disnake.ui.button(label="**OpenBB Bot - Options Commands**", style=disnake.ButtonStyle.green, )
    async def openbboptions( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        embed = disnake.Embed(title="/opt", description="Copy/Paste these command helpers into chat and press spacebar to auto-fill. All you need to do is replace the TICKER with the one you want.", color=disnake.Colour.random())     
        embed.add_field(name="**Options Command List** `/opt`", value="/opt unu [unusual options] ```\n\n  ``` /opt itm ticker [in the money options] ```\n\n  ``` /opt info ticker [options info] ``` \n\n ``` /opt vsurf ticker <z>/<oi> ``` \n\n  ``` /opt oi ticker <EXPIRATION> <MIN-SP> <MAX-SP>``` \n\n ``` /opt vol ticker <EXPIRATION> <MIN-SP> <MAX-SP> ``` \n\n  ``` /opt smile ticker <EXPIRATION> <MIN-SP> <MAX-SP> ``` \n\n  ``` /opt overview ticker <EXPIRATION> <MIN-SP> <MAX-SP> ``` \n\n  ``` /opt hist ticker <STRIKE> <EXPIRATION> <OPT-TYPE> ``` \n\n  ``` /opt grhist ticker <STRIKE> <EXPIRATION> <OPT-TYPE> <GREEK> ``` \n\n  ``` /opt chain ticker <EXPIRATION> <OPT-TYPE> <MIN-SP> <MAX-SP> ``` \n\n ```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())   
    
    @disnake.ui.button(label="**OpenBB Bot - Dark Pool Command List**", style=disnake.ButtonStyle.green, )
    async def openbbdarkpool( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        embed = disnake.Embed(title="/dps", description="Copy/Paste these command helpers into chat and press spacebar to auto-fill. All you need to do is replace the TICKER with the one you want.", color=disnake.Colour.random())   
        embed.add_field(name="**Dark Pool Command List**", value=" ```/dps hsi <NUM> ``` \n\n  ``` /dps shorted (NUM) ``` \n\n  ``` /dps psi ticker ```\n\n ``` /dps spos ticker ``` \n\n  ``` /dps dpotc ticker ``` \n\n  ``` /dps pos <SORT> <NUM> <ASCENDING> ``` \n\n  ``` /dps sidtc <SORT> <NUM> ``` \n\n  ``` /dps ftd ticker  <DATE_START> <DATE_END> ```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())      
    
    @disnake.ui.button(label="**OpenBB Bot - Due Dilligence**", style=disnake.ButtonStyle.green, )
    async def openbbdd( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        embed = disnake.Embed(title="/dd", description="Copy/Paste these command helpers into chat and press spacebar to auto-fill. All you need to do is replace the TICKER with the one you want.", color=disnake.Colour.random())   
        embed.add_field(name="**DUE DILLIGENCE**", value="```/dd est ticker``` \n\n ```/dd sec ticker``` \n\n  ```/dd borrowed ticker``` \n\n ```/dd analyst ticker``` \n\n  ```/dd supplier ticker``` \n\n  ```/dd customer ticker``` \n\n  ```/dd arktrades ticker``` \n\n  ```/dd pt ticker <RAW> <DATE_START>```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())        
    
    @disnake.ui.button(label="**OpenBB Bot - ECONOMY**", style=disnake.ButtonStyle.red, )
    async def openbbeconomy( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        embed = disnake.Embed(title="/econ", description="Copy/Paste these command helpers into chat and press spacebar to auto-fill. All you need to do is replace the TICKER with the one you want.", color=disnake.Colour.random())   
        embed.add_field(name="**ECONOMY COMMAND LIST**", value="```/econ softs``` \n\n ```/econ meats```\n\n ```/econ energy``` \n\n  ```/econ metals``` \n\n  ```/econ grains``` \n\n ```/econ futures``` \n\n  ```/econ usbonds``` \n\n  ```/econ glbonds``` \n\n  ```/econ indices``` \n\n  ```/econ repo``` \n\n  ```/econ overview``` \n\n  ```/econ feargreed``` \n\n  ```/econ currencies``` \n\n  ```/econ valuation <GROUP>``` \n\n  ```/econ performance <GROUP>```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())   
    
    @disnake.ui.button(label="**OpenBB Bot - ETF Commands**", style=disnake.ButtonStyle.red, )
    async def openbbetf( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        embed = disnake.Embed(title="/etf", description="Copy/Paste these command helpers into chat and press spacebar to auto-fill. All you need to do is replace the TICKER with the one you want.", color=disnake.Colour.random())    
        embed.add_field(name="**ETF Command List**", value="``` /etfs disc-tops <SORT> ``` \n\n  ``` /etfs holdings by-etf <ETF> <NUM> ``` \n\n  ``` /etfs holdings by-ticker <TICKER> <NUM> ```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())       
    
    @disnake.ui.button(label="**OpenBB Bot - OTHER**", style=disnake.ButtonStyle.red, )
    async def openbbother( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        embed = disnake.Embed(title="OTHER", description="Copy/Paste these command helpers into chat and press spacebar to auto-fill. All you need to do is replace the TICKER with the one you want.", color=disnake.Colour.random())   
        embed.add_field(name="**OTHER Commands List**", value="``` /futures ``` \n\n ```/heatmap``` \n\n ```/quote <ticker>``` \n\n ```/ins-last <ticker> <NUM>``` \n\n ```/btc <INTERVAL> <PAST_DAYS> <START> <END>``` \n\n  ```/eth <INTERVAL> <PAST_DAYS> <START> <END>``` \n\n  ```/sol <INTERVAL> <PAST_DAYS> <START> <END>```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=BotsView())




class HelpView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        
    @disnake.ui.button(label="FUDSTOP and Discord Help Videos", style=disnake.ButtonStyle.green, )
    async def discordhelpers(self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        
        embeds = [ 
        disnake.Embed(title="FUDSTOP and Discord Help Videos"),
        disnake.Embed(title="DISCORD HELP - Saving Messages as Threads", description="https://youtu.be/neWYeYpfpxY \n Learn how to quickly save messages as Threads to make notes, remember something, or store important information."),
        disnake.Embed(title="DISCORD HELP - Utilizing Discord Search", description="https://youtu.be/3CkRmT2SMNk \n Our discord search feature is one of the most useful tools in this entire Discord. Not only can you **search for specific information from specific users** but you can also search for **dark pool, golden sweep, unusual options, and any other data you can think of. \n **EXAMPLE:** \n In the search bar - you can filter results with the following methods: ```from:<user>``` ```has:<embed> / <image> / <pin> / <video> / <mentions>``` ```during: <date>``` ```between: <date 1> <date 2>``` ```in: <channel>``` ```before: <date> / after: <date>```"),
        disnake.Embed(title="DISCORD HELP - Turning on Developer Mode", description="https://youtu.be/b52p7V4QTaM \n It is **absolutely essential that you turn on developer mode.** This will allow for the hashtag navigation system - the next video in this series."),
        disnake.Embed(title="DISCORD HELP - The Hashtag Navigation System", description="https://youtu.be/scRK6rZ_HWY \n Typing '#' "),
        disnake.Embed(title="DISCORD HELP - Alphaquery and Play Screeners", description="\n **For play screeners - just use the /alphascreen command. It's that simple!**"),
        disnake.Embed(title="DISCORD HELP - Optimizing Your Discord Layout", description="https://youtu.be/xvlTy_GG10Y \n In discord - you can mute the channels you don't want to hear info from, and then set-up notifications for the rest. Utilize the discord setup that bets fits your personal interests!"),
        disnake.Embed(title="DISCORD HELP - How to Query Every Ticker in the Market", description="https://youtu.be/HLG-ol7bAkA \n A tutorial on how to query all tickers with Alphaquery."),
        disnake.Embed(title="DISCORD HELP - Navigation and Researching", description="https://youtu.be/sHthg4RKMRY \n Discord tricks regarding navigation within discord and researching. "),
        disnake.Embed(title="DISCORD HELP - How to Read Open Interest & Volume", description="https://youtu.be/7laLsbo3-K8"),
        disnake.Embed(title="FUDSTOP Shorts - Command Booklets", description="https://youtu.be/lsDV_y0fleM"),
        disnake.Embed(title="FUDSTOP Shorts - Spy Charting", description="https://youtu.be/Gucc9fkphbo \n Learn how to chart for SUPPORT and RESISTANCE by using **gaps.**"),
        disnake.Embed(title="FUDSTOP Shorts - Alphaquery Tutorial", description="https://youtu.be/J-GfKWFSWuk"),
        disnake.Embed(title="FUDSTOP Shorts - Desktop Notifications Example", description="https://youtu.be/zPG_hoQXAto"),
        disnake.Embed(title="FUDSTOP Shorts - Query Every Ticker in the Market by RSI", description="https://youtu.be/2_Jb42gtz7I")]
        options = [
        disnake.SelectOption(label="Home", value="0", emoji="🏡"),
        disnake.SelectOption(label="DISCORD HELP - Saving Messages as Threads", value="1", emoji="🤖"),
        disnake.SelectOption(label="DISCORD HELP - Utilizing Discord Search", value="2", emoji="📓"),
        disnake.SelectOption(label="DISCORD HELP - Turning on Developer Mode", value="3", emoji="🛠️"),
        disnake.SelectOption(label="DISCORD HELP - The Hashtag Navigation System", value="4", emoji="🏫"),
        disnake.SelectOption(label="DISCORD HELP - Alphaquery and Play Screeners", value="5", emoji="🆘"),
        disnake.SelectOption(label="DISCORD HELP - How to Query Every Ticker in the Market", value="6", emoji="💻"),
        disnake.SelectOption(label="DISCORD HELP - Navigation and Researching", value="7", emoji="📹"),
        disnake.SelectOption(label="DISCORD HELP - How to Read Open Interest & Volume", value="8", emoji="📜"),
        disnake.SelectOption(label="FUDSTOP Shorts - Command Booklets", value="9", emoji="🇨🇳"),
        disnake.SelectOption(label="FUDSTOP Shorts - Spy Charting", value="10", emoji="🌐"),
        disnake.SelectOption(label="FUDSTOP Shorts - Alphaquery Tutorial", value="11", emoji="🌐"),
        disnake.SelectOption(label="FUDSTOP Shorts - Desktop Notifications Example", value="12", emoji="🇨🇳"),
        disnake.SelectOption(label="FUDSTOP Shorts - Query Every Ticker in the Market by RSI", value="13", emoji="🌐")]

        super().__init__(
                )
                # Sends first embed with the buttons, it also passes the embeds list into the View class.
        await interaction.response.send_message(embed=embeds[0], view=Menu(embeds))
    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.edit_message(view=HelpView())

    @disnake.ui.button(label="Command Explanations🤖", style=disnake.ButtonStyle.blurple, )
    async def commands( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Command Explanations🤖", description="You are now viewing **Command Explanations🤖**", color=disnake.Colour.dark_green())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())

    @disnake.ui.button(label="Sectors In Discord🌐", style=disnake.ButtonStyle.blurple, )
    async def sectors( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Sectors In Discord🌐", description="You are now viewing **Sectors in Discord**", color=disnake.Colour.dark_green())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view= SectorView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def gohome( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="🏡️ Home Menu", description="You just went 🏡 from the **Help Menu**", color=disnake.Colour.dark_green())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="🔙", description="You just went 🔙 from the **Discord Help Menu** and are now viewing the General Help Section")
        embed.add_field(name="🏡", value="Main Menu", inline=True)
        embed.add_field(name="🔙", value="Previous", inline=True)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=HelpView())

  
###OPTIONSTRATS###
class OptStratsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80)
    @disnake.ui.button(label="Call Options", style=disnake.ButtonStyle.green)
    async def calloptions(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Introduction", description="```py\nCall options are financial contracts that give the option buyer the right but not the obligation to buy a stock, bond, commodity, or other asset or instrument at a specified price within a specific time period.``` ```py\n The stock, bond, or commodity is called the underlying asset. A call buyer profits when the underlying asset increases in price```", color=disnake.Colour.random())
        await interaction.response.edit_message(embed=embed, view=CallView())


    @disnake.ui.button(label="Put Options", style=disnake.ButtonStyle.red)
    async def putoptions(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Put Options", description="```py\n A put option (or “put) is a contract giving the option buyer the right, but not the obligation, to sell—or sell short—a specified amount of an underlying security at a predetermined price within a specified time frame.``` ```py\n This predetermined price at which the buyer of the put option can sell the underlying security is called the strike price.  \n Learn more buy clicking the buttons below, dad and moms.```", color=disnake.Colour.random())
        await interaction.response.edit_message(embed=embed, view=PutView())

    @disnake.ui.button(label="Covered Calls", style=disnake.ButtonStyle.red)
    async def ccs(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Introduction", description="```py\nA covered call strategy is used as an income-generating strategy, in which stock is owned and calls are sold against the position.```", color=disnake.Colour.random())
        await interaction.response.edit_message(embed=embed, view=ccView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())
        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.grey)
    async def goback(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        em= disnake.Embed(title="You just went **BACK** from **Options Strategies**", color=disnake.Colour.dark_blue())
        await interaction.response.edit_message(embed = em, view = LearnView())

    @disnake.ui.button(label="📌 Pin It", style=disnake.ButtonStyle.blurple)
    async def pin(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You Just Pinned A Message! 📌 Now you can search for it with Discord search if needed!", color=disnake.Colour.dark_blue())
        await interaction.response.edit_message(view=None)


















class ChainViewDropdown(disnake.ui.Select):
    def __init__(self):
        super().__init__()

        options = [
            disnake.SelectOption(
                label="⚙️ Webull - Customize the Options Chain" ,description="Learn how to customize your Webull options chain.",
            ),
            disnake.SelectOption(
                label="⚙️ Webull - Options List View" ,description="How to change your options view.",
            ),
            disnake.SelectOption(
                label="⚙️ Webull - contract quotes page",description="How do you access a contract quotes page?",
            ),
            disnake.SelectOption(
                label="⚙️ Webull - How to Read an Options Chain" ,description="Learn to read an options chain.",
            ),
            disnake.SelectOption(
                label="⚙️ Webull - Strike price and Days to expiration",description="Learn about strike and days until expiration (DTE).",
            ),
            disnake.SelectOption(
                label="⚙️ Webull - Expiration date and Multiplier" ,description="Learn about the expiry date and the Multiplier.",
            ),
            disnake.SelectOption(
                label="⚙️ Webull - ITM and OTM contracts",description="Learn about in the money and out of the money contracts.",
            ),
            disnake.SelectOption(
                label="⚙️ Webull - Strategies, option class, contract quotes, and settings.",description="Learn about these webull items here.",
            ),
        ]
        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="⚙️ 🇸  🇪  🇹  🇺  🇵 ⚙️",
            min_values=1,
            max_values=1,
            custom_id ="chain",
            options=options,
        ),

    async def callback(self, interaction: disnake.MessageInteraction):
        if self.values[0] == "⚙️ Webull - Customize the Options Chain":
            embed = disnake.Embed(title="How do you customize the options chain?", description="```py\nDifferent settings help investors customize an options chain to fit their trading style. \n There are 5 customizable items in the options chain. Go ahead - click the buttons, dad or mom.```", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/a0a9fc2afcbe4897823f627ecc1494ec.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=CustomizeView())

        elif self.values[0] == "⚙️ Webull - Options List View":
            embed = disnake.Embed(title="How to change the list view of your options chain", description="```py\nWebull provides two list views for options chains:``` ```py\nList view and Straddle view.``` ```py\nThe Straddle View is the default display, but you can also set the chain to display as List view to fit your desired trading style.```", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/3e256bdb74014ce78716421a147a802a.gif")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=ChainView())

        elif self.values[0] == "⚙️ Webull - contract quotes page":
            embed = disnake.Embed(title="How do you access a contract quotes page?", description="```py\nYou can access the trade page with one click of a contract and access the contract quotes page with a double-click.```", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/85c5a92326ae40cab9d34a936d8a18c1.gif")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=ChainView())

        elif self.values[0] == "⚙️ Webull - How to Read an Options Chain":
            embed = disnake.Embed(title="How to Read an Options Chain", description="```py\nThe Left side shows call contracts; the Right side shows put contracts.```", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/8b2070443ee1425e83818e399eb79c86.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=ChainView())

        elif self.values[0] == "⚙️ Webull - Strike price and Days to expiration":
            embed = disnake.Embed(title="Strike price and Days to expiration", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/e23ce5519e5748ee8a46a9590dcc7a4d.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=ChainView())

        elif self.values[0] == "⚙️ Webull - Expiration date and Multiplier":
            embed = disnake.Embed(title="Expiration date and Multiplier", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/a0a9fc2afcbe4897823f627ecc1494ec.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=ChainView())

        elif self.values[0] == "⚙️ Webull - Strategies, option class, contract quotes, and settings.":
            embed = disnake.Embed(title="Strategies, option class, contract quotes, and settings.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/bb5e8225191542e78549b9fd931139b9.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=ChainView())

        elif self.values[0] == "⚙️ Webull - ITM and OTM contracts":
            embed = disnake.Embed(title="ITM and OTM contracts", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/a9bf13a56aba4d6ca8915567ac02ca46.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=ChainView())





class CustomizeView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(WebullCustomizeDropdown())


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="```py\nYou just went 🏡 'Home'```")

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em= disnake.Embed(title="You just went **BACK** from **How to Customize Webull Options Chain Explanation**", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(embed = em, view=ChainView())


class ccView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="Selecting the Expiration", style=disnake.ButtonStyle.green)
    async def selectexp( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Selecting Expiration for a Covered Call Strategy", description="**A covered call strategy is used as an income-generating strategy, in which stock is owned and calls are sold against the position.**", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/e4f78734db374e4f967ea303b0495f75.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=ccView())

    @disnake.ui.button(label="Selecting the Strike Price", style=disnake.ButtonStyle.green)
    async def selectstrike( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Selecting the Strike Price for a Covered Call Strategy", description="**A strike price is a set price at which a derivative contract can be bought or sold when it is exercised. For call options, the strike price is where the security can be bought by the option holder; for put options, the strike price is the price at which the security can be sold.**", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/08e4d14fc5134b70a4e8594f3507d71e.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=ccView())

    @disnake.ui.button(label="Selling ITM vs OTM", style=disnake.ButtonStyle.green)
    async def itmvsotm( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Selecting the Strike Price for a Covered Call Strategy", description="**A strike price is a set price at which a derivative contract can be bought or sold when it is exercised. For call options, the strike price is where the security can be bought by the option holder; for put options, the strike price is the price at which the security can be sold.**", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/BygncYx/27fed138596d4dc5bb80e6c4806a4f40.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=ccView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="```py\nYou just went 🏡 'Home'```")

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em= disnake.Embed(title="You just went **BACK** from **Covered Call Explanation**", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(embed = em, view=OptionsView())


class SettingsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="🔔Discord Notifications🔔", style=disnake.ButtonStyle.gray)
    async def notifs( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔔Discord Notifications🔔", description="🔔 From News to real-time play opportunities, to dark-pool feeds, golden sweeps, announcements, Tweets from popular accounts, and more: Make sure to utilize the Discord Notifications Discord Notifications🔔 to make the most out of FUDSTOP. \n\n Click the buttons below to set-up your notifications.", color=disnake.Colour.blurple())
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NotificationsView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="You just went **🏡 Home** from the **Settings Menu**")

        await interaction.response.edit_message(embed=em, view=MainView2())


class NewsNotifView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="🔎52 Week Lows❗⭐⭐", style=disnake.ButtonStyle.gray)
    async def fiftytwowklow( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎52week-lows❗", description="🔎52week-lows❗ Posts a daily message with tickers that hit their 52 week lows. \n **THIS CAN BE VERY HELPFUL FOR FINDING PLAYS.** ", color=disnake.Colour.random())
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="AVBLS | Bitcoin Average Block Size", url=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/AVBLS.csv?&api_key={YOUR_NASDAQ_KEY}"))
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())

    @disnake.ui.button(label="🔎Top Stories❗📰", style=disnake.ButtonStyle.gray)
    async def topstories( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎topstories❗📰", url="https://discord.com/channels/888488311927242753/944732422120038410", color=disnake.Colour.random())
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())

    @disnake.ui.button(label="🔎Trade Ideas❗📰", style=disnake.ButtonStyle.gray)
    async def tradeideas( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎trade-ideas❗📰", url="https://discord.com/channels/888488311927242753/944732309196791818", color=disnake.Colour.random())
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="🔎Options❗📰", style=disnake.ButtonStyle.gray)
    async def options( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎Options❗📰", url="https://discord.com/channels/888488311927242753/975047476916658207", color=disnake.Colour.random())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="🔎Industry Specific❗📰", style=disnake.ButtonStyle.gray)
    async def industrynews( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎Industry Specific❗📰", url="https://discord.com/channels/888488311927242753/944396298709266502", color=disnake.Colour.random())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="🔎Penny Stocks❗📰", style=disnake.ButtonStyle.gray)
    async def pennynews( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎Penny Stocks❗📰", url="https://discord.com/channels/888488311927242753/975047628058394645", color=disnake.Colour.random())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="🔍Small Caps❗📰", style=disnake.ButtonStyle.gray)
    async def smallcapnews( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔍Small Caps❗📰",url="https://discord.com/channels/888488311927242753/944731458419978270", color=disnake.Colour.random())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="🔍Emerging Market ETFs📰⭐⭐", style=disnake.ButtonStyle.gray)
    async def emetfs( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔍Emerging Market ETFs📰", description="🔎52week-lows❗ Posts a daily message with tickers that hit their 52 week lows. \n **THIS CAN BE VERY HELPFUL FOR FINDING PLAYS.** ", url="https://discord.com/channels/888488311927242753/975049044189663332", color=disnake.Colour.dark_red())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="📰❗Technology News❗📰", style=disnake.ButtonStyle.gray)
    async def technews( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎Technology News❗📰", url="https://discord.com/channels/888488311927242753/975047252118749204", color=disnake.Colour.dark_gold())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="🌟The Federal Reserve and EuroZone News📰", style=disnake.ButtonStyle.gray)
    async def fednews( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🌟The Federal Reserve and EuroZone News📰", url= "https://discord.com/channels/888488311927242753/944395511752949801", color=disnake.Colour.dark_green())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="Futures News🕐", style=disnake.ButtonStyle.gray)
    async def futures( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="Futures News🕐", url="https://discord.com/channels/888488311927242753/975051343414833252", color=disnake.Colour.dark_blue())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="🔎Economic News❗📰", style=disnake.ButtonStyle.gray)
    async def economicnews( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎Economic News❗📰", url="https://discord.com/channels/888488311927242753/944394979638399016", color=disnake.Colour.dark_blue())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=MainView2())

###TUTORIALS###
class TutorialsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="Setting notifications🔔", style=disnake.ButtonStyle.green)
    async def botcmds( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Setting notifications🔔", color=disnake.Colour.dark_green())
        embed.add_field(name="🔔", value="In order to receive push notifications as well as desk-top notifications, make sure you have notifications turned on for the information you want to have streamlined to you. There's a lot to choose from!")
        embed.add_field(name="🔔", value="FUDSTOP Video Help \n\n https://youtu.be/zPG_hoQXAto")
        embed.set_image(url="https://media.giphy.com/media/xSKZuOVFxMzG5BoYBG/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=TutorialsView())


    @disnake.ui.button(label="Slash Commands⚔️", style=disnake.ButtonStyle.blurple)
    async def slashr( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Slash Commands⚔️", color=disnake.Colour.dark_red())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(view=TutorialsView())


    @disnake.ui.button(label="Discord Tutorials⚔️", style=disnake.ButtonStyle.blurple)
    async def disctuts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Slash Commands⚔️", color=disnake.Colour.random())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(view=TutorialsView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=MainView2())

###DATA





class ScreenerView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="Alpha Screeners", style=disnake.ButtonStyle.gray, )
    async def alphascreen( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title='Alphaquery Screeners', url='https://www.alphaquery.com/saved-queries', description="Run these queries to return back tickers that meet certain characteristics. \n Easily find play opportunities by running these. \n **Updated automatically, daily.**", color=disnake.Colour.random())
        embed.add_field(name='CHINESE ADRS WITH AN RSI <=30🟢', value='https://www.alphaquery.com/query/300010258?run=1 \n This screener returns any Chinese ADRs with an oversold RSI for thos who have not entered yet.')
        embed.add_field(name="China Protective Put Screener || RSI >=70 🔴", value="https://www.alphaquery.com/query/300010259?run=1")
        embed.add_field(name="⛓️SCREENER 1 - Core Logic", value="https://www.alphaquery.com/query/300010275?run=1 \n REMEMBER TO DELETE HEALTHCARE. \n **This Screener returns tickers with RSI above 72 or below 25.**")
        embed.add_field(name="⛓️SCREENER 2 - Core Logic", value="https://www.alphaquery.com/query/300010274?run=1 \n REMEMBER TO DELETE HEALTHCARE. \n **This Screener returns tickers with RSI above 72 or below 25.**")
        embed.add_field(name="⛓️SCREENER 3 - Core Logic", value="https://www.alphaquery.com/query/300010273?run=1 \n REMEMBER TO DELETE HEALTHCARE. \n **This Screener returns tickers with RSI above 72 or below 25.**")
        embed.add_field(name="AlphaQuery Login", value="YOU MUST LOGIN TO RUN THE QUERIES. LOGIN HERE: \n <#983914207865106433>")
        embed.add_field(name="⛓️", value="https://www.alphaquery.com/saved-queries \n **Saved Queries Link**")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpportunitiesView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=MainView2())

class DataSelect(disnake.ui.Select):
    def __init__(self):
            pass





class SectorView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(SectorViewDropdown())


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You just went back to Discord Market Sectors section", color=disnake.Colour.dark_orange())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=SectorView())
class AvoidView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



    @disnake.ui.button(label="Avoid Corporate Actions⭕", style=disnake.ButtonStyle.red, )
    async def avoid( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Avoid Corporate Actions⭕", color = disnake.Colour.random())
        embed.add_field(name="Avoid Corporate Actions", value="```py\nWhen you see a super over-bought RSI that gaps up on the 'daily' and consolidates - look to the news to confirm a corporate action. **Buyouts, mergers, splits, reverse splits, etc. are corporate actions - and should be avoided. \n\n This image here is exactly what to avoid.```", inline = True)
        embed.set_image(url="https://i.ibb.co/gSM3S52/CORPACTION.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )
        await interaction.response.edit_message(embed=embed, view=AvoidView())

    @disnake.ui.button(label="Avoid Weekly Expirations🗓️", style=disnake.ButtonStyle.red, )
    async def avoidweekly( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Avoid Weekly Expirations🗓️", color = disnake.Colour.random())
        embed.add_field(name="Avoid Weekly Expirations🗓️", value="```py\nWeekly expirations have more liquidity, and are typically more popular. Avoid them for best results when utilizing the core logic.```", inline = True)
        embed.set_image(url="https://i.ibb.co/c3PvNMH/weeklymonthly.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )
        await interaction.response.edit_message(embed=embed, view=AvoidView())

    @disnake.ui.button(label="Never Buy The Ask🙅‍♂️", style=disnake.ButtonStyle.red, )
    async def anoask( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Never Buy The Ask🙅‍♂️", color = disnake.Colour.random())
        embed.add_field(name="Never Buy The Ask🙅‍♂️", value="```py\nNEVER BUY THE ASK! \n\n When you buy the ask, you're paying a PREMIUM. With illiquid options - always buy between the MID and the BID.``` ```py\n If it helps - set-up your options chain where the ask price is not visible. Out of sight out of mind!\n\n If you need help customizing your options chain, click the command below:``` </webull options_setup:1026367610708832331>", inline = True)
        embed.set_image(url="https://i.ibb.co/m0hzrzx/noask.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )
        await interaction.response.edit_message(embed=embed, view=AvoidView())

    @disnake.ui.button(label="Stay IN THE MONEY🚮", style=disnake.ButtonStyle.blurple, )
    async def itm( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Stay IN THE MONEY🚮", color = disnake.Colour.random())
        embed.add_field(name="Stay IN THE MONEY🚮", value="```py\nGet in the habit of buying IN THE MONEY \n\n YES - In the money contracts are more expensive - because they hold more VALUE. \n\n When sitting out of the money - not only do you have zero intrinsic value - but theta will eat away at your cost average much faster. Play it safe and stick to what works - IN THE MONEY. ``` ```py\n'IN THE MONEY FOR PUTS:' Any strike 'ABOVE' the current price. \n\n IN THE MONEY FOR CALLS: Any strike BELOW the current price.```", inline = True)
        embed.set_image(url="https://i.ibb.co/Rjz0wwz/itmotm.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )
        await interaction.response.edit_message(embed=embed, view=AvoidView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def gohome( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

class StartView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.fudstop.org", label="fudstop.org"))
        self.value=None
    @disnake.ui.button(label="Welcome to FUDSTOP", style=disnake.ButtonStyle.red, )
    async def welcome1( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Welcome to FUDSOP", description="```py\nInformation is stored in a similar, user-friendly button-styled interface that's designed where only you can see it. Use it anytime you need it. The command to access the main panel is: **/fudstop** \n\n I'd spend a few moments to look through the options available. I'll always be optimizing the applications in the background.```", color=disnake.Colour.green())
        await interaction.response.edit_message(embed=embed, view=self)

    @disnake.ui.button(label="Trade 📈", style=disnake.ButtonStyle.green, row=1)
    async def welcome3( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Welcome to FUDSOP", description="```py\nInformation is stored in a similar, user-friendly button-styled interface that's designed where only you can see it. Use it anytime you need it. The command to access the main panel is: **/fudstop** \n\n I'd spend a few moments to look through the options available. I'll always be optimizing the applications in the background.```", color=disnake.Colour.dark_green())
        embed.add_field(name="Click the button.", value="```py\nClick the button below to launch the main panel.```", inline=True)
        await interaction.response.edit_message(embed=embed, view=MainView2())

    @disnake.ui.button(label="Learn 🧠", style=disnake.ButtonStyle.blurple, row=2 )
    async def welcome2( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Welcome to FUDSOP", description="```py\nInformation is stored in a similar, user-friendly button-styled interface that's designed where only you can see it. Use it anytime you need it. The command to access the main panel is: **/fudstop** \n\n I'd spend a few moments to look through the options available. I'll always be optimizing the applications in the background.```", color=disnake.Colour.red())
        await interaction.response.edit_message(embed=embed, view=MainView2())
class ToolbarView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.cnn.com/business/markets/premarkets", label="Check Futures"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.federalregister.gov/agencies/securities-and-exchange-commission", label="Check the Federal Register"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.newyorkfed.org/markets/desk-operations/reverse-repo", label="Reverse Repo Operations (12:15PM CST)"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.financialresearch.gov/money-market-funds/us-mmfs-repos-with-the-federal-reserve/", label="Repo Participant Data"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.dtcc.com/legal/sec-rule-filings", label="DTCC/DTC Filings"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.dtcc.com/legal/important-notices", label="DTCC Important Notices"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://fintel.io/so/us/gme", label="13F Institutional Ownership"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://ftp.nyse.com/", label="NYSE Master Index of Data"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.optionseducation.org/toolsoptionquotes/optionscalculator", label="Black Scholes Calculator"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.finra.org/finra-data/browse-catalog/short-sale-volume-data/daily-short-sale-volume-files", label="Off Exchange Short Volume"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://otctransparency.finra.org/otctransparency/AtsIssueData", label="Over The Counter Data / ATS Data"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.federalreserve.gov/monetarypolicy/fomccalendars.htm", label="FOMC Schedule"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.finra.org/filing-reporting/regulatory-filing-systems/short-interest", label="Short Interest Reporting Dates"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.catnmsplan.com/timeline", label="CAT System Timeline"))

    @disnake.ui.button(label="Toolbar", style=disnake.ButtonStyle.red, )
    async def welcome( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Welcome to FUDSOP", description="```py\nClick One of The Links to Be Taken to it```", color=disnake.Colour.random())
        embed.add_field(name="Click the button.", value="Click the button below to launch the main panel.")
        embed.set_image(url="https://i.pinimg.com/originals/f4/56/bd/f456bdaddfa668a1e55948d7603e6c21.gif")
        await interaction.response.edit_message(embed=embed, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Tools Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=ToolsView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=MainView2())
###########################################################
######### SLASH COMMANDS ###################################
###########################################################










class BestCommandsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



    @disnake.ui.button(label="Open Interest", style=disnake.ButtonStyle.red)
    async def oicmnd( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/op oi", description="```py\nOpen Interest [/op oi <ticker] || [op oi '<ticker>' <YYYY-MM-DD>```", color=disnake.Colour.random())
        embed.add_field(name="Open Interest",value="```py\n/op oi '<ticker>'``` ```py\n || This allows you to get a consolidated view of open interest. Its always recommended to then call /op oi '<ticker>' '<YYYY-MM-DD>' aferwards, as you can breakdown the OI by specific expiration, and the dates are given to you from the initial !oi command. For example: !oi `gme` and then !oi 'gme 2022-06-17'.```", inline=False)
        embed.set_image(url="https://i.ibb.co/LxBz971/OI.png")

        embed.set_footer( text="Rise Above the Narratives")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="Earnings", style=disnake.ButtonStyle.red)
    async def earningscmnd( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/earnings", description="```py\n/earnings or /earnings <ticker>```", color=disnake.Colour.random())
        embed.add_field(name="Earnings",value='```py\n/earnings is a super important command.``` ```py\n It creates a list of earnings separated After Hours from Premarket - and is already formatted to quickly make spreadsheets to find plays. Be sure to always go BACK one day after calling the command, as we dont want to enter into a core play BEFORE earnings, only after (and the gap has happened). Command usage: /earnings `<ticker>` for specific ticker or /earnings for all tickers.```', inline=False)
        embed.set_image(url="https://i.ibb.co/7YcKSxF/earnings2.png")

        embed.set_footer( text="Rise Above the Narratives")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="The FIB", style=disnake.ButtonStyle.red)
    async def fibcmnd(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/fib", description="```py\n/fib <timeframe> <ticker>```", color=disnake.Colour.random())
        embed.add_field(name="The FIB",value='```py\nThe /fib command is super important - as it helps us identify where the stock is trading respective to its yearly high or low.``` If the 🎯 is **near the 52week high** - it fits put criteria. \n\n If the 🎯is **near the 52week low**, it matches call criteria. You can use ```py\n/fib `<ticker> year`, /fib `<ticker> month`, /fib `<ticker> week`, /fib `<ticker> quarter`, /fib `<ticker> hour`, etc.```', inline=False)
        embed.set_image(url="https://i.ibb.co/BPHbsjN/fib.png")

        embed.set_footer( text="Rise Above the Narratives")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="The Fib Chart📈", style=disnake.ButtonStyle.red)
    async def fibcartcmd( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Fib Chart📈", description="```py\n/ta fib <ticker> <interval> where interval can be '1min', '5min', '30min', '60min', and 'daily (1440)'. Other options: extended hours:'[true/false]' heiken candles:'[true/false]' trendline: '[true/false]'```", color=disnake.Colour.random())
        embed.add_field(name="The FIB Chart", value="```py\nThis is a nice chart that displays the FIB retracement with a nice chart.``` ```py\n Use /ta fib <ticker> <interval> where interval can be '1min', '5min', '30min', '60min', and 'daily (1440)'. Other options: extended hours:'[true/false]' heiken candles:'[true/false]' trendline: '[true/false]'```", inline=False)
        embed.set_image(url="https://i.ibb.co/xzvS9Vd/TAFIB.png")

        embed.set_footer( text="Rise Above the Narratives")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="Futures🧞", style=disnake.ButtonStyle.red)
    async def futcmnd( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Futures🧞", description="```py\n/futures``` or ```py\n/futures <futures type>```", color=disnake.Colour.random())
        embed.add_field(name="Futures", value="```py\n/futures is an important command as it gives insight to the next pre-market session.```", inline=False)
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="Max Pain😩", style=disnake.ButtonStyle.red)
    async def mpxmnc( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Max Pain😩", description="```py\n/earnings or /earnings <ticker>```", color=disnake.Colour.random())
        embed.add_field(name="Max Pain", value="```py\n/mp <ticker> <YYYY-MM-DD> is an important command as it helps us identify our ceiling / floor with the core logic. The date format is the same as the /op oi command, making it easy to remember the date format.``` Example use: ```py\n/mp gme 2022-05-20`.``` ```py\nNOTE: MAX PAIN IS NOT THE STRIKE PRICE YOU BUY OR WHERE THE STOCK WILL BE TRADING COME EXPIRATION. IT'S YOUR CEILING FOR CORE PLAYS OR FLOOR DEPENDING ON THE DIRECTION.```", inline=False)
        embed.set_image(url="https://i.ibb.co/pjYp5kg/MPGME.png")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="Short Volume🩳", style=disnake.ButtonStyle.red)
    async def shortvol( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Short Volume", description="```/shortvol <ticker```", color=disnake.Colour.random())
        embed.add_field(name="Short Volume", value="```py\n/shortvol `<ticker>` is a helpful command as it helps you take note of the short volume for the last 5 days and gives you a % overall short.``` Example use: ```py\n /shortvol KC```", inline=True)
        embed.set_image(url="https://i.ibb.co/JyznBFH/SHORTINT-SPY.png")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())


    @disnake.ui.button(label="Heatmap🔥", style=disnake.ButtonStyle.red)
    async def heatmapx( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Heatmap", description="```py\n/heatmap``` or ```py\n/heatmap <heatmap type>```", color=disnake.Colour.random())
        embed.add_field(name="Heatmap", value="```py\n/heatmap is great for visualizing the current state of markets. The /heatmap option comes with ANY of the following:``` ```py\n /heatmap '[SP500 / ETF MAP / WORLD MAP / STOCK MARKET MAP]' and the time frames of '[1day, 1week, 1month, 3month, 6month, 1year, and year to date.]'``` Example use: ```py\n/heatmap [maps:SP500] [timeline: 1 Day Performance]```", inline=False)
        embed.set_image(url="https://i.ibb.co/Sdx00r3/HEATMAP.png")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="Reverse Repo♾️", style=disnake.ButtonStyle.red)
    async def repocmnd( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="-", description="```py\n/econ repo```", color=disnake.Colour.random())
        embed.add_field(name="Reverse Repo", value="```py\n/econ repo will return the last 50 days of the ON RRP in a paginated embed menu. You can survey as much as 100 days.```", inline=False)
        embed.set_image(url="https://i.ibb.co/dJCqnbN/ECONREPO.png")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())


    @disnake.ui.button(label="ETF Holders", style=disnake.ButtonStyle.red)
    async def etfs2cmnd(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="ETF Holders", description="```py\n/etf_holders <ticker>```")
        embed.add_field(name="ETF stock holdings by ETF", value="```py\n/etf_holders <ticker> displays which tickers are piled into the ETF selected.``` Example use: ```py\n/etf_holders SPY returns all stocks that are exposed to SPY. Displays all holdings in order of weight.```", inline=False)
        embed.set_image(url="https://i.ibb.co/ctwXyDr/ETFHOLDINGSMYFUND.png")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="Flow Summary💦", style=disnake.ButtonStyle.red, )
    async def flowcmnd( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/flowsum", description="```py\n/flowsum <ticker>```", color=disnake.Colour.random())
        embed.add_field(name="/flowsum", value="```py\nThe /flowsum <ticker> command is a great way to visualize option order flow intra-day. You'll see call and put side premium and can easily analyze it.``` Example use: ```py\n/flowsum DIDI```", inline=False)
        embed.set_image(url="https://i.ibb.co/3v9WsyN/FLOWSUM.png")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Bots Menu", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=BotsView())


class CommandsDropdown(disnake.ui.Select):
    def __init__(self):

        # Set the options that will be presented inside the dropdown
        options = [
            disnake.SelectOption(
                label="🤖 FUDSTOP Bot" ,description="Learn the commands from the in-house FUDSTOP Bot.",
            ),
            disnake.SelectOption(
                label="🤖 Quant Data",description="Quant Data bot commands.",
            ),
            disnake.SelectOption(
                label="🤖 Open BB",description="Learn the OpenBB Bot Commands.",
            ),
            disnake.SelectOption(
                label="🆘 Command Explanations",description="Learn how to interpret some of the commands.",
            ),
            disnake.SelectOption(
                label="🎯 Best Commands",description="Learn the best commands available!",
            ),
        ]
    
        

        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="🤖 🇨 🇴 🇲 🇲 🇦 🇳 🇩 🇸 🤖",
            min_values=1,
            max_values=1,
            custom_id ="xxx9",
            options=options,
        ),

    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.defer(with_message=True, ephemeral=True)
        if self.values[0] == "🤖 FUDSTOP Bot":
            embed = disnake.Embed(title = "FUDSTOP BOT", description = "FUDSTOP Bot is a bot that I've programmed myself using the highest quality data APIs to provide the group with original, highquality commands. This data comes from all of us - so enjoy its superiority. Notable commands:  \n\n **/all** **/fudstop** **/contract_scan** **/order_flow**",color=disnake.Colour.random(), url="https://www.fudstop.org")
            embed.set_image(url="https://media.discordapp.net/attachments/1009552305869303828/1009554886817501204/ezgif-2-f4a5623248.gif")
            embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
            embed.add_field(name="🟢Call Screener", value="https://www.alphaquery.com/stock-screener/600010230?run=1")
            embed.add_field(name="🔴Put Screener", value="https://www.alphaquery.com/stock-screener/600010229?run=1")
            await interaction.edit_original_message(embed=embed)
        else:
            if self.values[0] == "🤖 Quant Data":
                em = disnake.Embed(title="Quant Data Bot Helper", description="Quant Data provides a lot of great commands. Some to take note of are the /fib, /flow, and /stats command. **ALSO - Quant data allows for the individual organization of member feeds who have the personal portfolio setup.", color=disnake.Colour.blue())

                em.set_footer( text="Implemented by Fudstop Trading")
                await interaction.edit_original_message(embed = em, view=QuantDataView())
            else:
                if self.values[0] == "🤖 Open BB":
                    em = disnake.Embed(title="Open BB Bot Helper", color=disnake.Colour.blue())
                    em.set_footer(text="Implemented by FUDSTOP Trading", )

                    await interaction.edit_original_message(embed = em, view=OpenBBView())
                else:
                    if self.values[0] == "🆘 Command Explanations":
                        em = disnake.Embed(title="Command Explanations", description="Click a button below to see the explanation for it.", color=disnake.Colour.blue())
                        em.set_footer(text="Implemented by FUDSTOP Trading", )

                        await interaction.edit_original_message(embed=em, view=CommandExplanationsView())
                    else:
                        if self.values[0] == "🎯 Best Commands":
                            embed = disnake.Embed(title = "best commands🎯", color=disnake.Colour.random())
                            embed.add_field(name="Open Interest",value="```py\n/oi '<ticker>'``` ```py\nThis allows you to get a consolidated view of open interest. Its always recommended to then call /op oi '<ticker>' '<YYYY-MM-DD>' aferwards, as you can breakdown the OI by specific expiration, and the dates are given to you from the initial !oi command.``` ```py\n For example:\n/op oi 'gme'\n\n then\n\n/op oi 'gme' '2022-06-17'```", inline=False)
                            embed.add_field(name="Earnings",value="```py\n/earnings is a super important command. It creates a list of earnings separated After Hours from Premarket - and is already formatted to quickly make spreadsheets to find plays. Be sure to always go BACK one day after calling the command, as we dont want to enter into a core play BEFORE earnings, only after (and the gap has happened).``` ```py\nCommand usage: /earnings '<ticker>' for specific ticker or /earnings for all tickers.```", inline=False)
                            embed.add_field(name="The FIB",value="```py\nThe /fib command is super important - as it helps us identify where the stock is trading respective to its yearly high or low. If the target is near the 52week high - it fits put criteria. If the target is near the 52week low, it matches call criteria.``` ```py\nYou can use:\n/fib 'ticker' 'year'\n\n/fib '<ticker>' 'month'\n\n/fib '<ticker>' 'week'\n\n/fib '<ticker>' 'quarter'\n\n/fib '<ticker>' 'hour', etc.```", inline=False)
                            embed.add_field(name="The FIB Chart", value="```py\nThis is a nice chart that displays the FIB retracement with a nice chart. Use /ta fib '<ticker> <interval>' where interval can be '1min, 5min, 30min, 60min, and daily (1440)'. Other options: extended hours:'[true/false]' heiken candles:'[true/false]' trendline: '[true/false]'```", inline=False)
                            embed.add_field(name="Futures", value="```py\n/futures is an important command as it gives insight to the next pre-market session.```", inline=False)
                            embed.add_field(name="Max Pain", value="```py\n/mp '<ticker> <YYYY-MM-DD>' is an important command as it helps us identify our ceiling / floor with the core logic. The date format is the same as the !oi command, making it easy to remember the date format. Example use: '!mp gme 2022-05-20'. 'NOTE: MAX PAIN IS NOT THE STRIKE PRICE YOU BUY OR WHERE THE STOCK WILL BE TRADING COME EXPIRATION. IT'S YOUR CEILING FOR CORE PLAYS OR FLOOR DEPENDING ON THE DIRECTION.```", inline=False)
                            embed.add_field(name="Short Volume", value="```py\n/shortvol '<ticker>' is a helpful command as it helps you take note of the short volume for the last 5 days and gives you a % overall short. (the command says short interest - but this is actually short VOLUME.``` ```py\n Example use: /shortvol 'KC')```", inline=False)
                            embed.add_field(name="Heatmap", value="```py\n/heatmap are great for visualizing the current state of markets. The /heatmap option comes with ANY of the following: /heatmap '[SP500 / ETF MAP / WORLD MAP / STOCK MARKET MAP]' and the time frames of '[1day, 1week, 1month, 3month, 6month, 1year, and year to date.]'``` ```py\nExample use: /heatmap '[maps:SP500]' '[timeline: 1 Day Performance]'```", inline=False)
                            embed.add_field(name="Reverse Repo", value="```py\n /econ repo will return the last 50 days of the ON RRP in a paginated embed menu. You can survey as much as 100 days.```", inline=False)
                            embed.add_field(name="ETFs", value="```py\n/etf 'holdings by-etf <etf>' is a great command to quickly check the institutional owners piled into a specific ETF. Example use: /etf 'holdings-by-etf KC' will return the top 10 owners of the KC. The value can be increased to up to the top 25 owners.```", inline=False)
                            embed.add_field(name="ETF by Ticker", value="```py\n/etf 'holdings by-ticker' displays which ETFs are piled into the ticker selected. Example use: /etf 'holdings by-ticker' 'KC' returns all ETFs that are exposed to KC. Up to the top 25 will display - 10 by default.```", inline=False)
                            embed.add_field(name="flowsum", value="```py\nThe /flowsum '<ticker>' command is a great way to visualize option order flow intra-day. You'll see call and put side premium and can easily analyze it.``` ```py\nExample use: /flowsum DIDI```", inline=False)
                            embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
                            await interaction.edit_original_message(embed = embed, view=BestCommandsView())






class RealNotifView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)




    @disnake.ui.button(label="🎯Bullseye Alerts", style=disnake.ButtonStyle.gray)
    async def bullseyes( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🎯Bullseye Alerts", url="https://discord.com/channels/888488311927242753/982014437802266704", color=disnake.Colour.random())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=RealNotifView())


    @disnake.ui.button(label="👀Analyst Upgrades / Downgrades", style=disnake.ButtonStyle.gray)
    async def analystupgrade( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="👀Analyst Upgrades / Downgrades", url= "https://discord.com/channels/888488311927242753/982014742900117564", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=RealNotifView())


    @disnake.ui.button(label="👀Social Spike Alerts", style=disnake.ButtonStyle.gray)
    async def socialspikealerts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="Social Spike Alerts", url="https://discord.com/channels/888488311927242753/982015465561935872", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=RealNotifView())


    @disnake.ui.button(label="👀Intraday Crypto Ideas", style=disnake.ButtonStyle.gray)
    async def intradaycryptalerts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="👀Intraday Crypto Ideas", url="https://discord.com/channels/888488311927242753/982012398967857162",color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=RealNotifView())


    @disnake.ui.button(label="👀Options Flow Alerts", style=disnake.ButtonStyle.gray)
    async def optflowalerts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="👀Options Flow Alerts", url="https://discord.com/channels/888488311927242753/982013707808833577", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=RealNotifView())


    @disnake.ui.button(label="👀Insider Trading Alerts", style=disnake.ButtonStyle.gray)
    async def insideralerts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="👀Insider Trading Alerts", url="https://discord.com/channels/888488311927242753/982013616565936158", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=RealNotifView())


    @disnake.ui.button(label="🤯Scalping Opportunities", style=disnake.ButtonStyle.gray)
    async def scalpalerts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🤯Scalping Opportunities", url="https://discord.com/channels/888488311927242753/982013293650669628", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=RealNotifView())


    @disnake.ui.button(label="👀Option Sweep Alerts", style=disnake.ButtonStyle.gray)
    async def optalerts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="👀Option Sweep Alerts", url="https://discord.com/channels/888488311927242753/982012167924613140", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=RealNotifView())


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Main Menu", color=disnake.Colour.dark_green())
        await interaction.response.edit_message(view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.gray)
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=NotificationsView())















    @disnake.ui.button(label=f"🇹  🇷  🇦  🇩  🇪 ➡️", style= disnake.ButtonStyle.blurple, row=2)
    async def button1(self, button: disnake.ui.Button,inter: disnake.AppCmdInter):
        em = disnake.Embed(title="You chose the **Trade Tab!**", description="```py\nWelcome to the trade tab! This side of the FUDSTOP Application is to help you find easy play opportunities, as well as quickly view updated lists of stocks that fall into certain categories - such as low float or stocks with high FTDs. Click a button below to get started.```", color=disnake.Colour.dark_orange())

        em.set_footer( text="Implemented by Fudstop Trading")
        await inter.response.edit_message(embed = em, view=MainView2())



















class OptionsCommandsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="Notifications🔔", style=disnake.ButtonStyle.red, )
    async def notifs( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Notifications Menu", color=disnake.Colour.dark_orange())
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NotificationsView())



    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=MainView2())


###RSS###
class RSSNotifView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="Federal Reserve🔊", style=disnake.ButtonStyle.blurple)
    async def fedrss( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="Federal Reserve🔊", description="```py\nRecieve important updates out of the Fed AS they happen. Stay up to date with several releavnt topics.```", url="https://discord.com/channels/888488311927242753/985591253037121596", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=RSSNotifView())

    @disnake.ui.button(label="SEC Filings🔊", style=disnake.ButtonStyle.blurple)
    async def secfilings( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="SEC Filings🔊", description="```py\nRecieve SEC Filings as soon as they are scheduled to be published for Public Inspection. Stay ahead of the rest!```", url="https://discord.com/channels/888488311927242753/985590757702385795", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=RSSNotifView())

    @disnake.ui.button(label="FINRA Filings🔊", style=disnake.ButtonStyle.blurple)
    async def finrafilings( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="FINRA Filings🔊", description="```py\nFINRA Notifications sent straight to your desktop/SMS as soon as they are published.```", url="https://discord.com/channels/888488311927242753/986041022524030996", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=RSSNotifView())

    @disnake.ui.button(label="28day Treasury Bonds🔊", style=disnake.ButtonStyle.red)
    async def treasurybonds( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="28day Treasury Bonds🔊", description="```py\nReceive Important updates out of the US treasury related to 28 day bonds.```", url="https://discord.com/channels/888488311927242753/985591164742819860", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=RSSNotifView())

    @disnake.ui.button(label="Important Memos - Options Clearing Corporation🔊", style=disnake.ButtonStyle.red)
    async def memos( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="Important Memos - Options Clearing Corporation🔊", description="```py\nImportant MEMOs out of the Options Clearing Corporation```", url="https://discord.com/channels/888488311927242753/991454231083106354", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=RSSNotifView())

    @disnake.ui.button(label="FINRA Investor Alerts🔊", style=disnake.ButtonStyle.red)
    async def investoralerts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="FINRA Investor Alerts🔊", description="```py\nFINRA Investor Alerts - Feeds Sent Straight to you via SMS (phone) or desktop notification (PC)```", url="https://discord.com/channels/888488311927242753/985592266431291443", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=RSSNotifView())


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=MainView2())



    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.gray)
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=NotificationsView())


###VIDEOS###







###SECTORS###
class SectorNavView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="Discord Sectors", style=disnake.ButtonStyle.green, )
    async def sectornav( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "**Sector Navigation**", color=disnake.Colour.random())
        embed.set_footer(text="Implemented by FUDSTOP Trading", )
        await interaction.response.edit_message(embed=embed, view=SectorView())

class SetupView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(WebullDropdown())

    @disnake.ui.button(label="Real-Time Play Alerts💰", style=disnake.ButtonStyle.red, )
    async def realtimealerts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Real-Time Play Alerts💰", description="```py\nThe real time alerts provided by trady-tics can be a very good way to earn some easy money. \n\n WHEN TRADING THE ALERTS: GO IN THE MONEY. They often recommend OTM strikes - but I have found with experience that if you play these alerts ITM, you'll see a much higher success rate.```", color=disnake.Colour.random())
        embed.add_field(name="Analyst Upgrades",value='<#1016372139802234991>', inline=False)
        embed.add_field(name="Golden Sweeps 🫂", value="<#1016369933187301416>", inline=True)
        embed.add_field(name="Crypto Alerts🪙", value="<#1016372517251850360>", inline=True)
        embed.add_field(name="Crypto Signals🪙", value="<#1016372517251850360>", inline=True)
        embed.add_field(name="Important News📰", value="<#1016372151596630016>", inline=True)
        embed.add_field(name="Options Sweeps🧹", value="<#1016369913759285338>", inline=True)
        embed.add_field(name="Stock Breakouts📈", value="<#1016369985867743394>", inline=True)
        embed.add_field(name="Scalps🤳", value="<#1016369974945775666>", inline=True)
        embed.add_field(name="Insider Trades🔀", value="<#1016369984768852090>", inline=True)
        embed.add_field(name="Trady Flow🌻", value="<#1016369947829600297>", inline=True)
        embed.add_field(name="Bullseye Alerts🎯", value="<#1016369960810979388>", inline=True)
        embed.set_image(url="https://media.discordapp.net/attachments/1009552305869303828/1009554886817501204/ezgif-2-f4a5623248.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )
        await interaction.response.edit_message(embed=embed, view=SetupView())

    @disnake.ui.button(label="News Notifications🔔", style=disnake.ButtonStyle.blurple, )
    async def news( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "news", color=disnake.Colour.random())
        embed.add_field(name="NEWS WORLD INDEX",value='```py\nThis list provides you news topics to choose from. Mute the channels you dont care for, and keep the rest active to get streamlined news updates. The recommended news to follow will be starred for you, but you can follow whatever you wish! This is helpful because it will have ticker-lists built for us already formatted properly to build quick spreadsheets!```', inline=False)
        embed.add_field(name="-", value="<#1015660065119797328>", inline=True)
        embed.add_field(name="-", value="<#1015660043284258856>", inline=True)
        embed.add_field(name="-", value="<#1015664808101695488>", inline=True)
        embed.add_field(name="-", value="<#1015666153915424908>", inline=True)
        embed.add_field(name="-", value="<#1015666701389529228>", inline=True)
        embed.add_field(name="-", value="<#1015660085353123910>", inline=True)
        embed.add_field(name="-", value="<#1015667147143381072>", inline=True)
        embed.add_field(name="-", value="<#1015666000814940220>", inline=True)
        embed.add_field(name="-", value="<#1015664603079921784>", inline=True)
        embed.add_field(name="-", value="<#1015665876118294528>", inline=True)
        embed.add_field(name="-", value="<#1015665926634475650>", inline=True)
        embed.add_field(name="-", value="<#1015664577754701825>", inline=True)
        embed.add_field(name="-", value="<#1015663450296430672>", inline=True)
        embed.add_field(name="-", value="<#1015665900864667821>", inline=True)
        embed.add_field(name="-", value="<#1015665450966863942>", inline=True)
        embed.add_field(name="-", value="<#1015662803304067193>", inline=True)
        embed.add_field(name="-", value="<#1015659953865883788>", inline=True)
        embed.add_field(name="-", value="<#1015662737856155658>", inline=True)
        embed.add_field(name="-", value="<#1015663288639565835>", inline=True)
        embed.add_field(name="-", value="<#1015662708353409044>", inline=True)
        embed.add_field(name="-", value="<#1015663288639565835>", inline=True)
        embed.set_image(url="https://media.discordapp.net/attachments/1009552305869303828/1009554886817501204/ezgif-2-f4a5623248.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )
        await interaction.response.edit_message(embed = embed, view=SetupView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())
class CommandExplanationsDropdown(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(label="/op oi", description=f"Use this command to visualize support and resistance in the options chain.")
        ]


        super().__init__(
            placeholder="Command Helpers",
            min_values=1,
            max_values=1,
            options=options,
        )

    async def callback(self, interaction: disnake.MessageCommandInteraction):
        if self.values == "/op oi":
            pass

class CommandExplanationsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="/flow command", style=disnake.ButtonStyle.red, )
    async def commands( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/flow command", description="```py\nThe flow command helps you visualize real-time options flow by looking at Call versus Put premiums.```", color=disnake.Colour.random())
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())

    @disnake.ui.button(label="/flowsum command", style=disnake.ButtonStyle.red, )
    async def flowsum( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/flowsum command", description="```py\nThe /flowsum is another important command. This helps you visualize options orderflow summary for a given week for a specific ticker. The command: ```!flowsum <ticker```. \n\n See the image above to learn how to read it.", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/3fbt0FZ/FLOWSUM.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())

    @disnake.ui.button(label="/op oi command", style=disnake.ButtonStyle.red, )
    async def oi( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/op oi command", description="```py\nThe OI command is one of the most important. \n\n To use it - type /op oi 'ticker'``` **OR** ```py\n/op oi 'ticker' 'date' to search by expiration. \n\n Open Interest is important - and helps us identify 'SUPPORT' and 'RESISTANCE' when looking at an options chain. The open interest command uses real-time data to make this data easily accessible from Discord.``` ```py\n Also - try /op oichart <ticker>. \n\n (Replace <ticker> and <date> with the date / ticker you want)```", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/v447D3P/openinterestcommand.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())

    @disnake.ui.button(label="/fib command", style=disnake.ButtonStyle.red, )
    async def fib( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/fib command", description="'```py\nThe /fib command is super important - as it helps us identify where the stock is trading respective to its yearly high or low. If the target is near the 52week high - it fits put criteria. \n\n If the target is near the 52week low, it matches call criteria.``` **You can use:**```py\n /fib 'ticker' 'year'``````py\n /fib 'ticker' 'month'``` ```py\n /fib 'ticker' 'week'``` ```py\n/fib 'ticker' 'quarter'``` ```py\n /fib 'ticker' 'hour'``` - etc.", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/BPHbsjN/fib.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="🏡️ Home Menu", description="```py\nYou just went 🏡 from the 'Command Explanations Menu'```", color=disnake.Colour.dark_green())
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=MainView2())



class ScreenMe(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)


    @disnake.ui.button(label="🟢Core Call Screener",style=disnake.ButtonStyle.link, url="https://www.alphaquery.com/stock-screener/600010230?run=1")
    async def calls(interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.send_message(fview=ScreenMe())
        
    @disnake.ui.button(label="🔴Core Puts Screener",style=disnake.ButtonStyle.link, url="https://www.alphaquery.com/stock-screener/600010230?run=1")
    async def call2s(interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.send_message(fview=ScreenMe())



class HelperView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/neWYeYpfpxY", label="Saving Messages as Threads"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/3CkRmT2SMNk", label="Utilizing Discord Search"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/b52p7V4QTaM", label="Turning on Developer Mode"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/scRK6rZ_HWY", label="The Hashtag Navigation System"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/HLG-ol7bAkA", label="How to Query Every Ticker in the Market"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/sHthg4RKMRY", label="Navigation and Researching"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/7laLsbo3-K8", label="How to Read Open Interest & Volume"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/lsDV_y0fleM/", label="Command Booklets"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/J-GfKWFSWuk", label="Alphaquery Tutorial"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/xvlTy_GG10Y", label="Optimizing Your Discord Layout"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def gohome( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, )

















class SectorViewDropdown(disnake.ui.Select):
    def __init__(self):


        options = [
            disnake.SelectOption(
            label="🌐Communication Services #cs", description="🌐 View Options feeds for this sector. Navigate with #cs.",
            ),
            disnake.SelectOption(
            label="BASIC MATERIALS🧱 #bm", description="🧱 View Options feeds for this sector. Navigate with #bm.",
            ),
            disnake.SelectOption(
            label="The Technology Sector📀 #te", description="📀 View Options feeds for this sector. Navigate with #te.",
            ),
            disnake.SelectOption(
            label="The Industrial Sector🌇 #in", description="🌇 View Options feeds for this sector. Navigate with #in.",
            ),
            disnake.SelectOption(
            label="The Consumer Defensive Sector🚢 #cd", description="🚢 View Options feeds for this sector. Navigate with #cd.",
            ),
            disnake.SelectOption(
            label="The Energy Sector⚡ #en", description="⚡ View Options feeds for this sector. Navigate with #en.",
            ),
            disnake.SelectOption(
            label="The Utilities Sector💡 #ut", description="💡 View Options feeds for this sector. Navigate with #ut.",
            ),
            disnake.SelectOption(
            label="The Real Estate Sector🏠 #re", description="🏠 View Options feeds for this sector. Navigate with #re.",
            ),
            disnake.SelectOption(
            label="The HealthCare Sector💉 #he", description="💉 View Options feeds for this sector. Navigate with #he.",
            ),
            disnake.SelectOption(
            label="The Consumer Cyclical Sector🌒 #cc", description="🌒 View Options feeds for this sector. Navigate with #cc.",
            ),
            disnake.SelectOption(
            label="The Financial Services Sector💰 #fs", description="💰 View Options feeds for this sector. Navigate with #fs.",
            ),
            disnake.SelectOption(
            label="The ETF Sector🌀", description="🌀 View Options feeds for this sector. Navigate with #etf.",
            ),


        ]

        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="👇 🇸 🇪 🇨 🇹 🇴 🇷  🇫 🇪 🇪 🇩 🇸 👇",
            min_values=1,
            max_values=1,
            custom_id="feeds",
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        if self.values[0] == "🌐Communication Services #cs":
            embed = disnake.Embed(title = "🌐Communication Services #cs", color=disnake.Colour.random())
            embed.add_field(name="COMMUNICATION🌐",value='<#1015390439400034334> \n\n <#1015390936798351381> \n\n <#1015390977701183559> \n\n <#1015391118231339058> \n\n <#1015391238704332932>',inline=True)
            embed.add_field(name="#Keytag for: COMMUNICATION🌐",value='```#cs for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/T2Cc6tr/commservices.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "BASIC MATERIALS🧱 #bm":
            embed = disnake.Embed(title = "BASIC MATERIALS🧱 #bm", color=disnake.Colour.random())
            embed.add_field(name="BASIC MATERIALS🧱", value="<#1015391472121557022> \n\n <#1015391504333807746> \n\n <#1015392688511660142> \n\n <#1015391494263291904> \n\n <#1015391265870856252> \n\n <#1015391482447921212> \n\n <#1015391514458849342> \n\n <#1015391524013477898>", inline=True)
            embed.add_field(name="#Keytag for: **BASIC MATERIALS🧱**",value='```#bm for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/gTP2knd/basicmaterials.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Technology Sector📀 #te":
            embed = disnake.Embed(title = "The Technology Sector📀 #te", color=disnake.Colour.random())
            embed.add_field(name="**TECHNOLOGY SECTOR📀", value="<#1015398199785168927> \n\n <#1015398409051578418> \n\n <#1015398422087467008> \n\n <#1015398435656060978> \n\n <#1015398530900299806> \n\n <#1015398545249009715> \n\n <#1015398557668343928> \n\n <#1015398585120084018> \n\n <#1015398587737329714> \n\n <#1015400438541070398>", inline=False)
            embed.add_field(name="#Keytag for: **TECHNOLOGY SECTOR📀**",value='```#te for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/LSMLSVd/tech.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Industrial Sector🌇 #in":
            embed = disnake.Embed(title = "The Industrials Sector🌇 #in", color=disnake.Colour.random())
            embed.add_field(name="The Industrials Sector🌇", value="<#1015397859023147131> \n\n <#1015398055266234448> \n\n <#1015398068868362240> \n\n  <#1015398078464925736> \n\n  <#1015398089516912741>  \n\n <#1015398099071545446> \n\n <#1015398110626840606> \n\n <#1015398120248582205> \n\n  <#1015398129396371586> \n\n  <#1015398139026477156> \n\n  <#1015398149768089640> \n\n <#1015398159184314478> \n\n <#1015398169921720390> \n\n <#1015398188112420894> \n\n <#1015403810249781298> \n\n <#1015403820337070181>", inline=False)
            embed.add_field(name="#Keytag for: **INDUSTRIALS SECTOR🌇**",value='```#in for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/b57w2gF/industrials.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Consumer Defensive Sector🚢 #cd":
            embed = disnake.Embed(title = "**The Consumer Defensive Sector🚢 #cd**", color=disnake.Colour.random())
            embed.add_field(name="The Consumer Defensive Sector🚢", value="<#1015394369483849758> \n\n <#1015394456943472740> \n\n <#1015394467068514304> \n\n <#1015394479336865792> \n\n <#1015394491319975998> \n\n <#1015394502808195203> \n\n <#1015394516229963807>", inline=True)
            embed.add_field(name="#Keytag for: **CONSUMER DEFENSIVE 🚢**",value='```#cd for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/xGL6z3c/consumerdef.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Energy Sector⚡ #en":
            embed = disnake.Embed(title = "The Energy Sector⚡ #en", color=disnake.Colour.random())
            embed.add_field(name="The Energy Sector⚡", value="<#1015398944186056744> \n\n <#1015399058388561980> \n\n <#1015399068480045237>", inline=True)
            embed.add_field(name="#Keytag for: **ENERGY SECTOR⚡**",value='```#en for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/3zYVRK4/energy.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Utilities Sector💡 #ut":
            embed = disnake.Embed(title = "The Utilities Sector💡 #ut", color=disnake.Colour.random())
            embed.add_field(name="The Utilities Sector💡", value="<#1015399097500455013> \n\n <#1015399280221106217> \n\n <#1015399365394833499> \n\n <#1015399398794068151> \n\n <#1015399422269603880> \n\n <#1015405869929861130>", inline=True)
            embed.add_field(name="#Keytag for: UTILITIES💡",value='```#ut for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/z8MK87H/utilities.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Real Estate Sector🏠 #re":
            embed = disnake.Embed(title = "**The Real Estate Sector🏠 #re**", color=disnake.Colour.random())
            embed.add_field(name="The Real Estate Sector🏠", value="<#1015398703357505646> \n\n <#1015398716062060544> \n\n <#1015398609556094986> \n\n  <#1015398725801226260>", inline=True)
            embed.add_field(name="#Keytag for: REAL ESTATE🏠",value='```#re for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/CnTpG7m/realestate.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The HealthCare Sector💉 #he":
            embed = disnake.Embed(title = "The HealthCare Sector💉", color=disnake.Colour.random())
            embed.add_field(name="The HealthCare Sector💉", value="<#1015398746453966879> \n\n <#1015398872132091956> \n\n <#1015398885214138438> \n\n <#1015398898971451512> \n\n  <#1015398912049299486>  \n\n <#1015398924426674257>", inline=True)
            embed.add_field(name="#Keytag for: **HEALTHCARE SECTOR 💉**",value='```#he for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/TrWrxG4/health.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Consumer Cyclical Sector🌒 #cc":
            embed = disnake.Embed(title = "**The Consumer Cyclical Sector🌒**", color=disnake.Colour.random())
            embed.add_field(name="CONSUMER CYCLICAL🌒", value="<#1015399375171760289> \n\n <#1015399522458931291> \n\n <#1015399532336521226> \n\n <#1015399726960607292> \n\n <#1015399748515156119> \n\n <#1015413980598124625> \n\n <#1015413991549452288> \n\n <#1015414015956111480> \n\n <#1015414025808527361> \n\n <#1015416056816345139> \n\n <#1015416093826896013>", inline=True)
            embed.add_field(name="#Keytag for: **CONSUMER CYCLICAL🌒**",value='```#cc for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/jfHxy3q/consumercyc.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Financial Services Sector💰 #fs":
            embed = disnake.Embed(title = "Sector Navigation", color=disnake.Colour.random())
            embed.add_field(name="The Financial Services Sector #fs💰", value="<#1015396231050182766> \n\n <#1015396387988447242> \n\n <#1015396402400084150> \n\n <#1015396459044143225> \n\n  <#1015396425451962408> \n\n <#1015396414014107719> \n\n <#1015396854772531292> \n\n <#1015396867028291614> \n\n <#1015397020120391700> \n\n <#1015397024629268580>", inline=True)
            embed.add_field(name="#Keytag for: **FINANCIAL SERVICES💰",value='```#fs for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/8c66SQq/financialservices.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The ETF Sector🌀 #etf":
            embed = disnake.Embed(title = "The ETF Sector🌀 #etf", color=disnake.Colour.random())
            embed.add_field(name="The ETF Sector🌀`", value="<#1015396437015674890>", inline=True)
            embed.add_field(name="#Keytag for: **ETF SECTOR🌀**",value='```#etf for discord navigation```',inline=True)
            embed.set_image(url="https://ibb.co/V93hgMb")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorNavView())

class OpenBBHelpers(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="**/candle Command**", style=disnake.ButtonStyle.blurple, )
    async def candle( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/candle", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER*",value="```py\n/candle ticker:'ticker' interval:'1440' trendline:'True' heikin_candles:'False' extended_hours:'True'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed,view=OpenBBHelpers())

    @disnake.ui.button(label="RSI Chart", style=disnake.ButtonStyle.blurple, )
    async def tamomrsi( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/ta-mom rsi", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - RSI*",value="```py\n/ta-mom rsi ticker:'ticker' interval:'1440' drift:'1' scalar:'100' extended_hours:'True' heikin_candles:'False' trendline:'True' length:'14'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="MACD Chart", style=disnake.ButtonStyle.blurple, )
    async def tamommacd( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/ta-mom rsi", description="py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - MACD*",value="```py\n/ta-mom macd ticker:'ticker' interval:'1440' trendline:'True' extended_hours:'True' heikin_candles:'False' signal:'9' fast:'12' slow:'26'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="Center of Gravity Chart", style=disnake.ButtonStyle.blurple, )
    async def tamomcg( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/ta-mom cg", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - CENTER OF GRAVITY",value="```py\n/ta-mom cg ticker:'ticker' length:'14'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="The FIB Chart", style=disnake.ButtonStyle.red, )
    async def tafib( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/ta-mom rsi", description="Command examples!", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - THE FIB",value="```py\n/ta fib ticker:'ticker' interval:'1440' trendline:'True' heikin_candles:'False' extended_hours:'True'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="Moving Averages Chart - SMA", style=disnake.ButtonStyle.red, )
    async def taema( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/ta ma", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - MOVING AVERAGES(SMA)*",value="```py\n/ta-ma ticker:'ticker' interval:'1440' ma_mode:'sma' extended_hours:'True' trendline:'True' heikin_candles:'False' offset:'0' window:'20,50'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="Moving Averages Chart - EMA", style=disnake.ButtonStyle.red, )
    async def tasma( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/ta ma", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - MOVING AVERAGES(EMA)*",value="```py\n/ta-ma ticker:'ticker' interval:'1440' ma_mode:'ema' extended_hours:'True' trendline:'True' heikin_candles:'False'offset:'0' window:'20,50'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="Options Chains", style=disnake.ButtonStyle.red, )
    async def optchains( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/opt chains", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - OPTIONS CHAINS*",value="```py\n/op chains ticker:'ticker' expiry:'2022-07-15' opt_type:```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="ETF Holdings By Ticker", style=disnake.ButtonStyle.gray, )
    async def etfhldbyticker( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/etf holdings-by-ticker", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - ETF HOLDINGS BY TICKER*",value="```py\n/etf holdings by-ticker ticker:'ticker' sort:Percentage of Fund num:'50'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="Holdings By ETFs", style=disnake.ButtonStyle.blurple, )
    async def hlgbyetf( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Holdings By ETFs", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - HOLDINGS BY ETFs*",value="```py\n/etf holdings by-etf etf: num:'50'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="**Technical Analysis (/ta)**", style=disnake.ButtonStyle.gray, )
    async def ta( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=OpenBBHelpers())

    @disnake.ui.button(label="**Dark Pool & Shorts (/dps)**", style=disnake.ButtonStyle.gray, )
    async def dps( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=OpenBBHelpers())

    @disnake.ui.button(label="**Options (/opt)**", style=disnake.ButtonStyle.green, )
    async def opt( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=OpenBBHelpers())


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=OpenBBView())


    @disnake.ui.button(label="**OpenBB Bot - Technical Analysis**", style=disnake.ButtonStyle.grey, )
    async def openbbta( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=OpenBBHelpers())

    @disnake.ui.button(label="**OpenBB Bot - Technical Analysis**", style=disnake.ButtonStyle.grey, )
    async def openbbta( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=OpenBBHelpers())



class DictView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None
)



    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You just went back to Discord Market Sectors section", color=disnake.Colour.dark_orange())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=SectorView())


class ToolsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="Useful Links🔗", style=disnake.ButtonStyle.blurple)
    async def datalinks( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title = "Data Links🔗", color = disnake.Colour.random())
        embed.add_field(name="**Off Exchange Short Sale Volume",value="https://www.finra.org/finra-data/browse-catalog/short-sale-volume-data ```This is FINRA's TRF (trade reporting facility) off exchange short volume - reported daily. ```", inline=True)
        embed.add_field(name="**Fintel - 13F information & SEC Edgar for Verification",value="`To keep up to date with institutional holdings. Follow the money.`https://fintel.io/so/us/gme `OR FROM THE SOURCE` https://www.sec.gov/edgar/search/", inline=True)
        embed.add_field(name="**The Federal Register - Dodd Frank Act",value="```Stay up to date with SEC Filings that are posted daily on public inspection.` https://www.federalregister.gov/dodd-frank-wall-steet-reform", inline=True)
        embed.add_field(name="**DTCC Filings",value="```Stay up to date with filings out of DTC, NSCC, and the FICC.` https://www.dtcc.com/legal/sec-rule-filings", inline=True)
        embed.add_field(name="**DTCC Important Notices**",value="`Stay up to date with relevant important notices that affect all participants.` https://www.dtcc.com/legal/important-notices", inline=False)
        embed.add_field(name="**OCC Filings**",value="```Stay up to date with filings that come out of the Options Clearing Corporation.` https://www.sec.gov/rules/sro/occ.htm", inline=False)
        embed.add_field(name="**US Treasury Balance**",value="```Stay up to date with the US Treasury's balance.` https://fiscaldata.treasury.gov/datasets/daily-treasury-statement/operating-cash-balance", inline=False)
        embed.add_field(name="**Reverse Repo**",value="```Stay up to date with the historic repo-suave numbers that come out at 12:15 CST every day.` https://www.newyorkfed.org/markets/data-hub", inline=False)
        embed.add_field(name="**MMF/Reverse Repo Data**",value="https://www.financialresearch.gov/money-market-funds/ ```This is the Money Market Fund Monitor from the Office of Financial Research. View counterparties to the fed / repo numbers as well as FICC repos.", inline=False)
        embed.add_field(name="**CBOE Market Share Graph**",value="https://www.cboe.com/us/equities/market_statistics/venue/ ```View CBOE's Market Share graph and look at volume straight from the Securities Information Processor from all three Tapes. Compare market share from all venus including the ADF.", inline=False)
        embed.add_field(name="**FINRA OTC Data**",value="https://otctransparency.finra.org/otctransparency/AtsIssueData ```FINRA is now reporting OTC data as well as Alternative Trading Systems data on a weekly basis. View OTC trades, ATS data, and more. ```", inline=False)
        embed.add_field(name="**Systematic Internaliser Data**",value="https://www.esma.europa.eu/data-systematic-internaliser-calculations ```View the Systematic Internaliser data from the ESMA in Europe as required my MiFID II regulations. Systematic Internaliser data is represented in Euros. ```", inline=False)
        embed.add_field(name="**FTDs**",value="https://www.sec.gov/data/foiadocsfailsdatahtm ```View the SEC Failure to Deliver data that's reported twice monthly.", inline=False)
        embed.add_field(name="**NYSE Master FTP Index**",value="https://ftp.nyxdata.com/ShortData/NYSEshvol/NYSEshvol2021/ ```View the Master File of NYSE Data from all subsidararies. ```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=UsefulLinksView())

    @disnake.ui.button(label="Trader Tools🛠️", style=disnake.ButtonStyle.blurple)
    async def tradertools( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title ="Trader Tools🛠️", color = disnake.Colour.random())
        embed.add_field(name="**TOOLS!**",value='Here is a plethora of tools to use to make life easier.', inline=False) 
        embed.add_field(name="**AlphaQuery**", value="If you're a member - this tool is available to you! Be sure to visit <#966089032213872640> for a turorial. https://www.alphaquery.com/table", inline=False)
        embed.add_field(name="**OpenBB Terminal**", value="This terminal is available for everyone to use. To use it - download the terminal from here: https://github.com/OpenBB-finance/OpenBBTerminal/releases/download/v1.3.0/OpenBB.Terminal.Setup.exe", inline=False)
        embed.add_field(name="**Option Strategy Creator**", value="This is an amazing tool that helps you build option strategies and view the P/L charts. Great for learning / experimenting: https://optioncreator.com/", inline=False)
        embed.add_field(name="**Difference Checker**", value="Want to compare documents side by side? See what's changed by utilizing the Difference Checker: https://www.diffchecker.com/", inline=False)
        embed.add_field(name="**Social Grep**", value="Scrape and Export Reddit Data from any subreddit to guage psyop levels.` https://www.socialgrep.com", inline=False)
        embed.add_field(name="**Subreddit Stats**", value="Compare subreddits, view top comments, posts, and guage authenticity with this tool. https://www.subredditstats.com", inline=False)
        embed.add_field(name="**Mention Map**", value="Want to see twitter connections? Mention Map allows you to see connections based on retweets / mentions. Great for detecting collusion. https://mentionmapp.com/", inline=False)
        embed.add_field(name="**Social Blade**", value="Social Blade is a great tool to see just how much YouTubers and Twitter Personalities are making from ad revenue. https://www.socialblade.com", inline=False)
        embed.add_field(name="**SEC Interactive FTD Chart**", value="Use this chart to visualize FTDs as they are released from SEC.GOV.: https://sec.report/fails.php?", inline=False)
        embed.add_field(name="Discord Search**", value="If you're looking for any important information pertaining to the group - USE THE DISCORD SEARCH!", inline=False)
        embed.add_field(name="**Market Maker Signals**", value="Learn the market maker signals which happen on the level 2 order book. https://otc.financial/list-of-market-maker-signals/#:~:text=Market%20maker%20signals%20are%20the,of%20a%20company's%20share%20price.", inline=False)
        embed.add_field(name="**Options Profit Calculator**",value='https://www.optionsprofitcalculator.com/', inline=False)
        embed.add_field(name="**Black Scholes Calculator**", value="Learn how to price your options contracts by using the Black Scholes Calculator`: https://www.optionseducation.org/toolsoptionquotes/optionscalculator", inline=False)
        embed.add_field(name="**Gitmind Mind Maps**", value="Down a rabbit hole? Use Gitmind to make custom mind-maps:` https://gitmind.com/", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=TraderToolsView())



    @disnake.ui.button(label="Market Glossary📖", style=disnake.ButtonStyle.blurple)
    async def marketgloss( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title = "Market Glossary📖", color = disnake.Colour.random())
        await interaction.response.edit_message(embed=embed, view=MarketGlossaryView())




    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="🏡️ Home Menu", description="You just went 🏡 from the **Tools Menu**", color=disnake.Colour.dark_green())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, )

class SECFormView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @disnake.ui.button(label="SEC Form ", style=disnake.ButtonStyle.red )
    async def secform( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title="Sec Form 1", description="**APPLICATION FOR, AND AMENDMENTS TO APPLICATION FOR, REGISTRATION AS A NATIONAL SECURITIES EXCHANGE OR EXEMPTION FROM REGISTRATION PURSUANT TO SECTION 5 OF THE EXCHANGE ACT**", url="https://www.sec.gov/files/form1.pdf", color=disnake.Colour.random())
        embed.set_image(url="https://media.giphy.com/media/3umq6srnOzloPRsrgj/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=SECFormView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="🏡️ Home Menu", description="You just went 🏡 from the **SEC Forms Menu**")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Tools 🛠️", description="You just went 🔙 from the **SEC FORM Menu** and are now viewing the Tools 🛠️")
        embed.add_field(name="Navigation Help:", value="You just went 🔙 from the **Cited Works Menu** and are now viewing the Tools 🛠️", inline=True)
        embed.add_field(name="🏡", value="Main Menu", inline=True)
        embed.add_field(name="🔙", value="Previous", inline=True)
        embed.set_image(url="https://media.giphy.com/media/3umq6srnOzloPRsrgj/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=ToolsView())



class TraderToolsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.gitmind.com/", label="GITMIND Mind Maps"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.optionseducation.org/toolsoptionquotes/optionscalculator", label="Black Scholes Calculator"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.github.com/OpenBB-finance/OpenBBTerminal/releases/download/v1.3.0/OpenBB.Terminal.Setup.exe", label="OpenBB Terminal (exe)"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.optioncreator.com/", label="Option Strategy Creator"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.diffchecker.com/", label="Difference Checker"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.socialgrep.com", label="Social Data"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.subredditstats.com", label="Subreddit Stats"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.mentionmapp.com/", label="Mention Maps - Twitter"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.socialblade.com", label="Social Blade"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.otc.financial/list-of-market-maker-signals/#:~:text=Market%20maker%20signals%20are%20the,of%20a%20company's%20share%20price.", label="Market Maker Signals"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.sec.report/fails.php?", label="SEC Interactive FTD Chart"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.optionsprofitcalculator.com/", label="Options Profit Calculator"))
    @disnake.ui.button(label="Calendars📆", style=disnake.ButtonStyle.red)
    async def calendar(
        self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title = "FUDSTOP", color = disnake.Colour.random())
        embed.add_field(name="**FINRA Consolidated Audit Trail",value="The CAT System, or Consolidated Audit Trail, is a long-time effort by the industry to be able to track the life-cycle of a security from beginning to end. This SYSTEM has been in development for over a decade, and GO-LIVE production is scheduled for late July. \n\n Keep up with their schedule and monitor any changes by utilizing this calendar. \n\n https://www.catnmsplan.com/timeline \n ")
        embed.add_field(name="**Federal Reserve FOMC Schedule",value="You ALWAYS want to make sure you keep up with the Fed's schedule. Most of this narrative rendering stuff is scheduled ahead of time. \n\n https://www.federalreserve.gov/monetarypolicy/fomccalendars.htm \n")
        embed.add_field(name="**Finra Short Interest Reporting Dates",value="FINRA Short Interest Reporting dates are critical. \n\n Keep in mind: The settlement dates provided have up to 2 business days following the settlement date to deliver. \n\n https://www.finra.org/filing-reporting/regulatory-filing-systems/short-interest \n")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=ToolsView())

    @disnake.ui.button(label="Cited Works📰", style=disnake.ButtonStyle.gray)
    async def citedworks( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Cited Works📰", description= "Cited works are a **critical** component of my financial journey. A lot of my understanding from various market topics stems from the seveal cited works that I have read. They contain immense insider knowledge of past market functionality that you can utilize to guage the current day markets.", color=disnake.Colour.dark_teal())
        embed.set_image(url="https://media.giphy.com/media/3umq6srnOzloPRsrgj/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed = embed, view=CitedView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Home Menu 🏡", description= "Welcome to the FUDSTOP Trading Market Application. \n\n Simply use the buttons below to Navigate.", color=disnake.Colour.dark_teal())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Tools 🛠️", description="You just went 🔙 from the **Cited Works Menu** and are now viewing the Tools 🛠️")
        embed.add_field(name="Navigation Help:", value="You just went 🔙 from the **Cited Works Menu** and are now viewing the Tools 🛠️", inline=True)
        embed.add_field(name="🏡", value="Main Menu", inline=True)
        embed.add_field(name="🔙", value="Previous", inline=True)
        embed.set_image(url="https://media.giphy.com/media/3umq6srnOzloPRsrgj/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=ToolsView())



class MarketGlossaryView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @disnake.ui.button(label="SEC Forms📖", style=disnake.ButtonStyle.red )
    async def secform( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        await interaction.response.edit_message(view=SECFormView())


    @disnake.ui.button(label="Dictionary📚", style=disnake.ButtonStyle.red )
    async def dict( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):  
        embed = disnake.Embed(title="Dictionary📚", description="Dictionary📚 - Learn market terms.") 
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=MarketGlossaryView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="🏡️ Home Menu", description="You just went 🏡 from the **Market Glossary**")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Tools 🛠️", description="You just went 🔙 from the **Market Glossary Menu** and are now viewing the Tools 🛠️")
        embed.add_field(name="🏡", value="Main Menu", inline=True)
        embed.add_field(name="🔙", value="Previous", inline=True)
        embed.set_image(url="https://media.giphy.com/media/3umq6srnOzloPRsrgj/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=ToolsView())

class FUDSTOPView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="Active Stock Tickers", style=disnake.ButtonStyle.blurple, )
    async def active( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/active", description = "```py\nmReturns the most active tickers for the day. Can easily plug into excel!```",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/cvChp7P/active.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())


        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Agency Mortgage Backed Securities - FED", style=disnake.ButtonStyle.blurple, )
    async def ambs( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/ambs", description = "```py\n/ambs lists the recent Mortgage Backed Security Transactions out of the FED. Your options are: 'all'  'sales' 'purchases' 'rolls' 'swaps'```",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/Wk3vpdB/AMBS.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())


    @disnake.ui.button(label="Criminals", style=disnake.ButtonStyle.grey, )
    async def criminals( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/criminals",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media0.giphy.com/media/EnOeJR5MUwR5tYol0m/giphy.gif?cid=790b7611790ee13ce59f1ac474aff94fb98af687496d8e9f&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Analyst Consensus", style=disnake.ButtonStyle.green, )
    async def analystconsensus( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/xHj1q29FBK3u9ZkYHp/giphy.gif?cid=790b761116c88281f98d49dc7617c98071f8a430efc2968a&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())


    @disnake.ui.button(label="Check Moving Averages (50ma and 200ma - DAILY)", style=disnake.ButtonStyle.grey, )
    async def checkmas( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/check_moving_averages",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media4.giphy.com/media/MA8oZhZLpsf04Y4cQN/giphy.gif?cid=790b7611e6c681d5b36d1eb4798ac05070b00cbd877df588&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Check all Major Indexes", style=disnake.ButtonStyle.blurple, )
    async def checkindex( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/check_indexes",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media4.giphy.com/media/wfzmlEV4joHdppVoPO/giphy.gif?cid=790b7611970dfa8cf41f4fd298c2ae6e656539f60b5f2aca&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Check Price Performance", style=disnake.ButtonStyle.grey, )
    async def check( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/check",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media1.giphy.com/media/m8xCbh80CfLjimDrv8/giphy.gif?cid=790b7611150592dcfa4af5fd09c6c086f7dde4149db4ba84&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Earnings", style=disnake.ButtonStyle.green, )
    async def earnings( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/earnings",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://giphy.com/gifs/RswiJjpckvTTi8fdRa")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Earnings Upcoming", style=disnake.ButtonStyle.blurple )
    async def earningsupcoming( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/earnings_upcoming <date>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/YcGDyz8/earnings-UPCOMING.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())


    @disnake.ui.button(label="Enviornmental, Social, and Governance Risk", style=disnake.ButtonStyle.grey, )
    async def esgrisk( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/IoWcUqVy8KlNnZerHn/giphy.gif?cid=790b7611ba41e28ad4b2675b57748008c8446a6b6d14a6d2&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Enviornmental, Social, and Governance Metrics", style=disnake.ButtonStyle.green, )
    async def esg( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media1.giphy.com/media/khvcU2xXGdKI3jw3pk/giphy.gif?cid=790b7611bfadbf75e499ede5e5e2f14197b47255a1312869&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Dow Jones List", style=disnake.ButtonStyle.grey, )
    async def dowjones( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/dowjones",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/7w3LnCN2lvpRQlBlcG/giphy.gif?cid=790b7611e87a8c7453800751137e56a5848d3641970e030e&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Realtime Top Gainers / Losers(dropGainers)", style=disnake.ButtonStyle.blurple, )
    async def topgain( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/direction <direction> <gainer/loser>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media0.giphy.com/media/vkqzRijPaYex4vnlcs/giphy.gif?cid=790b76110a1d363d8e7c4aa338be43c1574600bbb4c0c4ab&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Daily Ratings", style=disnake.ButtonStyle.blurple, )
    async def dailyrating( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/hoLAIJForW8v9L5pMy/giphy.gif?cid=790b761126c0d861142b53cfb6bcc1f18263e412ab46d699&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Company Notes Due", style=disnake.ButtonStyle.blurple, )
    async def companynotes( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/company_notes_due",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/5M31qN7/COMPANY-notes-due.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="ETF Ticker List", style=disnake.ButtonStyle.green, )
    async def etflist( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/etf_holders",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/wz2Hb5K/etf-holders.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Evaluate A Company", style=disnake.ButtonStyle.grey, )
    async def evaluate( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/evaluate",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/pXj2x8p/evaluate.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Listed Exchange", style=disnake.ButtonStyle.grey, )
    async def exchange( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/exchange",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/BqBt9KD/exchange.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Fails to Deliver - Excel Ready", style=disnake.ButtonStyle.green, )
    async def fails( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fails",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/ZMfLsnG/fails.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Fair Value - Industry", style=disnake.ButtonStyle.grey, )
    async def fair_value( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fair_value",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/ZMfLsnG/fails.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="52 week high / low + Dates", style=disnake.ButtonStyle.blurple)
    async def fiftytwo( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fifty_two",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/wdWsFfq/fiftytwo.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Page 2 -->", style=disnake.ButtonStyle.red)
    async def page2( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fifty_two",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/wdWsFfq/fiftytwo.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media2.giphy.com/media/bVPcXheO9jDBYP2zXH/giphy.gif?cid=790b76116c18f3195489b517ff7ebc22a6fa6fa904ac40b1&rid=giphy.gif&ct=g")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed = em, )


    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=FUDSTOPView)
class FUDSTOPView2(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="Financial Score", style=disnake.ButtonStyle.blurple, )
    async def fiftytwo( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/financial_score",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/pKsWdps/financialscore.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media2.giphy.com/media/bVPcXheO9jDBYP2zXH/giphy.gif?cid=790b76116c18f3195489b517ff7ebc22a6fa6fa904ac40b1&rid=giphy.gif&ct=g")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="FINVIZ Market Screener", style=disnake.ButtonStyle.blurple, )
    async def finscreen( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/finscreen",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/F3L9gQB/finscreen.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media2.giphy.com/media/bVPcXheO9jDBYP2zXH/giphy.gif?cid=790b76116c18f3195489b517ff7ebc22a6fa6fa904ac40b1&rid=giphy.gif&ct=g")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="Float Ownership Check", style=disnake.ButtonStyle.blurple, )
    async def floats( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/float <ticker>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="Failure to Deliver Interactive Chart", style=disnake.ButtonStyle.blurple, )
    async def ftds( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/ftds <ticker>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media.discordapp.net/attachments/1009552305869303828/1009556647934439505/unknown.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="Futures Maps", style=disnake.ButtonStyle.blurple, )
    async def futures( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/futures <map>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media.discordapp.net/attachments/1009552305869303828/1009556927841308723/unknown.png?width=1283&height=610")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="FinViz top Shorts with 30%+ Shorted", style=disnake.ButtonStyle.blurple, )
    async def topshorts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/float",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media.discordapp.net/attachments/1009552305869303828/1009557120372449450/unknown.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=BotsView)



class NotesView(disnake.ui.View, disnake.ui.Button):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="S&P500 Rebalancing Information🖌️", style=disnake.ButtonStyle.red, )
    async def note1( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="S&P500 Rebalancing Information🖌️", description="```py\nIndex Maintenance Rebalancing Index membership is reviewed quarterly. Rebalancing occurs after the close on the \n\n third Friday of January, April, July, and October.``` ```py\nThe reference date for additions to and deletions from the index is\n\n 'five business days prior to the first Friday of the rebalancing month.'``` \n\n **Additions.** \n\n ```py\nAdditions occur only at the quarterly rebalancing dates. There are no intra-period additions.```**Deletions.** ```py\nA constituent is deleted intra-period if it is called or undergoes mandatory conversion or redemption.  \n Index constituents are also deleted if the constituents no longer meet eligibility requirements at the quarterly rebalancing.  \n The Index Committee exercises discretion in cases where the credit worthiness of an issue is significantly downgraded or downgraded to junk status.```")
        embed.set_image(url="https://i.ibb.co/MBzG1BN/SP500-REBALANCE.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NotesView())

    @disnake.ui.button(label="MacroEconomic Policy Since Covid19🖌️", style=disnake.ButtonStyle.blurple, )
    async def note2( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Macro Economics and the Markets", description="```py\nThere have been several policy decisions made since the onset of COVID19 that are re-shaping the core structure of Financial Markets. This note the policy effects on Global Financial Markets.```")
        embed.set_image(url="https://media.giphy.com/media/3umq6srnOzloPRsrgj/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NotesView())

    @disnake.ui.button(label="China VS the USA🖌️", style=disnake.ButtonStyle.blurple, )
    async def note3( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="China VS The USA", description="```py\nChina is expected to outpace the United States in Gross Domestic Product by 2028.```")
        embed.set_image(url="https://media.discordapp.net/attachments/896207280117264434/955135923530629190/816.png?width=789&height=629")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NotesView())

    @disnake.ui.button(label="Trade Halt Codes🖌️", style=disnake.ButtonStyle.blurple, )
    async def note4( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Trade Halt Codes", description=
"```py\nT1Halt - News Pending"
"Trading is halted pending the release of material news.```"
"```py\nT2Halt - News Released"
"The news has begun the dissemination process through a Regulation FD compliant method(s).```"
"```py\nT5Single Stock Trading Pause in Effect"
"Trading has been paused by NASDAQ due to a 10% or more price move in the security in a five-minute period.```"
"```py\nT6Halt - Extraordinary Market Activity"
"Trading is halted when extraordinary market activity in the security is occurring; NASDAQ determines that such extraordinary market activity is likely to have a material effect on the market for that security; and 1) NASDAQ believes that such extraordinary market activity is caused by the misuse or malfunction of an electronic quotation, communication, reporting or execution system operated by or linked to NASDAQ; or 2) after consultation with either a national securities exchange trading the security on an unlisted trading privileges basis or a non-NASDAQ FINRA facility trading the security, NASDAQ believes such extraordinary market activity is caused by the misuse or malfunction of an electronic quotation, communication, reporting or execution system operated by or linked to such national securities exchange or non- NASDAQ FINRA facility.```"
"```py\nT8Halt - Exchange-Traded-Fund (ETF) "
"Trading is halted in an ETF due to the consideration of, among other factors: 1) the extent to which trading has ceased in the underlying security(s); 2) whether trading has been halted or suspended in the primary market(s) for any combination of underlying securities accounting for 20% or more of the applicable current index group value; 3) the presence of other unusual conditions or circumstances deemed to be detrimental to the maintenance of a fair and orderly market.```"
"```py\nT12Halt - Additional Information Requested by NASDAQ"
"Trading is halted pending receipt of additional information requested by NASDAQ. \n\n"
"H4Halt - Non-compliance"
"Trading is halted due to the company's non-compliance with NASDAQ listing requirements.```"
"```py\nH9Halt - Not Current"
"Trading is halted because the company is not current in its required filings. ```"
"```py\nH10Halt - SEC Trading Suspension"
"The Securities and Exchange Commission has suspended trading in this stock.```"
"```py\nH11Halt - Regulatory Concern \n\n"
"Trading is halted in conjunction with another exchange or market for regulatory reasons.```"
"```py\nO1Operations Halt, Contact Market Operations```"
"```py\nIPO1IPO Issue not yet Trading```"
"```py\nM1Corporate Action```"
"```py\nM2Quotation Not Available```"
"```py\nVolatility Trading Pause```"
"```py\nLUDSVolatility Trading Pause - Straddle Condition```"
"```py\nMWC1Market Wide Circuit Breaker Halt - Level 1```"
"```py\nMWC2Market Wide Circuit Breaker Halt - Level 2```"
"```py\nMWC3Market Wide Circuit Breaker Halt - Level 3```"
"```py\nMWC0Market Wide Circuit Breaker Halt - Carry over from previous day```", color=disnake.Colour.random())
        embed.add_field(name="Codes Continued", value=
"```py\nT7Single Stock Trading Pause/Quotation-Only Period"
"Quotations have resumed for affected security, but trading remains paused.```"
"```py\nR4Qualifications Issues Reviewed/Resolved; Quotations/Trading to Resume```"
"```py\nR9Filing Requirements Satisfied/Resolved; Quotations/Trading To Resume```"
"```py\nC3Issuer News Not Forthcoming; Quotations/Trading To Resume```"
"```py\nC4Qualifications Halt ended; maint. req. met; Resume```"
"```py\nC9Qualifications Halt Concluded; Filings Met; Quotes/Trades To Resume```"
"```py\nC11Trade Halt Concluded By Other Regulatory Auth,; Quotes/Trades Resume```", inline=False)
        embed.add_field(name="Codes Continued", value="```py\nT3News and Resumption Times"
"The news has been fully disseminated through a Regulation FD compliant method(s); or NASDAQ has determined either that system misuse or malfunction that caused extraordinary market activity will no longer have a material effect on the market for the security or that system misuse or malfunction is not the cause of the extraordinary market activity; or NASDAQ has determined the conditions which led to a halt in an Exchange-Traded Fund are no longer present. Two times will be displayed: (1) the time when market participants can enter quotations, followed by (2) the time the security will be released for trading. All trade halt and resumption times will be posted in HH:MM:SS format.```"
"```py\nR1New Issue Available```"
"```py\nR2Issue Available```"
"```py\nIPOQIPO security released for quotation```"
"```py\nIPOEIPO security - positioning window extension```", inline=False)
        embed.add_field(name="Codes Continued", value=
"```py\nMWCQMarket Wide Circuit Breaker Resumption ```"
"```py\nMVolatility Trading Pause```"
"```py\nTrading has been paused in an Exchange-Listed issue (Market Category Code = C)```"
"```py\nDSecurity deletion from NASDAQ / CQS```"
"```py\nSpaceReason Not Available```"
"```py\nNotesHalt codes H4 and H9 may be activated in situations where a SEC trading suspension is terminated and a NASDAQ trading halt is terminated, but the company in either instance is not in compliance with specific NASDAQ requirements. Any questions related to a specific trading halt or to the trading halts codes should be directed to MarketWatch at 800.537.3929 or 301.978.8500.```", inline=False)
        embed.set_image(url="https://media.giphy.com/media/WleueIhxWsV3GQJUaT/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NotesView())


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message()












class Op(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(label="/op chains", description="Displays Options Chain By Expiry."),
            disnake.SelectOption(label="/op oi", description="Displays Open Interest and call/put ratio consolidated or by date."),
            disnake.SelectOption(label="/op topoichange", description="Displays the top 15 stocks where OI has changed the most."),
            disnake.SelectOption(label="/op top oi", description="Displays top open interest tickers."),
            disnake.SelectOption(label="/op equitypc", description="Displays Equity put / call ratio."),
            disnake.SelectOption(label="/op itm", description="Displays In the Money options by expiration."),
            disnake.SelectOption(label="/op oichart", description="Charts open interest by strike price."),
            disnake.SelectOption(label="/op smile", description="Displays the options volatility smile."),
            disnake.SelectOption(label="/op indexpc", description="Displays the index put/call ratio for markets."),
            disnake.SelectOption(label="/op maxpain", description="Shows the max pain price for a given expiration."),
            disnake.SelectOption(label="/op gamma", description="Displays Options Gamma Levels for a Stock."),
            disnake.SelectOption(label="/op info", description="Displays options info - such as IV Rank, Percentile, etc."),
            disnake.SelectOption(label="/op unu", description="Shows tickers with unusual options."),
            disnake.SelectOption(label="/op vol", description="Displays option strike volume. Can add Expiration to breakdown further."),
            disnake.SelectOption(label="/op vsurf", description="Displays a tickers' options volatility surface."),
            disnake.SelectOption(label="/op hist", description="Displays option's price history."),
            disnake.SelectOption(label="/op uoastock", description="Displays the top 20 volume options."),
            disnake.SelectOption(label="/op highiv", description="Displays the top 15 highest IV options."),
            disnake.SelectOption(label="/op topvol", description="Displays the top 15 highest volume options."),
            disnake.SelectOption(label="/op topetfvol", description="Displays the top 15 highest ETF options."),
            disnake.SelectOption(label="/op stats", description="Displays options statistics for a stock."),]

        super().__init__(
            placeholder="⚙️ /op ⚙️",
            min_values=1,
            max_values=1,
            custom_id ="S43",
            options=options,
        ),

    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.defer(with_message=False, ephemeral=True)
        if self.values[0] =="/op chains":
            await interaction.edit_original_message("```py\nDisplays Options Chain By Expiry.```</op chains:1004263746111275138>")
        elif self.values[0] =="/op oi":
            await interaction.edit_original_message("```py\nDisplays Open Interest and call/put ratio consolidated or by date.```</op oi:1004263746111275138>")
        elif self.values[0] =="/op topoichange":
            await interaction.edit_original_message("```py\nDisplays the top 15 stocks where OI has changed the most.```</op topoichange:1004263746111275138>")
        elif self.values[0] =="/op top oi":
            await interaction.edit_original_message("```py\nDisplays top open interest tickers.```</op topoi:1004263746111275138>")
        elif self.values[0] =="/op equitypc":
            await interaction.edit_original_message("```py\nDisplays Equity put / call ratio.```</op equitypc:1004263746111275138>")
        elif self.values[0] =="/op itm":
            await interaction.edit_original_message("```py\nDisplays In the Money options by expiration.```</op itm:1004263746111275138>")
        elif self.values[0] =="/op oichart":
            await interaction.edit_original_message("```py\nCharts open interest by strike price.```</op oichart:1004263746111275138>")
        elif self.values[0] =="/op smile":
            await interaction.edit_original_message("```py\nDisplays the options volatility smile.```</op smile:1004263746111275138>")
        elif self.values[0] =="/op indexpc":
            await interaction.edit_original_message("```py\nDisplays the index put/call ratio for markets.```</op indexpc:1004263746111275138>")
        elif self.values[0] =="/op maxpain":
            await interaction.edit_original_message("```py\nShows the max pain price for a given expiration.```</op maxpain:1004263746111275138>")
        elif self.values[0] =="/op gamma":
            await interaction.edit_original_message("```py\nDisplays Options Gamma Levels for a Stock.```</op gamma:1004263746111275138>")
        elif self.values[0] =="/op info":
            await interaction.edit_original_message("```py\nDisplays options info - such as IV Rank```</op info:1004263746111275138>")
        elif self.values[0] =="/op unu":
            await interaction.edit_original_message("```py\nShows tickers with unusual options.```</op unu:1004263746111275138>")
        elif self.values[0] =="/op vol":
            await interaction.edit_original_message("```py\nDisplays option strike volume. Can add Expiration to breakdown further.```</op vol:1004263746111275138>")
        elif self.values[0] =="/op vsurf":
            await interaction.edit_original_message("```py\nDisplays a tickers' options volatility surface.```</op vsurf:1004263746111275138>")
        elif self.values[0] =="/op hist":
            await interaction.edit_original_message("```py\nDisplays option's price history.```</op hist:1004263746111275138>")
        elif self.values[0] =="/op uoastock":
            await interaction.edit_original_message("```py\nDisplays the top 20 volume options.```</op uoastock:1004263746111275138>")
        elif self.values[0] =="/op highiv":
            await interaction.edit_original_message("```py\nDisplays the top 15 highest IV options.```</op highiv:1004263746111275138>")
        elif self.values[0] =="/op topvol":
            await interaction.edit_original_message("```py\nDisplays the top 15 highest volume options.```</op topvol:1004263746111275138>")
        elif self.values[0] =="/op topetfvol":
            await interaction.edit_original_message("```py\nDisplays the top 15 highest ETF options.```</op topetfvol:1004263746111275138>")
        elif self.values[0] =="/op stats":
            await interaction.edit_original_message("```py\nDisplays options statistics for a stock.```</op stats:1004263746111275138>")
        elif self.values[0] =="/op topstrikevol":
            await interaction.edit_original_message("```py\nDisplays options statistics for a stock.```</op topstrikevol:1004263746111275138>")













class AlertsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(LearningDropdown())


    @disnake.ui.button(label="Analyst Upgrades", style=disnake.ButtonStyle.grey, )
    async def analysts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Analyst Upgrades", description=" \n\n WHEN TRADING THE ALERTS: **GO IN THE MONEY**. They often recommend OTM strikes - but I have found with experience that if you play these alerts ITM, you'll see a much higher success rate.", color=disnake.Colour.random())
        embed.add_field(name="Analyst Upgrades",value='<#1016372139802234991>', inline=False)
        embed.set_image(url="https://ucarecdn.com/6ef20032-5263-4e04-8265-cf3b02b59d21/ANALYST.png")
        await interaction.response.edit_message(embed=embed, view=AlertsView())

    @disnake.ui.button(label="Social Spike 🫂", style=disnake.ButtonStyle.grey, )
    async def sspike( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Social Spike 🫂", description=" \n\n WHEN TRADING THE ALERTS: **GO IN THE MONEY**. They often recommend OTM strikes - but I have found with experience that if you play these alerts ITM, you'll see a much higher success rate.", color=disnake.Colour.random())
        embed.add_field(name="Social Spike 🫂", value="<#1016369975864348673>", inline=True)
        embed.set_image(url="https://ucarecdn.com/191849f9-3bc0-4dd4-b68d-6440b08c0639/sspike.png")
        await interaction.response.edit_message(embed=embed, view=AlertsView())

    @disnake.ui.button(label="Crypto Alerts🪙", style=disnake.ButtonStyle.grey, )
    async def crypt( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Crypto Alerts🪙", description=" \n\n WHEN TRADING THE ALERTS: **GO IN THE MONEY**. They often recommend OTM strikes - but I have found with experience that if you play these alerts ITM, you'll see a much higher success rate.", color=disnake.Colour.random())
        embed.add_field(name="Crypto Alerts🪙", value="<#1016372517251850360> \n\n <#1016372323051388999>", inline=True)
        embed.set_image(url="https://ucarecdn.com/db5a9e00-1b30-4246-9207-a5f1e25d31da/CRYPTOS.png")
        await interaction.response.edit_message(embed=embed, view=AlertsView())

    @disnake.ui.button(label="Important News📰", style=disnake.ButtonStyle.blurple, )
    async def impnews( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Important News📰", description=" \n\n WHEN TRADING THE ALERTS: **GO IN THE MONEY**. They often recommend OTM strikes - but I have found with experience that if you play these alerts ITM, you'll see a much higher success rate.", color=disnake.Colour.random())
        embed.add_field(name="Important News📰", value="<#1016372151596630016>", inline=True)
        embed.set_image(url="https://ucarecdn.com/5fdb8028-210b-421f-b449-f43be8518b36/nrwea.png")
        await interaction.response.edit_message(embed=embed, view=AlertsView())

    @disnake.ui.button(label="Options Sweeps🧹", style=disnake.ButtonStyle.blurple, )
    async def osweeps( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Options Sweeps🧹", description=" \n\n WHEN TRADING THE ALERTS: **GO IN THE MONEY**. They often recommend OTM strikes - but I have found with experience that if you play these alerts ITM, you'll see a much higher success rate.", color=disnake.Colour.random())
        embed.add_field(name="Options Sweeps🧹", value="<#1016369913759285338>", inline=True)
        embed.set_image(url="https://ucarecdn.com/8ef30c41-ff02-47a7-bf3f-048e3d783321/sweeps.png")
        await interaction.response.edit_message(embed=embed, view=AlertsView())

    @disnake.ui.button(label="Stock Breakouts📈", style=disnake.ButtonStyle.blurple, )
    async def stkbrk( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Stock Breakouts📈", description=" \n\n WHEN TRADING THE ALERTS: **GO IN THE MONEY**. They often recommend OTM strikes - but I have found with experience that if you play these alerts ITM, you'll see a much higher success rate.", color=disnake.Colour.random())
        embed.add_field(name="Stock Breakouts📈", value="<#1016369985867743394>", inline=True)
        embed.set_image(url="https://ucarecdn.com/d3c602d7-4cd7-4393-b603-42339733ecf3/breakout.png")
        await interaction.response.edit_message(embed=embed, view=AlertsView())

    @disnake.ui.button(label="Scalps🤳", style=disnake.ButtonStyle.blurple, )
    async def realtimealerts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Scalps🤳", description=" \n\n WHEN TRADING THE ALERTS: **GO IN THE MONEY**. They often recommend OTM strikes - but I have found with experience that if you play these alerts ITM, you'll see a much higher success rate.", color=disnake.Colour.random())
        embed.add_field(name="Scalps🤳", value="<#1016369974945775666>", inline=True)
        embed.set_image(url="https://ucarecdn.com/475cb5d9-77b4-451a-a4f7-484d2a8b705c/bryancohen.png")
        await interaction.response.edit_message(embed=embed, view=AlertsView())

    @disnake.ui.button(label="Insider Trades🔀", style=disnake.ButtonStyle.green, )
    async def inst( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Insider Trades🔀", description=" \n\n WHEN TRADING THE ALERTS: **GO IN THE MONEY**. They often recommend OTM strikes - but I have found with experience that if you play these alerts ITM, you'll see a much higher success rate.", color=disnake.Colour.random())
        embed.add_field(name="Insider Trades🔀", value="<#1016369984768852090>", inline=True)
        embed.set_image(url="https://ucarecdn.com/4d245ffb-a2cf-4c56-88d1-a3d40074701b/INSIDERSELLING.png")
        await interaction.response.edit_message(embed=embed, view=AlertsView())

    @disnake.ui.button(label="Bullseye Alerts", style=disnake.ButtonStyle.grey, )
    async def bullseye( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Bullseye Alerts", description=" \n\n WHEN TRADING THE ALERTS: **GO IN THE MONEY**. They often recommend OTM strikes - but I have found with experience that if you play these alerts ITM, you'll see a much higher success rate.", color=disnake.Colour.random())
        embed.add_field(name="Analyst Upgrades",value='<#1016369960810979388>', inline=False)
        embed.set_image(url="https://ucarecdn.com/e493d847-f98f-484f-af36-02cefb581360/BULLSEYEBOT.png")
        await interaction.response.edit_message(embed=embed, view=AlertsView())

    @disnake.ui.button(label="Trady Flow🌻", style=disnake.ButtonStyle.grey, )
    async def tflow( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Trady Flow🌻", description=" \n\n WHEN TRADING THE ALERTS: **GO IN THE MONEY**. They often recommend OTM strikes - but I have found with experience that if you play these alerts ITM, you'll see a much higher success rate.", color=disnake.Colour.random())
        embed.add_field(name="Trady Flow🌻", value="<#1016369947829600297>", inline=True)
        embed.set_image(url="https://ucarecdn.com/d5df00da-bca4-4dd4-b34b-a21acdade66c/tradyflow.png")
        await interaction.response.edit_message(embed=embed, view=AlertsView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=MainView2())


class NotificationsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    
    @disnake.ui.button(label="📰 News", style=disnake.ButtonStyle.gray)
    async def news( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        embed= disnake.Embed(title="📰 News", description="🔔 From News to real-time play opportunities, to dark-pool feeds, golden sweeps, announcements, Tweets from popular accounts, and more: Make sure to utilize the Discord Notifications Discord Notifications🔔 to make the most out of FUDSTOP. \n\n Click the buttons below to set-up your notifications.", color=disnake.Colour.dark_gold())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=NewsNotifView())

    @disnake.ui.button(label="RSS Feeds👁️", style=disnake.ButtonStyle.gray)
    async def rss( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        embed= disnake.Embed(title="RSS Feeds👁️", description="🔔 From News to real-time play opportunities, to dark-pool feeds, golden sweeps, announcements, Tweets from popular accounts, and more: Make sure to utilize the Discord Notifications Discord Notifications🔔 to make the most out of FUDSTOP. \n\n Click the buttons below to set-up your notifications.", color=disnake.Colour.dark_gold())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=RSSNotifView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🔙 You just went Back to the **data menu**", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, view=dataView())



class DropdownStreamer(disnake.ui.Select):
    def __init__(self):
                
                
        options = [
                disnake.SelectOption(
                    label="✅",description="Yes daddy.",
                ),
                disnake.SelectOption(
                    label="❌",description="No daddy.",
                ),

        ]

        super().__init__(
            placeholder="🌟 🇦 🇬 🇦 🇮 🇳 ❓ 🌟",
            min_values=1,
            max_values=1,
            custom_id ="xxdxtxx9",
            options=options,
        ),            


class ConfirmOrDenyDropdown2(disnake.ui.Select):
    def __init__(self):
        crypto = requests.get(url="https://quotes-gw.webullfintech.com/api/bgw/crypto/list")
        cryptod = crypto.json()
        cryptoticker1 = cryptod[0]
        cryptoname1 = cryptoticker1['disSymbol']
        cryptoprice1 = cryptoticker1['close']
        cryptoratio1 = round(float(cryptoticker1['changeRatio'])*100,ndigits=2)
        cryptoticker2 = cryptod[1]
        cryptoname2 = cryptoticker2['disSymbol']
        cryptoprice2 = cryptoticker2['close']
        cryptoratio2 = round(float(cryptoticker2['changeRatio'])*100,ndigits=2)
        cryptoticker3 = cryptod[2]
        cryptoname3 = cryptoticker3['disSymbol']
        cryptoprice3 = cryptoticker3['close']
        cryptoratio3 = round(float(cryptoticker3['changeRatio'])*100,ndigits=2)
        cryptoticker4 = cryptod[3]
        cryptoname4 = cryptoticker4['disSymbol']
        cryptoprice4= cryptoticker4['close']
        cryptoratio4 = round(float(cryptoticker4['changeRatio'])*100,ndigits=2)
        cryptoticker5 = cryptod[4]
        cryptoname5 = cryptoticker5['disSymbol']
        cryptoprice5 = cryptoticker5['close']
        cryptoratio5 = round(float(cryptoticker5['changeRatio'])*100,ndigits=2)
        cryptoticker6 = cryptod[5]
        cryptoname6 = cryptoticker6['disSymbol']
        cryptoprice6 = cryptoticker6['close']
        cryptoratio6 = round(float(cryptoticker6['changeRatio'])*100,ndigits=2)
        cryptoticker7 = cryptod[6]
        cryptoname7 = cryptoticker7['disSymbol']
        cryptoprice7 = cryptoticker7['close']
        cryptoratio7 = round(float(cryptoticker7['changeRatio'])*100,ndigits=2)
        cryptoticker8 = cryptod[7]
        cryptoname8 = cryptoticker8['disSymbol']
        cryptoprice8 = cryptoticker8['close']
        cryptoratio8 = round(float(cryptoticker8['changeRatio'])*100,ndigits=2)
        cryptoticker9 = cryptod[8]
        cryptoname9 = cryptoticker9['disSymbol']
        cryptoprice9 = cryptoticker9['close']
        cryptoratio9 = round(float(cryptoticker9['changeRatio'])*100,ndigits=2)
        cryptoticker10 = cryptod[9]
        cryptoname10 = cryptoticker10['disSymbol']
        cryptoprice10 = cryptoticker10['close']
        cryptoratio10 = round(float(cryptoticker10['changeRatio'])*100,ndigits=2)
        
                
        options = [
                disnake.SelectOption(
                    label="✅Stream It",
                ),

        ]

        super().__init__(
            placeholder=f"{cryptoname1} ${cryptoprice1} {cryptoratio1}%",
            min_values=1,
            max_values=1,
            custom_id ="xxdxertxfx9",
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        pass

class ConfirmOrDenyDropdown(disnake.ui.Select):
    def __init__(self):
                
                
        options = [
                disnake.SelectOption(
                    label="✅",description="Yes daddy.",
                ),
                disnake.SelectOption(
                    label="❌",description="No daddy.",
                ),

        ]

        super().__init__(
            placeholder="🌟 🇦 🇬 🇦 🇮 🇳 ❓ 🌟",
            min_values=1,
            max_values=1,
            custom_id ="xxdxtxx9",
            options=options,
        ),

            

    async def callback(self, interaction: disnake.MessageInteraction):
        if self.values[0] == "✅":
            await interaction.response.defer(with_message=False, ephemeral=False)
            counter = 0
            while True:
                counter = counter + 1
                crypto = requests.get(url="https://quotes-gw.webullfintech.com/api/bgw/crypto/list")
                cryptod = crypto.json()
                cryptoticker1 = cryptod[0]
                cryptoname1 = cryptoticker1['disSymbol']
                cryptoprice1 = cryptoticker1['close']
                cryptoratio1 = round(float(cryptoticker1['changeRatio'])*100,ndigits=2)


                cryptoticker2 = cryptod[1]
                cryptoname2 = cryptoticker2['disSymbol']
                cryptoprice2 = cryptoticker2['close']
                cryptoratio2 = round(float(cryptoticker2['changeRatio'])*100,ndigits=2)
                cryptoticker3 = cryptod[2]
                cryptoname3 = cryptoticker3['disSymbol']
                cryptoprice3 = cryptoticker3['close']
                cryptoratio3 = round(float(cryptoticker3['changeRatio'])*100,ndigits=2)
                cryptoticker4 = cryptod[3]
                cryptoname4 = cryptoticker4['disSymbol']
                cryptoprice4= cryptoticker4['close']
                cryptoratio4 = round(float(cryptoticker4['changeRatio'])*100,ndigits=2)
                cryptoticker5 = cryptod[4]
                cryptoname5 = cryptoticker5['disSymbol']
                cryptoprice5 = cryptoticker5['close']
                cryptoratio5 = round(float(cryptoticker5['changeRatio'])*100,ndigits=2)
                cryptoticker6 = cryptod[5]
                cryptoname6 = cryptoticker6['disSymbol']
                cryptoprice6 = cryptoticker6['close']
                cryptoratio6 = round(float(cryptoticker6['changeRatio'])*100,ndigits=2)
                cryptoticker7 = cryptod[6]
                cryptoname7 = cryptoticker7['disSymbol']
                cryptoprice7 = cryptoticker7['close']
                cryptoratio7 = round(float(cryptoticker7['changeRatio'])*100,ndigits=2)
                cryptoticker8 = cryptod[7]
                cryptoname8 = cryptoticker8['disSymbol']
                cryptoprice8 = cryptoticker8['close']
                cryptoratio8 = round(float(cryptoticker8['changeRatio'])*100,ndigits=2)
                cryptoticker9 = cryptod[8]
                cryptoname9 = cryptoticker9['disSymbol']
                cryptoprice9 = cryptoticker9['close']
                cryptoratio9 = round(float(cryptoticker9['changeRatio'])*100,ndigits=2)
                cryptoticker10 = cryptod[9]
                cryptoname10 = cryptoticker10['disSymbol']
                cryptoprice10 = cryptoticker10['close']
                cryptoratio10 = round(float(cryptoticker10['changeRatio'])*100,ndigits=2)
                cryptoticker11 = cryptod[10]
                cryptoname11 = cryptoticker11['disSymbol']
                cryptoprice11 = cryptoticker11['close']
                cryptoratio11 = round(float(cryptoticker11['changeRatio'])*100,ndigits=2)
                cryptoticker12 = cryptod[11]
                cryptoname12 = cryptoticker12['disSymbol']
                cryptoprice12 = cryptoticker12['close']
                cryptoratio12 = round(float(cryptoticker12['changeRatio'])*100,ndigits=2)
                cryptoticker13 = cryptod[12]
                cryptoname13 = cryptoticker13['disSymbol']
                cryptoprice13 = cryptoticker13['close']
                cryptoratio13 = round(float(cryptoticker13['changeRatio'])*100,ndigits=2)
                cryptoticker14 = cryptod[13]
                cryptoname14 = cryptoticker14['disSymbol']
                cryptoprice14 = cryptoticker14['close']
                cryptoratio14 = round(float(cryptoticker14['changeRatio'])*100,ndigits=2)
                
                cryptoticker15 = cryptod[14]
                cryptoname15 = cryptoticker15['disSymbol']
                cryptoprice15 = cryptoticker15['close']
                cryptoratio15 = round(float(cryptoticker15['changeRatio'])*100,ndigits=2)

                cryptoticker16 = cryptod[15]
                cryptoname16 = cryptoticker16['disSymbol']
                cryptoprice16 = cryptoticker16['close']
                cryptoratio16 = round(float(cryptoticker15['changeRatio'])*100,ndigits=2)

                cryptoticker17 = cryptod[16]
                cryptoname17 = cryptoticker17['disSymbol']
                cryptoprice17 = cryptoticker17['close']
                cryptoratio17 = round(float(cryptoticker15['changeRatio'])*100,ndigits=2)

                cryptoticker18 = cryptod[17]
                cryptoname18 = cryptoticker18['disSymbol']
                cryptoprice18 = cryptoticker18['close']
                cryptoratio18 = round(float(cryptoticker15['changeRatio'])*100,ndigits=2)

                cryptoticker19 = cryptod[18]
                cryptoname19 = cryptoticker19['disSymbol']
                cryptoprice19 = cryptoticker19['close']
                cryptoratio19 = round(float(cryptoticker15['changeRatio'])*100,ndigits=2)

                cryptoticker20 = cryptod[19]
                cryptoname20 = cryptoticker20['disSymbol']
                cryptoprice20 = cryptoticker20['close']
                cryptoratio20 = round(float(cryptoticker15['changeRatio'])*100,ndigits=2)


                cryptoticker21 = cryptod[20]
                cryptoname21 = cryptoticker21['disSymbol']
                cryptoprice21 = cryptoticker21['close']
                cryptoratio21 = round(float(cryptoticker15['changeRatio'])*100,ndigits=2)
                em = disnake.Embed(title="Crypto Stream", description=f"```py\n Real Time Crypto```", color=disnake.Colour.random())
                if cryptoratio1 >= 0:
                    em.add_field(name=f"{cryptoname1}",value=f"```py\n🟢${cryptoprice1} {cryptoratio1}%```",inline=True)
                if cryptoratio1 <= 0:
                    em.remove_field(index=1)
                    em.add_field(name=f"{cryptoname1}",value=f"```py\n🔴${cryptoprice1} {cryptoratio1}%```",inline=True)
                
                if cryptoratio2 >= 0:
                    em.add_field(name=f"{cryptoname2}",value=f"```py\n🟢${cryptoprice2} {cryptoratio2}%```",inline=True)
                if cryptoratio2 <=0:
                    em.remove_field(index=2)
                    em.add_field(name=f"{cryptoname2}",value=f"```py\n🔴${cryptoprice2} {cryptoratio2}%```",inline=True)
                
                if cryptoratio3 >= 0:
                    em.add_field(name=f"{cryptoname3}",value=f"```py\n🟢${cryptoprice3} {cryptoratio3}%```",inline=True)
                if cryptoratio3 <=0:
                    em.remove_field(index=3)
                    em.add_field(name=f"{cryptoname3}",value=f"```py\n🔴${cryptoprice3} {cryptoratio3}%```",inline=True)

                if cryptoratio4 >= 0:
                    em.add_field(name=f"{cryptoname4}",value=f"```py\n🟢${cryptoprice4} {cryptoratio4}%```",inline=True)
                if cryptoratio4 <=0:
                    em.remove_field(index=4)
                    em.add_field(name=f"{cryptoname4}",value=f"```py\n🔴${cryptoprice4} {cryptoratio4}%```",inline=True)

                if cryptoratio5 >= 0:
                    em.add_field(name=f"{cryptoname5}",value=f"```py\n🟢${cryptoprice5} {cryptoratio5}%```",inline=True)
                if cryptoratio5 <=0:
                    em.remove_field(index=5)
                    em.add_field(name=f"{cryptoname5}",value=f"```py\n🔴${cryptoprice5} {cryptoratio5}%```",inline=True)

                if cryptoratio6 >= 0:
                    em.add_field(name=f"{cryptoname6}",value=f"```py\n🟢${cryptoprice6} {cryptoratio6}%```",inline=True)
                if cryptoratio6 <=0:
                    em.remove_field(index=6)
                    em.add_field(name=f"{cryptoname6}",value=f"```py\n🔴${cryptoprice6} {cryptoratio6}%```",inline=True)

                if cryptoratio7 >= 0:
                    em.add_field(name=f"{cryptoname7}",value=f"```py\n🟢${cryptoprice7} {cryptoratio7}%```",inline=True)
                if cryptoratio7 <=0:
                    em.remove_field(index=7)
                    em.add_field(name=f"{cryptoname7}",value=f"```py\n🔴${cryptoprice7} {cryptoratio7}%```",inline=True)

                if cryptoratio8 >= 0:
                    em.add_field(name=f"{cryptoname8}",value=f"```py\n🟢${cryptoprice8} {cryptoratio8}%```",inline=True)
                if cryptoratio8 <=0:
                    em.remove_field(index=8)
                    em.add_field(name=f"{cryptoname8}",value=f"```py\n🔴${cryptoprice8} {cryptoratio8}%```",inline=True)

                if cryptoratio9 >= 0:
                    em.add_field(name=f"{cryptoname8}",value=f"```py\n🟢${cryptoprice8} {cryptoratio8}%```",inline=True)
                if cryptoratio9 <=0:
                    em.remove_field(index=9)
                    em.add_field(name=f"{cryptoname8}",value=f"```py\n🔴${cryptoprice8} {cryptoratio8}%```",inline=True)

                if cryptoratio10 >= 0:
                    em.add_field(name=f"{cryptoname10}",value=f"```py\n🟢${cryptoprice8} {cryptoratio8}%```",inline=True)
                if cryptoratio10 <=0:
                    em.remove_field(index=10)
                    em.add_field(name=f"{cryptoname10}",value=f"```py\n🔴${cryptoprice8} {cryptoratio8}%```",inline=True)

                if cryptoratio11 >= 0:
                    em.add_field(name=f"{cryptoname11}",value=f"```py\n🟢${cryptoprice11} {cryptoratio11}%```",inline=True)
                if cryptoratio11 <=0:
                    em.remove_field(index=11)
                    em.add_field(name=f"{cryptoname11}",value=f"```py\n🔴${cryptoprice11} {cryptoratio11}%```",inline=True)

                if cryptoratio12 >= 0:
                    em.add_field(name=f"{cryptoname12}",value=f"```py\n🟢${cryptoprice12} {cryptoratio12}%```",inline=True)
                if cryptoratio12 <=0:
                    em.remove_field(index=12)
                    em.add_field(name=f"{cryptoname12}",value=f"```py\n🔴${cryptoprice12} {cryptoratio12}%```",inline=True)


                if cryptoratio13 >= 0:
                    em.add_field(name=f"{cryptoname13}",value=f"```py\n🟢${cryptoprice13} {cryptoratio13}%```",inline=True)
                if cryptoratio13 <=0:
                    em.remove_field(index=13)
                    em.add_field(name=f"{cryptoname13}",value=f"```py\n🔴${cryptoprice13} {cryptoratio13}%```",inline=True)

                if cryptoratio14 >= 0:
                    em.add_field(name=f"{cryptoname14}",value=f"```py\n🟢${cryptoprice14} {cryptoratio14}%```",inline=True)
                if cryptoratio14 <=0:
                    em.remove_field(index=14)
                    em.add_field(name=f"{cryptoname14}",value=f"```py\n🔴${cryptoprice14} {cryptoratio14}%```",inline=True)

                if cryptoratio15 >= 0:
                    em.add_field(name=f"{cryptoname15}",value=f"```py\n🟢${cryptoprice15} {cryptoratio15}%```",inline=True)
                if cryptoratio15 <=0:
                    em.remove_field(index=15)
                    em.add_field(name=f"{cryptoname15}",value=f"```py\n🔴${cryptoprice15} {cryptoratio15}%```",inline=True)

                if cryptoratio16 >= 0:
                    em.add_field(name=f"{cryptoname16}",value=f"```py\n🟢${cryptoprice16} {cryptoratio16}%```",inline=True)
                if cryptoratio16 <=0:
                    em.remove_field(index=16)
                    em.add_field(name=f"{cryptoname16}",value=f"```py\n🔴${cryptoprice16} {cryptoratio16}%```",inline=True)

                if cryptoratio17 >= 0:
                    em.add_field(name=f"{cryptoname17}",value=f"```py\n🟢${cryptoprice17} {cryptoratio17}%```",inline=True)
                if cryptoratio17 <=0:
                    em.remove_field(index=17)
                    em.add_field(name=f"{cryptoname17}",value=f"```py\n🔴${cryptoprice17} {cryptoratio17}%```",inline=True)

                if cryptoratio18 >= 0:
                    em.add_field(name=f"{cryptoname18}",value=f"```py\n🟢${cryptoprice18} {cryptoratio18}%```",inline=True)
                if cryptoratio18 <=0:
                    em.remove_field(index=18)
                    em.add_field(name=f"{cryptoname18}",value=f"```py\n🔴${cryptoprice18} {cryptoratio18}%```",inline=True)

                if cryptoratio19 >= 0:
                    em.add_field(name=f"{cryptoname19}",value=f"```py\n🟢${cryptoprice19} {cryptoratio19}%```",inline=True)
                if cryptoratio19 <=0:
                    em.remove_field(index=19)
                    em.add_field(name=f"{cryptoname19}",value=f"```py\n🔴${cryptoprice19} {cryptoratio19}%```",inline=True)

                if cryptoratio20 >= 0:
                    em.add_field(name=f"{cryptoname20}",value=f"```py\n🟢${cryptoprice20} {cryptoratio20}%```",inline=True)
                if cryptoratio20 <=0:
                    em.remove_field(index=20)
                    em.add_field(name=f"{cryptoname20}",value=f"```py\n🔴${cryptoprice20} {cryptoratio20}%```",inline=True)

                if cryptoratio21 >= 0:
                    em.add_field(name=f"{cryptoname21}",value=f"```py\n🟢${cryptoprice21} {cryptoratio21}%```",inline=True)
                if cryptoratio21 <=0:
                    em.remove_field(index=21)
                    em.add_field(name=f"{cryptoname21}",value=f"```py\n🔴${cryptoprice21} {cryptoratio21}%```",inline=True)
                await interaction.edit_original_message(embed=em)
                if counter == 75:
                    break
                else:
                    if self.values[0] == "❌":
                        await interaction.send("```py\nYou Just Turned the Streamer off.```")
                        break




class HelpViewDropdown1(disnake.ui.Select):
    def __init__(self):


        options = [
        disnake.SelectOption(label="FUDSTOP and Discord Help Videos"),
        disnake.SelectOption(label="DISCORD HELP - Saving Messages as Threads", description="```py\nLearn how to quickly save messages as Threads to make notes, remember something, or store important information.``` https://youtu.be/neWYeYpfpxY "),
        disnake.SelectOption(label="DISCORD HELP - Utilizing Discord Search"),
        disnake.SelectOption(label="DISCORD HELP - Turning on Developer Mode"),
        disnake.SelectOption(label="DISCORD HELP - The Hashtag Navigation System"),
        disnake.SelectOption(label="DISCORD HELP - Alphaquery and Play Screeners"),
        disnake.SelectOption(label="DISCORD HELP - Optimizing Your Discord Layout"),
        disnake.SelectOption(label="DISCORD HELP - How to Query Every Ticker in the Market"),
        disnake.SelectOption(label="DISCORD HELP - Navigation and Researching"),
        disnake.SelectOption(label="DISCORD HELP - How to Read Open Interest & Volume"),
        disnake.SelectOption(label="FUDSTOP Shorts - Spy Charting"),
        disnake.SelectOption(label="FUDSTOP Shorts - Alphaquery Tutorial"),
        disnake.SelectOption(label="FUDSTOP Shorts - Desktop Notifications Example"),
        disnake.SelectOption(label="FUDSTOP Shorts - Query Every Ticker in the Market by RSI")]
        super().__init__(
            placeholder="⚙️ 🇩 🇮 🇸 🇨 🇴 🇷 🇩 ⚙️",
            min_values=1,
            max_values=1,
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.defer(with_message=True)
        if self.values[0] == "DISCORD HELP - Saving Messages as Threads":
            await interaction.edit_original_message(f"```py\n{self.values[0]}``` https://youtu.be/neWYeYpfpxY")
        elif self.values[0] == "DISCORD HELP - Utilizing Discord Search":
            await interaction.edit_original_message(f"```py\nOur discord search feature is one of the most useful tools in this entire Discord. Not only can you **search for specific information from specific users but you can also search for 'dark pool data', 'golden sweep data', 'unusual options', and any other data you can think of.``` **EXAMPLE: \n ```py\nIn the search bar - you can filter results with the following methods:``` ```py\nfrom:<user>``` ```py\nhas:<embed> / <image> / <pin> / <video> / <mentions>``` ```py\nduring: <date>``` ```py\nbetween: <date 1> <date 2>``` ```py\nin: <channel>``` ```py\nbefore: <date> / after: <date>``` https://youtu.be/3CkRmT2SMNk")
        elif self.values[0] == "DISCORD HELP - Turning on Developer Mode":
            await interaction.edit_original_message(f"```py\nIt is absolutely essential that you turn on developer mode.** This will allow for the hashtag navigation system - the next video in this series.``` https://youtu.be/b52p7V4QTaM")
        elif self.values[0] == "DISCORD HELP - The Hashtag Navigation System":
            await interaction.edit_original_message(f"```py\nTyping '#' with developer mode on unlocks the hashtag navigation system.``` https://youtu.be/scRK6rZ_HWY")
        elif self.values[0] == "DISCORD HELP - Alphaquery Screeners":
            await interaction.edit_original_message(f"```py\n```py\n /fudstop``` ```py\ncommand It's that simple!```")
        elif self.values[0] == "DISCORD HELP - Optimizing Your Discord Layout":
            await interaction.edit_original_message(f"```py\nIn discord - you can mute the channels you don't want to hear info from, and then set-up notifications for the rest. Utilize the discord setup that bets fits your personal interests!``` https://youtu.be/xvlTy_GG10Y")
        elif self.values[0] == "DISCORD HELP - How to Query Every Ticker in the Market":
            await interaction.edit_original_message(f"```py\nA tutorial on how to query all tickers with Alphaquery.``` https://youtu.be/HLG-ol7bAkA")
        elif self.values[0] == "DISCORD HELP - Navigation and Researching":
            await interaction.edit_original_message(f"https://youtu.be/sHthg4RKMRY")
        elif self.values[0] == "DISCORD HELP - How to Read Open Interest & Volume":
            await interaction.edit_original_message(f"https://youtu.be/7laLsbo3-K8")
        elif self.values[0] == "FUDSTOP Shorts - Spy Charting":
            await interaction.edit_original_message(f"```py\nLearn how to chart for SUPPORT and RESISTANCE by using 'gaps'.``` https://youtu.be/Gucc9fkphbo")
        elif self.values[0] == "FUDSTOP Shorts - Alphaquery Tutorial":
            await interaction.edit_original_message(f"https://youtu.be/J-GfKWFSWuk")
        elif self.values[0] == "FUDSTOP Shorts - Desktop Notifications Example":
            await interaction.edit_original_message(f"https://youtu.be/zPG_hoQXAto")
        elif self.values[0] == "FUDSTOP Shorts - Query Every Ticker in the Market by RSI":
            await interaction.edit_original_message(f"https://youtu.be/2_Jb42gtz7I")





class HelpView1(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="FUDSTOP and Discord Help Videos", style=disnake.ButtonStyle.green, )
    async def discordhelpers( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        HelpView1.add_item(HelpViewDropdown1())
        await interaction.response.edit_message(view=self)

    @disnake.ui.button(label="Command Explanations🤖", style=disnake.ButtonStyle.blurple, )
    async def commands( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Command Explanations🤖", description="```py\nYou are now viewing Command Explanations🤖```", color=disnake.Colour.dark_green())
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())

    @disnake.ui.button(label="Sectors In Discord🌐", style=disnake.ButtonStyle.blurple, )
    async def sectors( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Sectors In Discord🌐", description="```py\nYou are now viewing 'Sectors in Discord'```", color=disnake.Colour.dark_green())
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= SectorView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def gohome( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="🏡️ Home Menu", description="```py\nYou just went 🏡 from the 'Help Menu'```", color=disnake.Colour.dark_green())
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=HelpView())



class LearnView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(LearningMainMenuDropdown())




    @disnake.ui.button(label="US Markets", style=disnake.ButtonStyle.green)
    async def usmarketse( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="US Markets - Provided by Webull", description="```py\nLearn about the United States markets - how they behave during 🐂bull and  🐻bear markets, and much more.```", color=disnake.Colour.red())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


        await interaction.response.edit_message(embed=embed, view=USMarketsView())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.grey, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message()
        embed = disnake.Embed(title="You just went 🔙 from the Learning Menu",color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


        await interaction.response.edit_message(embed=embed, )


        await interaction.response.edit_message(view=None)

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())


        await interaction.response.edit_message(embed=em, )

class USMarketsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="Things About A Bearish Market 🐻", style=disnake.ButtonStyle.red)
    async def analysis( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title=f"Things About A Bearish Market:", description="```py\nOn 6/16/2022, The Nasdaq index plunged to '10,646', losing over 20% from its recent peak. ```py\n When a major stock index loses value at such a significant level, this is considered a sign of a 'bear market'.```"
        "```py\nThere is no way to determine when exactly a bear market will end, but, this doesn't mean you can't protect your investments. \n While it's natural to feel concerned when you see your position in red, there are a few strategies you can take advantage of to survive a bearish market.```", color=disnake.Colour.dark_red())
        em.set_image(url="https://static01.nyt.com/images/2022/06/16/business/16stocks-promo/16stocks-promo-mediumSquareAt3X.png")


        await interaction.response.edit_message(embed=em, view=BearMarketView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color = disnake.Colour.dark_green())

        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="📌 Pin It", style=disnake.ButtonStyle.red, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You Just Pinned A Message! 📌",description=f"```py\nNow you can search for it with Discord search if needed!```", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(view=None)



class BearMarketView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80)

    @disnake.ui.button(label="What Is a Bearish Market? 🐻", style=disnake.ButtonStyle.red)
    async def whatis( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="What is a Bear Market?",description=f"```py\nWhen a stock index, for example, S&P 500, DJIA, or Nasdaq, sinks over 20% from its recent high, we enter a bear market. It gets its name from how a bear attacks its prey by swiping its paws down to express the downturn trend of the stock price. It should be noted that the 20% drop is merely a hypothetical measure; as of yet, there is no official definition of a bear market.``` ```py\nIf an index loses approximately 10%, or has been declining in the short-term (around 1-3 months), this is called 'a correction' instead of a 'bear market'.```", color=disnake.Colour.dark_red())


        await interaction.response.edit_message(embed=em)

    @disnake.ui.button(label="How long will a Bear Market last? 🐻", style=disnake.ButtonStyle.grey)
    async def howlong( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="How long will a Bear Market last? 🐻",description=f"```py\nSince there is no way to tell exactly when a bear market will end, **we can look at previous market patterns to learn more about how bearish markets have behaved in the past.```"
    "```py\nDo you know how many bearish and bullish markets have US market has seen in the past 70 years? \n\n Check the picture below:```")
        em.set_image(url="https://u1sweb.webullfinance.com/social/21c8c3b24cc546b1a468bda566908da0.png")
        em.add_field(name="The Last 70 Years", value="‌```py\nIn the past 70 years, we have witnessed 12 bull markets and 11 bear markets. \n\n We can tell a bear market lasts for different periods— one can last as long as 2.8 years, as it did in 1930, or can be as short as 3 months, as in 1988.``` ```py\n A bear market usually follows a bull market. History tells us the upward return in a bull tends to be higher than the downward loss in a bear. \n\n Think collectively and prospectively.```")


        await interaction.response.edit_message(embed=em)


    @disnake.ui.button(label="A Sign of Recovery 🧑", style=disnake.ButtonStyle.green)
    async def recovery( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="A Sign of Recovery🧑",description=f"```py\nThe economy follows a cycle. \n Economy growth is closely related to inflation (interest rate).``` ```py\nWhen the interest rate is up and companies pay higher borrowing costs to expand their business, economic growth slows down.** \n\n **When the interest rate is back to normal, consumer spending and investment increase, and the economy starts to boost. \n\n See the picture below for more information:```", color=disnake.Colour.dark_red())
        em.set_image(url="https://u1sweb.webullfinance.com/social/1aad712090a84b7883e5f87b8b0ee184.png")


        await interaction.response.edit_message(embed=em)


    @disnake.ui.button(label="Possible Causes of A Bear Market?", style=disnake.ButtonStyle.blurple)
    async def causes( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embeds =[

        disnake.Embed(title="Possible Causes of A Bear Market?",description=f"```py\nThere are too many factors to consider when we want to explain the reason for the bearish downturn. A few key points include:```"),
        disnake.Embed(title="1️⃣ Economic Slowdown:", description="```py\nFeds increased the interest rate by 0.75% points on 6/15/2022 with a strong mind to fight against high inflation. \n\n Interest rate increases and high inflation hurt stock market confidence.```"),
        disnake.Embed(title="2️⃣ Pandemic Illness:", description="```py\nCovid-19 outbreaks across the globe harm the economy by restraining consumer demand and increasing the healthcare system burden.```"),
        disnake.Embed(title="3️⃣ Geographic Wars:", description="```py\nThe Russian-Ukraine war in March caused oil prices to soar to a recent high.```"),
        disnake.Embed(title="4️⃣ Negative Sentiment: ", description="```py\nWhen investors, usually retail, see stock prices falling, they tend to worry and are more inclined to sell off their positions to stop losses. \n\n This will, in turn, push the market to fall further.```"),]
        options = [
        disnake.SelectOption(label="Home",  value=0, emoji="🏡"),
        disnake.SelectOption(label="Economic Slowdown:", value=1, emoji="1️⃣"),
        disnake.SelectOption(label="Pandemic Illness:", value=2, emoji="2️⃣"),
        disnake.SelectOption(label="Geographic Wars:", value=4, emoji="3️⃣"),
        disnake.SelectOption(label="Negative Sentiment:", value=5,emoji="4️⃣"),
            ]


    @disnake.ui.button(label="Bearish Market VS Recession", style=disnake.ButtonStyle.blurple)
    async def bearvsrecession( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Bearish Market VS Recession",description=f"```py\nWhile a bearish market is defined by a steep dip in the stock market, a recession is used to describe when the economy of a country reveals a slowdown of performance in terms of their GDP over two consecutive quarters. An economic slowdown is broader than a stock market slowdown.``` ```py\n```Not every bear market is accompanied by a recession, but typically they go hand in hand. \n Below are some possible strategies:```", color=disnake.Colour.dark_red()),
        disnake.Embed(title="1️⃣ Do Nothing", description="```py\nIf you aren't interested in taking large risks with your investments, it may be best for you to wait out the bear market. Likely, your investments may recover with the bullish market.```", color=disnake.Colour.dark_red()),
        disnake.Embed(title="2️⃣ Do Nothing", description="```py\nThis is a strategy commonly used by investors who buy certain securities at a fixed amount over consistent periods. For example, instead of buying a certain stock at $800 at one time, split the investment into 8, investing $100 each month. This can help to reduce the desire to time the mark lows.``` ```py\nThis strategy is commonly used by long-term investors.``` ```py\n \n\n By engaging this strategy, investors may need to give up higher returns in a bullish market. \n\n See the image below:```", color=disnake.Colour.dark_red()),
        disnake.Embed(title="3️⃣ Diversified Investing", description="```py\nThe golden rule of investing: don't put all your eggs into one basket. When the market isn't performing well, this is true tenfold. Diversifying your portfolio can potentially reduce loss, especially in a bearish market. With your investments spread out through various products and industries, you're less likely to feel as heavy an impact in such situations.```", color=disnake.Colour.dark_red()),
        disnake.Embed(title="4️⃣ Short", description="```py\nWhen an investor sells stocks they don't own by borrowing from security lenders, this is called short selling. Short sellers believe a stock price will fall or desire to hedge against potential downward price volatility in their securities. If a stock price drops, short sellers can buy at a lower price and turn a profit. \n\n If the price rises, they incur a loss. This loss can be unlimited.```", color=disnake.Colour.dark_red()),
        disnake.Embed(title="5️⃣ Inverse ETFs",description="```py\nFunds that use financial derivatives to reach returns opposite of a benchmark index are inverse ETFs. For example, if an index is down 5% today, the profit of its inverse ETF can be 5%.``` ```py\n If the index is up 5%, the loss will be 5%. This is usually used for short-term speculation or hedging in a vitality market. If you are holding a long position, inverse ETFs may not be the right investment for you.```", color=disnake.Colour.dark_red()),
        em.set_image(url="https://u1sweb.webullfinance.com/social/93e9d260ae9f4d4586a450995bbb913f.png"),


        await interaction.response.edit_message(embed=em, view=BearMarketView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color = disnake.Colour.dark_green())


        await interaction.response.edit_message( embed = em,)

    @disnake.ui.button(label="📌 Pin It", style=disnake.ButtonStyle.red, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You Just Pinned A Message! 📌", description=f"```py\nNow you can search for it with Discord search if needed!```", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(view=None)








class WebullTutView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(WebullTut())

class WebullTut(disnake.ui.Select):
    def __init__(self):
        options = [
            disnake.SelectOption( label=f"🌟🌟How to get Opra Real Time Data?"),
            disnake.SelectOption( label=f"🌟🌟Suck at options? PAPER TRADE DAMMIT!!"),
            disnake.SelectOption( label=f"🌟How to Customize the Options Chain?"),
            disnake.SelectOption( label=f"🌟How to use the Options Screener?"),
            disnake.SelectOption( label=f"🌟How to use the Options Calculator?"),
            disnake.SelectOption( label=f"🌟How do you use and Access the Options Alert?"),
            disnake.SelectOption( label=f"How to Find Companies with Corporate Actions?"),
            disnake.SelectOption( label=f"How to Check If a Specific Stock is Marginable?"),
            disnake.SelectOption( label=f"How to Set a TPSL Order?"),
            ]
        super().__init__(
            placeholder=f"🐂 🇼 🇪 🇧 🇺 🇱 🇱 🐂",
            min_values=1,
            max_values=1,
            custom_id=f"YEET",
            options= options)
    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "How to Find Companies with Corporate Actions?":
            em = disnake.Embed(title="Corporate Actions", description=f"```py\nThis GIF will help you locate this menu on the Webull APP.```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/abf2f175ba554a4ca71e4f4056c1bd78.gif")
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "How to Check If a Specific Stock is Marginable?":
            em = disnake.Embed(title="Check for Marginability", description=f"```py\n This GIF helps explain how to check if a stock is marginable or not.```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/5bb75b13231f46d9a83e4bcdf6e7a2e6.gif")
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "🌟🌟Suck at options? PAPER TRADE DAMMIT!!":
            em = disnake.Embed(title="Check for Marginability", description=f"```py\n This GIF shows you the practice EVERYONE SHOULD BE DOING. - PAPER F*C*ING TRADING!!```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/4efce45639484c37b8f73e966e9ff16e.gif")
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "How to Set a TPSL Order?":
            em = disnake.Embed(title="Set a Take Profit / Stop Loss Order", description=f"```py\n TPSL is an order type used to exit an existing position.```"

"```py\nA take-profit order will automatically close your positions once the target price is reached to lock in profits.```"
"py\n```Similarly, a stop-loss order will be triggered when the target price is reached to stop losses.```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/9d4d3538eac348e5ab94bfb4069331f2.png")
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "🌟How to Customize the Options Chain?":
            em = disnake.Embed(title="Customize the Options Chain", description=f"```py\n This GIF explains how to customize your options chain on the Webull APP.```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/621afcca067a4908b76dded3e0a4091b.gif")
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "🌟How to use the Options Screener?":
            em = disnake.Embed(title="The Webull Options Screener", description=f"```py\n This GIF explains how to find and use the Options Screener!```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/1ec02a22a67f4c2f9ee41d5dd164b563.gif")
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "🌟How do you use and Access the Options Alert?":
            em = disnake.Embed(title="Use and Access the Options Alert", description=f"```py\n'Stock Details page'>'Options'>'Option Contract Page'>'Alerts'.\n\nNote: Don’t forget to save your alert.```",color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/c70aabae1e9949d6951009c89a343389.gif")
            sleep(10)
            em.clear_fields()
            em.add_field(name="Check Existing Alerts", value="```py\nEntry: 'Menu'>'My Alert'>'Options'> 'Options Alert'```")
            em.set_image(url="https://u1sweb.webullfinance.com/social/69a8cfa5708943968c7f8cd9290a5bd9.gif")
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "🌟How to use the Options Calculator?":
            em = disnake.Embed(title="The Options Calculator", description=f"```py\nThe Options Calculator is a real-time, easy-to-use tool that helps investors calculate a contract’s theoretical value, price change, and changes in Greeks under selected parameters. To use the options calculator, you just need to select the calculation date, underlying price, implied volatility, and risk-free rate. The theoretical value and price changes will be calculated automatically based on selected parameters.```"
            "```py\nPlease note: We only support the calculation of single options. The calculated result is theoretical and for reference only. The theoretical price uses basic assumptions from the Black-Scholes Model, which may differ from the actual market price.```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/4d9b73b28478425e91497fcc09781d51.gif")
            await inter.response.edit_message(embed=em, view=TechView())
            sleep(10)
            em.clear_fields()
            em.add_field(name="🌟Access the Options Calculator", value="```py\nEntry: 'Options'>'Options Contract'>'Calculator'```")
            em.set_image(url="https://u1sweb.webullfinance.com/social/4d9b73b28478425e91497fcc09781d51.gif")
            await inter.response.edit_message(embed=em, view=TechView())
            sleep(5)
            em.clear_fields()
            sleep(2)
            em.set_image(url="https://u1sweb.webullfinance.com/social/5527a37d0faa4d26b4d01414a2dc18c7.gif")
            em.add_field(name="🌟‌Use the Options Calculator", value="```py\n1. Press and drag the blue lines to modify the calculation date with ease. You can manually adjust the date on the date column and modify other parameters such as the underlying price to view the theoretical value and price change.```", inline=False)
            await inter.response.edit_message(embed=em, view=TechView())
            sleep(2)
            em.add_field(name="Note:", value="```py\nThe current price change = (Theoretical value-the current price)/ Theoretical value```", inline=False)
            await inter.response.edit_message(embed=em, view=TechView())
            sleep(4)
            em.clear_fields()
            em.set_image(url="https://u1sweb.webullfinance.com/social/a8a2055b907a47e78dbd5226e6b6347c.gif")
            em.add_field(name="🌟Use the Options Calculator", value="```py\n2. You can select the different Greeks values to view the line changes.```")
            
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "🌟🌟How to get Opra Real Time Data?":
            em = disnake.Embed(title="Get OPRA Real Time Quotes", description=f"```py\nTHIS IS ABSOLUTELY ESSENTIAL!. Without it - you trade 15 minutes delayed. No bueno. Get the real time for mobile. It's free.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://u1sweb.webullfinance.com/social/f0ebf3a781e74df4b6d1a0eb855d5b01.gif")
            await inter.response.edit_message(embed=em, view=TechView())


class MainView2(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)


    @disnake.ui.button(label=f"Upcoming Dividend Tickers🔥", style= disnake.ButtonStyle.grey, row=0)
    async def button1(self, button: disnake.ui.Button, inter: disnake.AppCmdInter):
        em = disnake.Embed(title="Upcoming Dividend Tickers🔥", color = disnake.Colour.dark_gold())
        em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.add_field(name="-", value="```py\nDividend plays could be easy opportunities for puts. By design - puts gain value and calls LOSE value approaching the ex-div date and shortly thereafter. Always do your own research before entering into a trade.```")
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading")
        
        await inter.response.edit_message(embed = em,view=Dividend())

    @disnake.ui.button(label=f"Top 10 Daily Gainers 📈", style= disnake.ButtonStyle.green, row=0)
    async def button2(self, button: disnake.ui.Button, inter: disnake.AppCmdInter):
        em = disnake.Embed(title="Top 10 Daily Losers 📉", color = disnake.Colour.dark_gold())
        em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading")
        await inter.response.edit_message(embed=em)

    @disnake.ui.button(label=f"High FTD Tickers with t+35 Dates", style= disnake.ButtonStyle.blurple,row=1)
    async def button3(self, button: disnake.ui.Button, inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"High FTDs with T+35 dates", description=f"```py\nFTDs are a good way to find play opportunities. FTDs that have t+35 dates during short settlement windows = a good outlook!```")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading")
        await inter.response.edit_message(embed= em, view=FTDStocks())

    @disnake.ui.button(label=f"Top 10 Daily Losers 📉", style= disnake.ButtonStyle.grey, row=0)
    async def button4(self, button: disnake.ui.Button, inter: disnake.AppCmdInter):
        em = disnake.Embed(title="Top 10 Daily Losers 📉", color = disnake.Colour.dark_gold())
        em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
        await inter.response.edit_message(embed=em)

    @disnake.ui.button(label=f"Top 10 Most Active 🏃", style= disnake.ButtonStyle.blurple,row=1)
    async def button5(self, button: disnake.ui.Button, inter: disnake.AppCmdInter):
        em = disnake.Embed(title="Top 10 Most Active 🏃", color = disnake.Colour.dark_gold())
        em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
        await inter.response.edit_message(embed=em)



    @disnake.ui.button(label=f"Top Shorted By Float% 🔥", style= disnake.ButtonStyle.blurple,row=3)
    async def button7(self, button: disnake.ui.Button, inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"```py\nAs you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
        "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n Use the picture below to view the up and coming short windows. (left to right - each one is a window)```", color=disnake.Colour.dark_orange())
        em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
        await inter.response.edit_message(embed = em, view=ShortInterestView())

    @disnake.ui.button(label=f"Top 15 Lowest Float Tickers 🔥", style= disnake.ButtonStyle.green,row=3)
    async def button8(self, button: disnake.ui.Button, inter: disnake.AppCmdInter):
        em = disnake.Embed(title="Top 15 Lowest Float TIckers 🔥", color = disnake.Colour.dark_gold())
        em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading")
        await inter.response.edit_message(embed = em, view=LowFloatView())












class MainMenu(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="🅰️LPHAQUERY", url=f"https://www.alphaquery.com/saved-screens"))
        self.add_item(LinksDropdown())
        self.add_item(LearningMainMenuDropdown())
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="🟢 Core Calls".center(1, " "), url="https://www.alphaquery.com/stock-screener/600010230?run=1"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="🔴 Core Puts".center(1, " "), url="https://www.alphaquery.com/stock-screener/600010229?run=1"))
    
    @disnake.ui.button(label="🪙 Opportunity", style=disnake.ButtonStyle.blurple)
    async def opportunity(self, butaton: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title="🪙 Opportunity", color=disnake.Colour.dark_orange())
        await interaction.response.edit_message(view=OpportunitiesView())


    @disnake.ui.button(label="🧠🇱 🇪 🇦 🇷 🇳", style=disnake.ButtonStyle.red, row=2)
    async def learn( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        view = disnake.ui.View()
        view.add_item(LearningMainMenuDropdown())
        view.add_item(TechDropdown())
        view.add_item(TechAnalysisSelect())
        embed = disnake.Embed(title="🧠 Select a category from the dropdown!", color=disnake.Colour.fuchsia())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer( text="Implemented by Fudstop Trading")
        await interaction.response.edit_message(embed=embed)


    @disnake.ui.button(label="⭕🇨 🇱 🇴 🇸 🇪", style=disnake.ButtonStyle.red, row=2)
    async def close( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="⭕ FUDSTOP Application Closed", color=disnake.Colour.dark_red())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")

        embed.set_footer( text="Implemented by Fudstop Trading")
        await interaction.response.edit_message(embed=embed, view=None)

    @disnake.ui.button(label="🇦  🇳  🇦  🇱 💡 🇾  🇸  🇮  🇸", style=disnake.ButtonStyle.green, row=2)
    async def trade( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        view = disnake.ui.View()
        view.add_item(TechDropdown())
        view.add_item(TechDropdown2())
       
        embed = disnake.Embed(title="🧠 Select a category from the dropdown!", color=disnake.Colour.fuchsia())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer( text="Implemented by Fudstop Trading")
        await interaction.response.edit_message(embed=embed, view=DropdownView())



class MainView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        self.add_item(Dropdown2())
        self.add_item(Dropdown3())
        self.add_item(WebullDropdown())        
        self.add_item(LearningMainMenuDropdown())
    


    @disnake.ui.button(
        label="➡️",
        style=disnake.ButtonStyle.red,
        row=2)
    async def homers(
        self,
        button: disnake.ui.Button,
        interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title="🔄",
        description=f"```py\nRise above the narrative.```",
        color = disnake.Colour.dark_gold())
        em.set_image(
            url="https://media.discordapp.net/attachments"
            "/896207280117264434/1018632105477013554/"
            "3235bb_fedadfcf38994349b7fa98fbf3f6f372_mv2.gif")


        await interaction.response.edit_message(embed=em, view=MainView())

    @disnake.ui.button(label="🔄", style=disnake.ButtonStyle.blurple, row=2)
    async def homer( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🔄",description=f"```py\nYou just switched from 'LEARN' to 'TRADE'.```", color = disnake.Colour.dark_gold())
        em.add_field(name="Navigation", value="To naviate on the **TRADE SIDE** simply use the buttons below.")



        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="⬅️", style=disnake.ButtonStyle.red, row=2)
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="⬅️",description=f"```py\nRise above the narrative.```", color = disnake.Colour.dark_gold())
        em.set_image(url="https://media.discordapp.net/attachments/896207280117264434/1018632105477013554/3235bb_fedadfcf38994349b7fa98fbf3f6f372_mv2.gif")


        await interaction.response.edit_message(embed=em, view=MainView())

    @disnake.ui.button(label="⭕", style=disnake.ButtonStyle.red, row=2)
    async def bye( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🔄",description=f"```py\nYou just switched from LEARN to TRADE.```", color = disnake.Colour.dark_gold())
        em.add_field(name="Navigation", value="To naviate on the **TRADE SIDE** simply use the buttons below.")



        await interaction.response.edit_message(embed=em, view=None)

class ToolsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="Useful Links🔗", style=ButtonStyle.blurple)
    async def datalinks( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title = "Data Links🔗", color = disnake.Colour.random())
        embed.add_field(name="**Off Exchange Short Sale Volume",value="https://www.finra.org/finra-data/browse-catalog/short-sale-volume-data ```This is FINRA's TRF (trade reporting facility) off exchange short volume - reported daily. ```", inline=True)
        embed.add_field(name="**Fintel - 13F information & SEC Edgar for Verification",value="`To keep up to date with institutional holdings. Follow the money.`https://fintel.io/so/us/gme `OR FROM THE SOURCE` https://www.sec.gov/edgar/search/", inline=True)
        embed.add_field(name="**The Federal Register - Dodd Frank Act",value="```Stay up to date with SEC Filings that are posted daily on public inspection.` https://www.federalregister.gov/dodd-frank-wall-steet-reform", inline=True)
        embed.add_field(name="**DTCC Filings",value="```Stay up to date with filings out of DTC, NSCC, and the FICC.` https://www.dtcc.com/legal/sec-rule-filings", inline=True)
        embed.add_field(name="**DTCC Important Notices**",value="`Stay up to date with relevant important notices that affect all participants.` https://www.dtcc.com/legal/important-notices", inline=False)
        embed.add_field(name="**OCC Filings**",value="```Stay up to date with filings that come out of the Options Clearing Corporation.` https://www.sec.gov/rules/sro/occ.htm", inline=False)
        embed.add_field(name="**US Treasury Balance**",value="```Stay up to date with the US Treasury's balance.` https://fiscaldata.treasury.gov/datasets/daily-treasury-statement/operating-cash-balance", inline=False)
        embed.add_field(name="**Reverse Repo**",value="```Stay up to date with the historic repo-suave numbers that come out at 12:15 CST every day.` https://www.newyorkfed.org/markets/data-hub", inline=False)
        embed.add_field(name="**MMF/Reverse Repo Data**",value="https://www.financialresearch.gov/money-market-funds/ ```This is the Money Market Fund Monitor from the Office of Financial Research. View counterparties to the fed / repo numbers as well as FICC repos.", inline=False)
        embed.add_field(name="**CBOE Market Share Graph**",value="https://www.cboe.com/us/equities/market_statistics/venue/ ```View CBOE's Market Share graph and look at volume straight from the Securities Information Processor from all three Tapes. Compare market share from all venus including the ADF.", inline=False)
        embed.add_field(name="**FINRA OTC Data**",value="https://otctransparency.finra.org/otctransparency/AtsIssueData ```FINRA is now reporting OTC data as well as Alternative Trading Systems data on a weekly basis. View OTC trades, ATS data, and more. ```", inline=False)
        embed.add_field(name="**Systematic Internaliser Data**",value="https://www.esma.europa.eu/data-systematic-internaliser-calculations ```View the Systematic Internaliser data from the ESMA in Europe as required my MiFID II regulations. Systematic Internaliser data is represented in Euros. ```", inline=False)
        embed.add_field(name="**FTDs**",value="https://www.sec.gov/data/foiadocsfailsdatahtm ```View the SEC Failure to Deliver data that's reported twice monthly.", inline=False)
        embed.add_field(name="**NYSE Master FTP Index**",value="https://ftp.nyxdata.com/ShortData/NYSEshvol/NYSEshvol2021/ ```View the Master File of NYSE Data from all subsidararies. ```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=UsefulLinksView())

    @disnake.ui.button(label="Trader Tools🛠️", style=ButtonStyle.blurple)
    async def tradertools( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title ="Trader Tools🛠️", color = disnake.Colour.random())
        embed.add_field(name="**TOOLS!**",value='Here is a plethora of tools to use to make life easier.', inline=False) 
        embed.add_field(name="**AlphaQuery**", value="If you're a member - this tool is available to you! Be sure to visit for a turorial. https://www.alphaquery.com/table", inline=False)
        embed.add_field(name="**OpenBB Terminal**", value="This terminal is available for everyone to use. To use it - download the terminal from here: https://github.com/OpenBB-finance/OpenBBTerminal/releases/download/v1.3.0/OpenBB.Terminal.Setup.exe", inline=False)
        embed.add_field(name="**Option Strategy Creator**", value="This is an amazing tool that helps you build option strategies and view the P/L charts. Great for learning / experimenting: https://optioncreator.com/", inline=False)
        embed.add_field(name="**Difference Checker**", value="Want to compare documents side by side? See what's changed by utilizing the Difference Checker: https://www.diffchecker.com/", inline=False)
        embed.add_field(name="**Social Grep**", value="Scrape and Export Reddit Data from any subreddit to guage psyop levels.` https://www.socialgrep.com", inline=False)
        embed.add_field(name="**Subreddit Stats**", value="Compare subreddits, view top comments, posts, and guage authenticity with this tool. https://www.subredditstats.com", inline=False)
        embed.add_field(name="**Mention Map**", value="Want to see twitter connections? Mention Map allows you to see connections based on retweets / mentions. Great for detecting collusion. https://mentionmapp.com/", inline=False)
        embed.add_field(name="**Social Blade**", value="Social Blade is a great tool to see just how much YouTubers and Twitter Personalities are making from ad revenue. https://www.socialblade.com", inline=False)
        embed.add_field(name="**SEC Interactive FTD Chart**", value="Use this chart to visualize FTDs as they are released from SEC.GOV.: https://sec.report/fails.php?", inline=False)
        embed.add_field(name="Discord Search**", value="If you're looking for any important information pertaining to the group - USE THE DISCORD SEARCH!", inline=False)
        embed.add_field(name="**Market Maker Signals**", value="Learn the market maker signals which happen on the level 2 order book. https://otc.financial/list-of-market-maker-signals/#:~:text=Market%20maker%20signals%20are%20the,of%20a%20company's%20share%20price.", inline=False)
        embed.add_field(name="**Options Profit Calculator**",value='https://www.optionsprofitcalculator.com/', inline=False)
        embed.add_field(name="**Black Scholes Calculator**", value="Learn how to price your options contracts by using the Black Scholes Calculator`: https://www.optionseducation.org/toolsoptionquotes/optionscalculator", inline=False)
        embed.add_field(name="**Gitmind Mind Maps**", value="Down a rabbit hole? Use Gitmind to make custom mind-maps:` https://gitmind.com/", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=TraderToolsView())

    @disnake.ui.button(label="Market Glossary📖", style=ButtonStyle.blurple)
    async def marketgloss( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title = "Market Glossary📖", color = disnake.Colour.random())
        await interaction.response.edit_message(embed=embed, view=MarketGlossaryView())


    @disnake.ui.button(label="🏡", style=ButtonStyle.green, )
    async def home( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=MainView())

    @disnake.ui.button(label="🔙", style=ButtonStyle.blurple, )
    async def goback( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=ToolsView())

    @disnake.ui.button(label="📌", style=ButtonStyle.red, )
    async def pin( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=None)

class TraderToolsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.gitmind.com/", label="GITMIND Mind Maps"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.optionseducation.org/toolsoptionquotes/optionscalculator", label="Black Scholes Calculator"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.github.com/OpenBB-finance/OpenBBTerminal/releases/download/v1.3.0/OpenBB.Terminal.Setup.exe", label="OpenBB Terminal (exe)"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.optioncreator.com/", label="Option Strategy Creator"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.diffchecker.com/", label="Difference Checker"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.socialgrep.com", label="Social Data"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.subredditstats.com", label="Subreddit Stats"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.mentionmapp.com/", label="Mention Maps - Twitter"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.socialblade.com", label="Social Blade"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.otc.financial/list-of-market-maker-signals/#:~:text=Market%20maker%20signals%20are%20the,of%20a%20company's%20share%20price.", label="Market Maker Signals"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.sec.report/fails.php?", label="SEC Interactive FTD Chart"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.optionsprofitcalculator.com/", label="Options Profit Calculator"))
    @disnake.ui.button(label="Calendars📆", style=disnake.ButtonStyle.red)
    async def calendar(
        self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title = "FUDSTOP", color = disnake.Colour.random())
        embed.add_field(name="**FINRA Consolidated Audit Trail",value="The CAT System, or Consolidated Audit Trail, is a long-time effort by the industry to be able to track the life-cycle of a security from beginning to end. This SYSTEM has been in development for over a decade, and GO-LIVE production is scheduled for late July. \n\n Keep up with their schedule and monitor any changes by utilizing this calendar. \n\n https://www.catnmsplan.com/timeline \n ")
        embed.add_field(name="**Federal Reserve FOMC Schedule",value="You ALWAYS want to make sure you keep up with the Fed's schedule. Most of this narrative rendering stuff is scheduled ahead of time. \n\n https://www.federalreserve.gov/monetarypolicy/fomccalendars.htm \n")
        embed.add_field(name="**Finra Short Interest Reporting Dates",value="FINRA Short Interest Reporting dates are critical. \n\n Keep in mind: The settlement dates provided have up to 2 business days following the settlement date to deliver. \n\n https://www.finra.org/filing-reporting/regulatory-filing-systems/short-interest \n")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=ToolsView())

    @disnake.ui.button(label="Cited Works📰", style=disnake.ButtonStyle.gray)
    async def citedworks( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Cited Works📰", description= "Cited works are a **critical** component of my financial journey. A lot of my understanding from various market topics stems from the seveal cited works that I have read. They contain immense insider knowledge of past market functionality that you can utilize to guage the current day markets.", color=disnake.Colour.dark_teal())
        embed.set_image(url="https://media.giphy.com/media/3umq6srnOzloPRsrgj/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed = embed, view=CitedView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Home Menu 🏡", description= "Welcome to the FUDSTOP Trading Market Application. \n\n Simply use the buttons below to Navigate.", color=disnake.Colour.dark_teal())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=MainView())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Tools 🛠️", description="You just went 🔙 from the **Cited Works Menu** and are now viewing the Tools 🛠️")
        embed.add_field(name="Navigation Help:", value="You just went 🔙 from the **Cited Works Menu** and are now viewing the Tools 🛠️", inline=True)
        embed.add_field(name="🏡", value="Main Menu", inline=True)
        embed.add_field(name="🔙", value="Previous", inline=True)
        embed.set_image(url="https://media.giphy.com/media/3umq6srnOzloPRsrgj/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=ToolsView())



class MarketGlossaryView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @disnake.ui.button(label="SEC Forms📖", style=disnake.ButtonStyle.red )
    async def secform( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        await interaction.response.edit_message(view=SECFormView())


    @disnake.ui.button(label="Dictionary📚", style=disnake.ButtonStyle.red )
    async def dict( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):  
        embed = disnake.Embed(title="Dictionary📚", description="Dictionary📚 - Learn market terms.") 
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=MarketGlossaryView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="🏡️ Home Menu", description="You just went 🏡 from the **Market Glossary**")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=MainView())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Tools 🛠️", description="You just went 🔙 from the **Market Glossary Menu** and are now viewing the Tools 🛠️")
        embed.add_field(name="🏡", value="Main Menu", inline=True)
        embed.add_field(name="🔙", value="Previous", inline=True)
        embed.set_image(url="https://media.giphy.com/media/3umq6srnOzloPRsrgj/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=ToolsView())

class FUDSTOPView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="Active Stock Tickers", style=disnake.ButtonStyle.blurple, )
    async def active( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/active", description = "```py\nmReturns the most active tickers for the day. Can easily plug into excel!```",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/cvChp7P/active.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())


        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Agency Mortgage Backed Securities - FED", style=disnake.ButtonStyle.blurple, )
    async def ambs( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/ambs", description = "```py\n/ambs lists the recent Mortgage Backed Security Transactions out of the FED. Your options are: 'all'  'sales' 'purchases' 'rolls' 'swaps'```",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/Wk3vpdB/AMBS.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())


    @disnake.ui.button(label="Criminals", style=disnake.ButtonStyle.grey, )
    async def criminals( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/criminals",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media0.giphy.com/media/EnOeJR5MUwR5tYol0m/giphy.gif?cid=790b7611790ee13ce59f1ac474aff94fb98af687496d8e9f&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Analyst Consensus", style=disnake.ButtonStyle.green, )
    async def analystconsensus( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/xHj1q29FBK3u9ZkYHp/giphy.gif?cid=790b761116c88281f98d49dc7617c98071f8a430efc2968a&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())


    @disnake.ui.button(label="Check Moving Averages (50ma and 200ma - DAILY)", style=disnake.ButtonStyle.grey, )
    async def checkmas( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/check_moving_averages",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media4.giphy.com/media/MA8oZhZLpsf04Y4cQN/giphy.gif?cid=790b7611e6c681d5b36d1eb4798ac05070b00cbd877df588&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Check all Major Indexes", style=disnake.ButtonStyle.blurple, )
    async def checkindex( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/check_indexes",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media4.giphy.com/media/wfzmlEV4joHdppVoPO/giphy.gif?cid=790b7611970dfa8cf41f4fd298c2ae6e656539f60b5f2aca&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Check Price Performance", style=disnake.ButtonStyle.grey, )
    async def check( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/check",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media1.giphy.com/media/m8xCbh80CfLjimDrv8/giphy.gif?cid=790b7611150592dcfa4af5fd09c6c086f7dde4149db4ba84&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Earnings", style=disnake.ButtonStyle.green, )
    async def earnings( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/earnings",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://giphy.com/gifs/RswiJjpckvTTi8fdRa")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Earnings Upcoming", style=disnake.ButtonStyle.blurple )
    async def earningsupcoming( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/earnings_upcoming <date>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/YcGDyz8/earnings-UPCOMING.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())


    @disnake.ui.button(label="Enviornmental, Social, and Governance Risk", style=disnake.ButtonStyle.grey, )
    async def esgrisk( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/IoWcUqVy8KlNnZerHn/giphy.gif?cid=790b7611ba41e28ad4b2675b57748008c8446a6b6d14a6d2&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Enviornmental, Social, and Governance Metrics", style=disnake.ButtonStyle.green, )
    async def esg( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media1.giphy.com/media/khvcU2xXGdKI3jw3pk/giphy.gif?cid=790b7611bfadbf75e499ede5e5e2f14197b47255a1312869&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Dow Jones List", style=disnake.ButtonStyle.grey, )
    async def dowjones( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/dowjones",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/7w3LnCN2lvpRQlBlcG/giphy.gif?cid=790b7611e87a8c7453800751137e56a5848d3641970e030e&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Realtime Top Gainers / Losers(dropGainers)", style=disnake.ButtonStyle.blurple, )
    async def topgain( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/direction <direction> <gainer/loser>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media0.giphy.com/media/vkqzRijPaYex4vnlcs/giphy.gif?cid=790b76110a1d363d8e7c4aa338be43c1574600bbb4c0c4ab&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Daily Ratings", style=disnake.ButtonStyle.blurple, )
    async def dailyrating( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/hoLAIJForW8v9L5pMy/giphy.gif?cid=790b761126c0d861142b53cfb6bcc1f18263e412ab46d699&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Company Notes Due", style=disnake.ButtonStyle.blurple, )
    async def companynotes( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/company_notes_due",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/5M31qN7/COMPANY-notes-due.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="ETF Ticker List", style=disnake.ButtonStyle.green, )
    async def etflist( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/etf_holders",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/wz2Hb5K/etf-holders.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Evaluate A Company", style=disnake.ButtonStyle.grey, )
    async def evaluate( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/evaluate",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/pXj2x8p/evaluate.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Listed Exchange", style=disnake.ButtonStyle.grey, )
    async def exchange( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/exchange",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/BqBt9KD/exchange.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Fails to Deliver - Excel Ready", style=disnake.ButtonStyle.green, )
    async def fails( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fails",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/ZMfLsnG/fails.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Fair Value - Industry", style=disnake.ButtonStyle.grey, )
    async def fair_value( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fair_value",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/ZMfLsnG/fails.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="52 week high / low + Dates", style=disnake.ButtonStyle.blurple)
    async def fiftytwo( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fifty_two",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/wdWsFfq/fiftytwo.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Page 2 -->", style=disnake.ButtonStyle.red)
    async def page2( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fifty_two",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/wdWsFfq/fiftytwo.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media2.giphy.com/media/bVPcXheO9jDBYP2zXH/giphy.gif?cid=790b76116c18f3195489b517ff7ebc22a6fa6fa904ac40b1&rid=giphy.gif&ct=g")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed = em, view=MainView())


    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=FUDSTOPView)
class FUDSTOPView2(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="Financial Score", style=disnake.ButtonStyle.blurple, )
    async def fiftytwo( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/financial_score",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/pKsWdps/financialscore.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media2.giphy.com/media/bVPcXheO9jDBYP2zXH/giphy.gif?cid=790b76116c18f3195489b517ff7ebc22a6fa6fa904ac40b1&rid=giphy.gif&ct=g")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="FINVIZ Market Screener", style=disnake.ButtonStyle.blurple, )
    async def finscreen( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/finscreen",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/F3L9gQB/finscreen.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media2.giphy.com/media/bVPcXheO9jDBYP2zXH/giphy.gif?cid=790b76116c18f3195489b517ff7ebc22a6fa6fa904ac40b1&rid=giphy.gif&ct=g")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="Float Ownership Check", style=disnake.ButtonStyle.blurple, )
    async def floats( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/float <ticker>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="Failure to Deliver Interactive Chart", style=disnake.ButtonStyle.blurple, )
    async def ftds( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/ftds <ticker>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media.discordapp.net/attachments/1009552305869303828/1009556647934439505/unknown.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="Futures Maps", style=disnake.ButtonStyle.blurple, )
    async def futures( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/futures <map>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media.discordapp.net/attachments/1009552305869303828/1009556927841308723/unknown.png?width=1283&height=610")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="FinViz top Shorts with 30%+ Shorted", style=disnake.ButtonStyle.blurple, )
    async def topshorts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/float",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media.discordapp.net/attachments/1009552305869303828/1009557120372449450/unknown.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")

        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=MainView())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=BotsView)



class NotesView(disnake.ui.View, disnake.ui.Button):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="S&P500 Rebalancing Information🖌️", style=disnake.ButtonStyle.red, )
    async def note1( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="S&P500 Rebalancing Information🖌️", description="```py\nIndex Maintenance Rebalancing Index membership is reviewed quarterly. Rebalancing occurs after the close on the \n\n third Friday of January, April, July, and October.``` ```py\nThe reference date for additions to and deletions from the index is\n\n 'five business days prior to the first Friday of the rebalancing month.'``` \n\n **Additions.** \n\n ```py\nAdditions occur only at the quarterly rebalancing dates. There are no intra-period additions.```**Deletions.** ```py\nA constituent is deleted intra-period if it is called or undergoes mandatory conversion or redemption.  \n Index constituents are also deleted if the constituents no longer meet eligibility requirements at the quarterly rebalancing.  \n The Index Committee exercises discretion in cases where the credit worthiness of an issue is significantly downgraded or downgraded to junk status.```")
        embed.set_image(url="https://i.ibb.co/MBzG1BN/SP500-REBALANCE.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NotesView())

    @disnake.ui.button(label="MacroEconomic Policy Since Covid19🖌️", style=disnake.ButtonStyle.blurple, )
    async def note2( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Macro Economics and the Markets", description="```py\nThere have been several policy decisions made since the onset of COVID19 that are re-shaping the core structure of Financial Markets. This note the policy effects on Global Financial Markets.```")
        embed.set_image(url="https://media.giphy.com/media/3umq6srnOzloPRsrgj/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NotesView())

    @disnake.ui.button(label="China VS the USA🖌️", style=disnake.ButtonStyle.blurple, )
    async def note3( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="China VS The USA", description="```py\nChina is expected to outpace the United States in Gross Domestic Product by 2028.```")
        embed.set_image(url="https://media.discordapp.net/attachments/896207280117264434/955135923530629190/816.png?width=789&height=629")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NotesView())

    @disnake.ui.button(label="Trade Halt Codes🖌️", style=disnake.ButtonStyle.blurple, )
    async def note4( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Trade Halt Codes", description=
"```py\nT1Halt - News Pending"
"Trading is halted pending the release of material news.```"
"```py\nT2Halt - News Released"
"The news has begun the dissemination process through a Regulation FD compliant method(s).```"
"```py\nT5Single Stock Trading Pause in Effect"
"Trading has been paused by NASDAQ due to a 10% or more price move in the security in a five-minute period.```"
"```py\nT6Halt - Extraordinary Market Activity"
"Trading is halted when extraordinary market activity in the security is occurring; NASDAQ determines that such extraordinary market activity is likely to have a material effect on the market for that security; and 1) NASDAQ believes that such extraordinary market activity is caused by the misuse or malfunction of an electronic quotation, communication, reporting or execution system operated by or linked to NASDAQ; or 2) after consultation with either a national securities exchange trading the security on an unlisted trading privileges basis or a non-NASDAQ FINRA facility trading the security, NASDAQ believes such extraordinary market activity is caused by the misuse or malfunction of an electronic quotation, communication, reporting or execution system operated by or linked to such national securities exchange or non- NASDAQ FINRA facility.```"
"```py\nT8Halt - Exchange-Traded-Fund (ETF) "
"Trading is halted in an ETF due to the consideration of, among other factors: 1) the extent to which trading has ceased in the underlying security(s); 2) whether trading has been halted or suspended in the primary market(s) for any combination of underlying securities accounting for 20% or more of the applicable current index group value; 3) the presence of other unusual conditions or circumstances deemed to be detrimental to the maintenance of a fair and orderly market.```"
"```py\nT12Halt - Additional Information Requested by NASDAQ"
"Trading is halted pending receipt of additional information requested by NASDAQ. \n\n"
"H4Halt - Non-compliance"
"Trading is halted due to the company's non-compliance with NASDAQ listing requirements.```"
"```py\nH9Halt - Not Current"
"Trading is halted because the company is not current in its required filings. ```"
"```py\nH10Halt - SEC Trading Suspension"
"The Securities and Exchange Commission has suspended trading in this stock.```"
"```py\nH11Halt - Regulatory Concern \n\n"
"Trading is halted in conjunction with another exchange or market for regulatory reasons.```"
"```py\nO1Operations Halt, Contact Market Operations```"
"```py\nIPO1IPO Issue not yet Trading```"
"```py\nM1Corporate Action```"
"```py\nM2Quotation Not Available```"
"```py\nVolatility Trading Pause```"
"```py\nLUDSVolatility Trading Pause - Straddle Condition```"
"```py\nMWC1Market Wide Circuit Breaker Halt - Level 1```"
"```py\nMWC2Market Wide Circuit Breaker Halt - Level 2```"
"```py\nMWC3Market Wide Circuit Breaker Halt - Level 3```"
"```py\nMWC0Market Wide Circuit Breaker Halt - Carry over from previous day```", color=disnake.Colour.random())
        embed.add_field(name="Codes Continued", value=
"```py\nT7Single Stock Trading Pause/Quotation-Only Period"
"Quotations have resumed for affected security, but trading remains paused.```"
"```py\nR4Qualifications Issues Reviewed/Resolved; Quotations/Trading to Resume```"
"```py\nR9Filing Requirements Satisfied/Resolved; Quotations/Trading To Resume```"
"```py\nC3Issuer News Not Forthcoming; Quotations/Trading To Resume```"
"```py\nC4Qualifications Halt ended; maint. req. met; Resume```"
"```py\nC9Qualifications Halt Concluded; Filings Met; Quotes/Trades To Resume```"
"```py\nC11Trade Halt Concluded By Other Regulatory Auth,; Quotes/Trades Resume```", inline=False)
        embed.add_field(name="Codes Continued", value="```py\nT3News and Resumption Times"
"The news has been fully disseminated through a Regulation FD compliant method(s); or NASDAQ has determined either that system misuse or malfunction that caused extraordinary market activity will no longer have a material effect on the market for the security or that system misuse or malfunction is not the cause of the extraordinary market activity; or NASDAQ has determined the conditions which led to a halt in an Exchange-Traded Fund are no longer present. Two times will be displayed: (1) the time when market participants can enter quotations, followed by (2) the time the security will be released for trading. All trade halt and resumption times will be posted in HH:MM:SS format.```"
"```py\nR1New Issue Available```"
"```py\nR2Issue Available```"
"```py\nIPOQIPO security released for quotation```"
"```py\nIPOEIPO security - positioning window extension```", inline=False)
        embed.add_field(name="Codes Continued", value=
"```py\nMWCQMarket Wide Circuit Breaker Resumption ```"
"```py\nMVolatility Trading Pause```"
"```py\nTrading has been paused in an Exchange-Listed issue (Market Category Code = C)```"
"```py\nDSecurity deletion from NASDAQ / CQS```"
"```py\nSpaceReason Not Available```"
"```py\nNotesHalt codes H4 and H9 may be activated in situations where a SEC trading suspension is terminated and a NASDAQ trading halt is terminated, but the company in either instance is not in compliance with specific NASDAQ requirements. Any questions related to a specific trading halt or to the trading halts codes should be directed to MarketWatch at 800.537.3929 or 301.978.8500.```", inline=False)
        embed.set_image(url="https://media.giphy.com/media/WleueIhxWsV3GQJUaT/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NotesView())


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=MainView())

class SECFormView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @disnake.ui.button(label="SEC Form ", style=ButtonStyle.red )
    async def secform( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title="Sec Form 1", description="**APPLICATION FOR, AND AMENDMENTS TO APPLICATION FOR, REGISTRATION AS A NATIONAL SECURITIES EXCHANGE OR EXEMPTION FROM REGISTRATION PURSUANT TO SECTION 5 OF THE EXCHANGE ACT**", url="https://www.sec.gov/files/form1.pdf")
        await interaction.response.edit_message(embed=embed, view=SECFormView())

    @disnake.ui.button(label="🏡", style=ButtonStyle.green, )
    async def home( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=MainView())

    @disnake.ui.button(label="🔙", style=ButtonStyle.blurple, )
    async def goback( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=ToolsView())

    @disnake.ui.button(label="📌", style=ButtonStyle.red, )
    async def pin( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=None)


class UsefulLinksView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.finra.org/finra-data/browse-catalog/short-sale-volume-data/daily-short-sale-volume-files/", label="Finra Off Exchange Shorts"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://fintel.io/so/us/gme/", label="13Fs for Institutional Ownership"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.federalregister.gov/dodd-frank-wall-steet-reform/", label="The Federal Register"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.dtcc.com/legal/sec-rule-filings/", label="DTCC / DTC Filings"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.dtcc.com/legal/important-notices", label="DTCC Important Notices"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.sec.gov/rules/sro/occ.htm", label="Options Clearing Corporation Filings"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.fiscaldata.treasury.gov/datasets/daily-treasury-statement/operating-cash-balance", label="US Treasury Balance"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.newyorkfed.org/markets/data-hub", label="FED Reverse Repo"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.financialresearch.gov/money-market-funds/", label="Money Market Fund Data(repo)"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.cboe.com/us/equities/market_statistics/venue/", label="CBOE Market Share Graph"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.otctransparency.finra.org/otctransparency/AtsIssueData", label="FINRA OTC/ATS Data"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.esma.europa.eu/data-systematic-internaliser-calculations", label="Systematic Internaliser Data"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.sec.gov/data/foiadocsfailsdatahtm", label="SEC Failure to Deliver Data"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://ftp.nyxdata.com/ShortData/NYSEshvol/NYSEshvol2021/", label="NYSE Master Data Index"))


    @disnake.ui.button(label="🏡", style=ButtonStyle.green, )
    async def home( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=MainView())

    @disnake.ui.button(label="🔙", style=ButtonStyle.blurple, )
    async def goback( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=ToolsView())

    @disnake.ui.button(label="📌", style=ButtonStyle.red, )
    async def pin( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=None)


class TraderToolsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.gitmind.com/", label="GITMIND Mind Maps"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.optionseducation.org/toolsoptionquotes/optionscalculator", label="Black Scholes Calculator"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.github.com/OpenBB-finance/OpenBBTerminal/releases/download/v1.3.0/OpenBB.Terminal.Setup.exe", label="OpenBB Terminal (exe)"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.optioncreator.com/", label="Option Strategy Creator"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.diffchecker.com/", label="Difference Checker"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.socialgrep.com", label="Social Data"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.subredditstats.com", label="Subreddit Stats"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.mentionmapp.com/", label="Mention Maps - Twitter"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.socialblade.com", label="Social Blade"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.otc.financial/list-of-market-maker-signals/#:~:text=Market%20maker%20signals%20are%20the,of%20a%20company's%20share%20price.", label="Market Maker Signals"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.sec.report/fails.php?", label="SEC Interactive FTD Chart"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.optionsprofitcalculator.com/", label="Options Profit Calculator"))
 
    @disnake.ui.button(label="Calendars📆", style=ButtonStyle.red)
    async def calendar(
        self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title = "Calendars📆", color = disnake.Colour.random())
        embed.add_field(name="**FINRA Consolidated Audit Trail",value="The CAT System, or Consolidated Audit Trail, is a long-time effort by the industry to be able to track the life-cycle of a security from beginning to end. This SYSTEM has been in development for over a decade, and GO-LIVE production is scheduled for late July. \n\n Keep up with their schedule and monitor any changes by utilizing this calendar. \n\n https://www.catnmsplan.com/timeline \n ")
        embed.add_field(name="**Federal Reserve FOMC Schedule",value="You ALWAYS want to make sure you keep up with the Fed's schedule. Most of this narrative rendering stuff is scheduled ahead of time. \n\n https://www.federalreserve.gov/monetarypolicy/fomccalendars.htm \n")
        embed.add_field(name="**Finra Short Interest Reporting Dates",value="FINRA Short Interest Reporting dates are critical. \n\n Keep in mind: The settlement dates provided have up to 2 business days following the settlement date to deliver. \n\n https://www.finra.org/filing-reporting/regulatory-filing-systems/short-interest \n")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=ToolsView())

    @disnake.ui.button(label="Cited Works📰", style=ButtonStyle.gray)
    async def citedworks( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=CitedView())

    @disnake.ui.button(label="🏡", style=ButtonStyle.green, )
    async def home( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=MainView())

    @disnake.ui.button(label="🔙", style=ButtonStyle.blurple, )
    async def goback( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=ToolsView())

    @disnake.ui.button(label="📌", style=ButtonStyle.red, )
    async def pin( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=None)


class CitedView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="History", style=ButtonStyle.blurple, )
    async def history( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="History", description="View cited works based on history pertaining to several market topics.")
        embed.add_field(name="OECD Resposne to the 2008 Crisis", value="https://www.oecd.org/sti/42983414.pdf", inline=True)
        embed.add_field(name="Final Rule - Money Market Reform Post Crisis", value="https://www.sec.gov/rules/final/2010/ic-29132.pdf", inline=True)
        embed.add_field(name="The global financial crisis: Causes impacts & policy responses", value="The global financial crisis: Causes impacts & policy responses \n https://www.oecd.org/finance/financial-markets/42549690.pdf", inline=True)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=CitedView())
    
    @disnake.ui.button(label="Market Mechanics", style=ButtonStyle.red, )
    async def marketmechanics( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Market Mechanics", description="Learn about how different things work in several areas of the Markets.")
        embed.add_field(name="Failure is an Option - Short Selling", value="https://www.sec.gov/comments/4-520/4520-6.pdf", inline=True)
        embed.add_field(name="ETFs - Creation and Redemption", value="https://www.ici.org/doc-server/pdf%3Aper20-05.pdf ", inline=True)
        embed.add_field(name="The Arbitrage Theory", value="https://www.top1000funds.com/wp-content/uploads/2014/05/The-Arbitrage-Theory-of-Capital-Asset-Pricing.pdf", inline=True)
        embed.add_field(name="The Economics of Naked Short Selling", value="https://www.cato.org/sites/cato.org/files/serials/files/regulation/2008/2/v31n1-6.pdf", inline=True)
        embed.add_field(name="Price Gap Anomaly in the US Financial Markets", value="https://www.up.ac.za/media/shared/61/WP/wp_2019_63.zp178869.pdf", inline=True)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=CitedView())

    @disnake.ui.button(label="Fed Reserve / Macro Economics", style=ButtonStyle.red, )
    async def fedmacro( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Macro Economics", description="View cited works based on macro-economics / monetary policy / and the Federal Reserve")
        embed.add_field(name="The Three Red Line Policy", value="https://www.ubs.com/global/en/assetmanagement/insights/thematic-viewpoints/apac-and-emerging/articles/china-three-red-lines/_jcr_content/mainpar/toplevelgrid/col1/actionbutton.2083861291.file/PS9jb250ZW50L2RhbS9hc3NldHMvYW0vY24vZG9jL2NoaW5hLXRocmVlLXJlZC1saW5lcy5wZGY=/china-three-red-lines.pdf", inline=True)
        embed.add_field(name="The INs and Outs of Collateral Reuse", value="https://www.federalreserve.gov/econres/notes/feds-notes/ins-and-outs-of-collateral-re-use-20181221.htm", inline=True)
        embed.add_field(name="The Chinese Economic Transformation", value="https://library.oapen.org/bitstream/id/bb1ddd53-7ea7-48fe-a07f-7282853bf896/chineseeconomic.pdf ", inline=True)
        embed.add_field(name="THE GLOBAL VALUE CHAINS AND THE EVOLUTION OF CHINESE ECONOMIC MODEL", value="https://www.repository.utl.pt/bitstream/10400.5/19964/1/wp178.pdf", inline=True)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=CitedView())
    
    @disnake.ui.button(label="🏡", style=ButtonStyle.green, )
    async def goback( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=MainView())


class LinksDropdown(disnake.ui.Select):
    def __init__(self):

        options= [ 
            disnake.SelectOption(label="🔗Off Exchange Short Sale Volume"),
            disnake.SelectOption(label="🔗Alphaquery - Call Screener 🟩"),
            disnake.SelectOption(label="🔗Alphaquery - Put Screener 🟥"),
            disnake.SelectOption(label="🔗Fintel - 13F info & SEC Edgar Verification"),
            disnake.SelectOption(label="🔗The Federal Register - Dodd Frank Act"),
            disnake.SelectOption(label="🔗DTCC Filings"),
            disnake.SelectOption(label="🔗DTCC Important Notices"),
            disnake.SelectOption(label="🔗OCC Filings"),
            disnake.SelectOption(label="🔗US Treasury Balance"),
            disnake.SelectOption(label="🔗Reverse Repo"),
            disnake.SelectOption(label= "🔗MMF/Reverse Repo Data"),
            disnake.SelectOption(label="🔗CBOE Market Share Graph"),
            disnake.SelectOption(label="🔗FINRA OTC Data"),
            disnake.SelectOption(label="🔗Systematic Internaliser Data"),
            disnake.SelectOption(label="🔗FTDs"),
            disnake.SelectOption(label="🔗NYSE Master FTP Index"),
            disnake.SelectOption(label="🔗Data Links")

        ]
        super().__init__(
            placeholder= "🇺 🇸 🇪 🇫 🇺 🇱🔗 🇱 🇮 🇳 🇰 🇸",
            min_values=1,
            max_values=1,
            custom_id="linksselect",
            options=options
        )


    async def callback(self,interaction:disnake.MessageCommandInteraction):
        if self.values[0] == "🔗Off Exchange Short Sale Volume":
            
            em = disnake.Embed(title="🔗Off Exchange Short Sale Volume",color=disnake.Colour.dark_gold(), url="https://www.finra.org/finra-data/browse-catalog/short-sale-volume-data")
            em.add_field(name="Description:", value="")
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)       
        elif self.values[0] == "🔗Alphaquery - Call Screener 🟩":
            
            em = disnake.Embed(title="🔗Alphaquery",color=disnake.Colour.dark_gold(), url="https://www.alphaquery.com/stock-screener/600010230?run=1")
            em.add_field(name="Description:", value="```py\nIn order to be able to use the screener - you MUST LOGIN by using:``` </fudstop application:1036704980100448347> ```py\nYou can find the login information inside of the bottom dropdown at the very bottom of it.```")
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)            

        elif self.values[0] == "🔗Alphaquery - Put Screener 🟥":
            
            em = disnake.Embed(title="🔗Alphaquery",color=disnake.Colour.dark_gold(), url="https://www.alphaquery.com/stock-screener/600010229?run=1")
            em.add_field(name="Description:", value="```py\nIn order to be able to use the screener - you MUST LOGIN by using:``` </fudstop application:1036704980100448347> ```py\nYou can find the login information inside of the bottom dropdown at the very bottom of it.```")
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)            
        elif self.values[0] == "🔗Reverse Repo":
            
            em = disnake.Embed(title="🔗Reverse Repo",color=disnake.Colour.dark_gold(), url="https://www.newyorkfed.org/markets/data-hub", inline=False)
            em.add_field(name="Reverse Repo",value="```py\nStay up to date with one of the most under-reported aspects of financial markets - the ON RRP Reverse Repo operations out of the Federal Reserve.```", inline=False)
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em) 
        
        
        elif self.values[0] == "🔗Alphaquery":
            
            em = disnake.Embed(title="🔗Alphaquery",color=disnake.Colour.dark_gold(), url="https://www.alphaquery.com")
            em.add_field(name="Description:", value="```py\nAlphaQuery If you're a member - this tool is available to you! ")
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)       
        elif self.values[0] == "🔗Fintel - 13F info & SEC Edgar Verification":
            
            em = disnake.Embed(title="🔗Fintel - 13F info & SEC Edgar Verification",color=disnake.Colour.dark_gold(), url="https://fintel.io/so/us/gme")
            em.add_field(name="Description:",value="https://www.finra.org/finra-data/browse-catalog/short-sale-volume-data")
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)       
        elif self.values[0] == "🔗The Federal Register - Dodd Frank Ac":
            
            em = disnake.Embed(title="🔗The Federal Register - Dodd Frank Ac",color=disnake.Colour.dark_gold(), url="https://www.federalregister.gov/dodd-frank-wall-steet-reform")
            em.add_field(name="Description:", value="")
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)        
        elif self.values[0] == "🔗DTCC Filings":
            

            em = disnake.Embed(title="🔗DTCC Filings",color=disnake.Colour.dark_gold(), url="https://www.dtcc.com/legal/sec-rule-filings")
            em.add_field(name="Description:", value="```py\nStay up to date with filings out of DTC, NSCC, and the FICC.```")
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)

        elif self.values[0] == "🔗FINRA Filings":
            
            em = disnake.Embed(title="🔗Finra Filings",color=disnake.Colour.dark_gold(), url="https://www.dtcc.com/legal/sec-rule-filings")
            em.add_field(name="Description:", value="```py\nThis is FINRA's TRF (trade reporting facility) off exchange short volume - reported daily.```")
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)

        
        elif self.values[0] == "🔗OCC Filings":

            em = disnake.Embed(title="🔗OCC Filings",color=disnake.Colour.dark_gold(), url="https://www.sec.gov/rules/sro/occ.htm")
            em.add_field(name="Description:", value="")
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)         
        elif self.values[0] == "🔗The Federal Register":
            
            em = disnake.Embed(title="🔗The Federal Register",color=disnake.Colour.dark_gold(), url="https://www.federalregister.gov/dodd-frank-wall-steet-reform")
            em.add_field(name="**The Federal Register - Dodd Frank Act",value="```py\nStay up to date with SEC Filings that are posted daily on public inspection.```", inline=True)
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em) 
        elif self.values[0] == "🔗DTCC Important Notices":
            
            em = disnake.Embed(title="🔗DTCC Important Notices",color=disnake.Colour.dark_gold(), url="https://www.dtcc.com/legal/important-notices")
            em.add_field(name="Description:", value="```py\nStay up to date with relevant important notices that affect all participants.```")
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em) 
        elif self.values[0] == "🔗US Treasury Balance":
            
            em = disnake.Embed(title="🔗US Treasury Balance",color=disnake.Colour.dark_gold(), url="https://fsapps.fiscal.treasury.gov/dts/issues")
            em.add_field(name="Description:", value="")
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em) 
        elif self.values[0] == "🔗Options Clearing Corporation":
            
            em = disnake.Embed(title="🔗Options Clearing Corporation",color=disnake.Colour.dark_gold(), url="https://www.sec.gov/rules/sro/occ.htm")
            em.add_field(name="Description:", value="```py\nStay up to date with filings that come out of the Options Clearing Corporation.```")
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)
        elif self.values[0] == "🔗MMF/Reverse Repo Data":
            
            em = disnake.Embed(title="🔗MMF/Reverse Repo Data",color=disnake.Colour.dark_gold(), url="https://www.financialresearch.gov/money-market-funds/")
            em.add_field(name="Description:",value="```py\nThis is the Money Market Fund Monitor from the Office of Financial Research. View counterparties to the fed / repo numbers as well as FICC repos.```", inline=False)
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)
        elif self.values[0] == "🔗CBOE Market Share Graph":
            
            em = disnake.Embed(title="🔗CBOE Market Share Graph",color=disnake.Colour.dark_gold(), url="https://www.cboe.com/us/equities/market_statistics/venue/")
            em.add_field(name="Description:",value="```py\nView CBOE's Market Share graph and look at volume straight from the Securities Information Processor from all three Tapes. Compare market share from all venus including the ADF.", inline=False)
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)       
        elif self.values[0] == "🔗US Treasury":
            
            em = disnake.Embed(title="🔗US",color=disnake.Colour.dark_gold(), url="https://fiscaldata.treasury.gov/datasets/daily-treasury-statement/operating-cash-balance")
            em.add_field(name="Description:",value="```py\nStay up to date with the US Treasury's balance.```", inline=False)            
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)       
        elif self.values[0] == "🔗FINRA OTC Data":
            
            em = disnake.Embed(title="🔗FINRA OTC Data",color=disnake.Colour.dark_gold(), url="https://otctransparency.finra.org/otctransparency/AtsIssueData")
            em.add_field(name="Description:",value="```py\nFINRA is now reporting OTC data as well as Alternative Trading Systems data on a weekly basis. View OTC trades, ATS data, and more.```", inline=False)
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)
        elif self.values[0] == "🔗NYSE Master FTP Index":
            
            em = disnake.Embed(title="🔗NYSE Master FTP Index",color=disnake.Colour.dark_gold(), url="https://ftp.nyxdata.com/ShortData/NYSEshvol/NYSEshvol2021/ ")
            em.add_field(name="Description:",value="```py\nView the Master File of NYSE Data from all subsidararies.```", inline=False)
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)
        elif self.values[0] == "🔗Systematic Internaliser Data":
            
            em = disnake.Embed(title="🔗Systematic Internaliser Data",color=disnake.Colour.dark_gold(), url="https://www.esma.europa.eu/data-systematic-internaliser-calculations ")
            em.add_field(name="Description:",value="```py\nView the Systematic Internaliser data from the ESMA in Europe as required my MiFID II regulations. Systematic Internaliser data is represented in Euros.```", inline=False)
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)
        elif self.values[0] == "🔗Data Links":
            await interaction.response.edit_message(embed=em)
            
            em = disnake.Embed(title = "🔗Data Links", color = disnake.Colour.random(), url="https://www.sec.gov/data/foiadocsfailsdataht")
            em.add_field(name="Description:",value="```py\nView the SEC Failure to Deliver data that's reported twice monthly.```")
            em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://cdn.discordapp.com/icons/888488311927242753/a_2f3b77412430093a08a85639ce33045f.webp?size=128")
            await interaction.response.edit_message(embed=em)
    
     










class TechDropdown(disnake.ui.Select):
    def __init__(ctx):
        

        options = [

            disnake.SelectOption( label=f"✨MAC-D"),
            disnake.SelectOption( label=f"✨✨RSI"),
            disnake.SelectOption( label=f"✨Bollinger Bands"),
            disnake.SelectOption( label=f"Island Top"),
            disnake.SelectOption( label=f"Island Bottom"),
            disnake.SelectOption( label=f"Fast Stochastics"),
            disnake.SelectOption( label=f"Slow Stochastics"),
            disnake.SelectOption( label=f"Hammer"),
            disnake.SelectOption( label=f"Inverted Hammer"),
            disnake.SelectOption( label=f"Price Cross moving Average"),
            disnake.SelectOption( label=f"Double Moving Averages Crossover"),
            disnake.SelectOption( label=f"Triple Moving Averages Crossover"),
            disnake.SelectOption( label=f"Key Reversal Bar (Bullish)"),
            disnake.SelectOption( label=f"Key Reversal Bar (Bearish)"),
            disnake.SelectOption( label=f"Pennant (Bullish)"),
            disnake.SelectOption( label=f"Pennant (Bearish)"),
            disnake.SelectOption( label=f"Rounded Top"),
            disnake.SelectOption( label=f"Rounded Bottom"),
            disnake.SelectOption( label=f"Triple Top"),
            disnake.SelectOption( label=f"Triple Bottom"),
            disnake.SelectOption( label=f"Double Bottom"),
            disnake.SelectOption( label=f"Double Top"),
            disnake.SelectOption( label=f"Head and Shoulders Bottom"),
            disnake.SelectOption( label=f"Head and Shoulders Top"),]

        super().__init__(
        placeholder=f"📉 🇵  🇦  🇹  🇹  🇪  🇷 🇳 🇸 📈",
        min_values=1,
        max_values=1,
        custom_id=f"🇵  🇦  🇹  🇹  🇪  🇷 🇳 🇸",
        options= options)
    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "✨✨RSI":
            embed=disnake.Embed(title="RSI",description="```py\n Live Example:```", url="https://www.webull.com/help/faq/10654-Relative-Strength-Index-RSI",color=disnake.Colour.dark_gold())
            embed.set_image(url="https://pre-social-video.webullbroker.com/us/office/158aa81f966d41d89b4e9f294f5b9ee9.gif")
            await inter.response.edit_message(embed=embed)
            sleep(9)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/f015372c3ff0449cbb111386b3fabc39.png")
            await inter.edit_original_message(embed=embed)
            sleep(9)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/fa0758cd1e834026933f5f9fcb97c7d6.png")
            await inter.edit_original_message(embed=embed)
        
        elif self.values[0] == "✨MAC-D":
            embed=disnake.Embed(title="✨MAC-D",description="```py\n Live Example:```", url="https://www.webull.com/help/faq/10652-Moving-Average-Convergence-Divergence-MACD", color=disnake.Colour.dark_orange())
            embed.set_image(url="https://pre-social-video.webullbroker.com/us/office/01745f9cf69e48a9a595d2483c06c12c.gif")
            await inter.response.edit_message(embed = embed)
            sleep(9)
            embed.remove_field(index=1)
            embed.set_image(url="https://u1sweb.webullfinance.com/social/ad633d95b6e94684b038919a0ab0a5ef.png")
            embed.add_field(name="MACD", value="```py\n The Three Components of the MACD - 'histogram' 'signal' and 'MACD Line'```")
            await inter.edit_original_message(embed=embed)
            sleep(5)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/a30f3f8800b94382990ccd9a7a0ebe85.png")
            await inter.edit_original_message(embed=embed)
            sleep(9)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/0e56e6748702483391f17ae98632fc2c.gif")
            embed.add_field(name="MACD", value="```py\n The MACD and the baseline:```")
            await inter.edit_original_message(embed=embed)
            sleep(9)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/33b10c898f174e7aac2aaa216aae3975.gif")
            embed.add_field(name="MACD", value="```py\n The MACD and the Signal Line:```")
            await inter.edit_original_message(embed=embed)
            sleep(15)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/4828044b58f54905ae276644824a24ae.png")
            embed.add_field(name="MACD", value="```py\nBullish Convergence```")
            await inter.edit_original_message(embed=embed)
            sleep(15)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/1d8594cc97f44a00b745043d9c421898.png")
            embed.add_field(name="MACD", value="```py\nBearish Convergence```")
            await inter.edit_original_message(embed=embed)
            sleep(15)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/fed61d56f107491b9323457f7c3ba92c.png")
            embed.add_field(name="MACD", value="```py\nBullish Divergence```")
            await inter.edit_original_message(embed=embed)
            sleep(15)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/c61c32de1fbc476b8691185b6a7affa9.png")
            embed.add_field(name="MACD", value="```py\nBearish Divergence```")
            await inter.edit_original_message(embed=embed)
        
        elif self.values[0] == "✨Bollinger Bands":
            view = PersistentView()
            embed=disnake.Embed(title="✨Bollinger Bands",description="```py\n Live Example:```",url="https://www.webull.com/help/faq/10672-Bollinger-Bands", color=disnake.Colour.dark_blue())
            embed.set_image(url="https://pre-social-video.webullbroker.com/us/office/ccb1adcbe46d4b71aa8fb686b68b7b19.gif")
            
            embed2 = disnake.Embed(title="🖼️Overbought BollingerBands")
            embed2.set_image(url="https://u1sweb.webullfinance.com/social/3952369462d7419d86be8e5105992fc6.png")
            p2 = disnake.ui.Button(label="🖼️Upper / Lower Bands", style=disnake.ButtonStyle.grey)
            p2.callback = lambda interaction: interaction.response.edit_message(embed=embed2, view=view)
            view.add_item(p2)
            
            
            embed3 = disnake.Embed(title="🖼️Squeeze", color=disnake.Colour.dark_green())
            embed3.set_image(url="https://u1sweb.webullfinance.com/social/03413a6c81554a5eb76e41f18878675d.gif")
            p3 = disnake.ui.Button(label="🖼️Squeeze", style=disnake.ButtonStyle.green)
            p3.callback = lambda interaction: interaction.response.edit_message(embed=embed3, view=view)
            view.add_item(p3)
            embed4 = disnake.Embed(title="🖼️Overbought BollingerBands", color=disnake.Colour.dark_red())
            embed4.set_image(url="https://u1sweb.webullfinance.com/social/f4d69fa970324b4aba4dd35fd1ff6e33.gif")
            p4 = disnake.ui.Button(label="🖼️Overbought", style=disnake.ButtonStyle.red)
            p4.callback = lambda interaction: interaction.response.edit_message(embed=embed4, view=view)
            view.add_item(p4)
            embed5 = disnake.Embed(title="🖼️Oversold BollingerBands", color=disnake.Colour.dark_green())
            p5 = disnake.ui.Button(label="🖼️Oversold", style=disnake.ButtonStyle.green)
            p5.callback = lambda interaction: interaction.response.edit_message(embed=embed5, view=view)
            embed5.set_image(url="https://u1sweb.webullfinance.com/social/6a137240f8114abbb09b435b033db02b.gif")
            view.add_item(p5)
            await inter.response.edit_message(embed=embed, view=view)
        
        elif self.values[0] == "Pennant (Bullish)":
            em = disnake.Embed(title="Pennant (Bullish)", description="```py\nImplication:\n\nA Pennant (Bullish) is considered a bullish signal, indicating that the current uptrend may continue.```", color=disnake.Colour.dark_green())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/5d4dab3f68ac464bbb35961dc6182edd.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Pennant (Bearish)":
            em = disnake.Embed(title="Pennant (Bearish)", description=f"```py\nImplication:\n\nA Pennant (Bearish) is considered a bearish signal, indicating that the current downtrend may continue.```", color=disnake.Colour.dark_red())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/32694d0d2a2e423c82fcfa211e935f88.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Key Reversal Bar (Bearish)":
            em = disnake.Embed(title="Key Reversal Bar (Bearish)", description="```py\nImplication:\n\nA Key Reversal Bar (Bearish) indicates a possible reversal of the current uptrend to a new downtrend. This pattern is an indication of a financial instrument's SHORT-TERM outlook. One and two-bar patterns reflect changes in investor psychology that have a very short-term influence on future prices - typically less than 10 bars. Often the immediate effect is trend exhaustion, followed by a reversal. For traders looking for clear entry and exit points, these patterns serve well. They are normally not suitable as signals for long-term investors unless viewed as monthly bars.```", color=disnake.Colour.dark_red())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/78973b12ba32491db844fdaefa621267.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Key Reversal Bar (Bullish)":
            em = disnake.Embed(title="Key Reversal Bar (Bullish)", description=f"```py\nImplication:\n\nA Key Reversal Bar (Bullish) indicates a possible reversal of the current downtrend to a new uptrend. This pattern is an indication of a financial instrument's SHORT-TERM outlook. One and two-bar patterns reflect changes in investor psychology that have a very short-term influence on future prices - typically less than 10 bars. Often the immediate effect is trend exhaustion, followed by a reversal. For traders looking for clear entry and exit points, these patterns serve well. They are normally not suitable as signals for long-term investors unless viewed as monthly bars.```", color=disnake.Colour.dark_green())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/b2a6a707338e49c8889ce9784d81f0c4.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Triple Moving Averages Crossover":
            em = disnake.Embed(title="Triple Moving Averages Crossover", description=f"```py\nWhen a shorter and longer moving average (of a security's price) cross each other (the event), a bullish or bearish signal is generated depending on the direction of the crossover.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://u1sweb.webullfinance.com/suggestion/1902a4d52de74a4bb5a9b4b3badd3a2a.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Double Moving Averages Crossover":
            em = disnake.Embed(title="Double Moving Averages Crossover", description=f"```py\nImplication:\n\nWhen a shorter and longer moving average (of a security's price) cross each other (the event), a bullish or bearish signal is generated depending on the direction of the crossover.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://u1sweb.webullfinance.com/suggestion/17aff3cf388541ba8417862b09d7a176.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Price Cross moving Average":
            em = disnake.Embed(title="Price Cross moving Average", description=f"```py\nImplication:\n\nWhen a security's price crosses its moving average (the event), a bullish or bearish signal is generated depending on the direction of the crossover.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://u1sweb.webullfinance.com/suggestion/15ca404b7b1b40788fac11747d048edd.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Inverted Hammer":
            em = disnake.Embed(title="Inverted Hammer", description=f"```py\nImplication:\n\nAn Inverted Hammer indicates that the prior downtrend is about to end and may reverse to an uptrend or move sideways. This pattern is an indication of a financial instrument's SHORT-TERM outlook.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/495de541f6de4d1aac24d1103cb882c2.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Hammer":
            em = disnake.Embed(title="Hammer", description=f"```py\nImplication:\n\nThe Hammer indicates that the prior downtrend is about to end and may reverse to an uptrend or move sideways. This pattern is an indication of a financial instrument's SHORT-TERM outlook.```", color=disnake.Colour.dark_orange())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/dee6cef744494e3fb65a4f59bb932562.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Slow Stochastics":
            em = disnake.Embed(title="Slow Stochastics", description=f"```py\nImplication:\n\nTrading Central identifies an event for a slow stochastic oscillator when:```"
        "```py\nBullish:\n%K and %D lines fall below and then rise above the 20 threshold, indicating bullish potential, along with a %K line cross above the %D line, triggering a bullish signal event if these 3 crossovers occur within a 5-day period.```"
        "```py\nBearish:\n%K and %D lines rise above and then fall below the 80 threshold, indicating bearish potential, along with a %K line cross below the %D line, triggering a bearish signal event if these 3 crossovers occur within a 5-day period.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/fafd3076f18f40789ed55dfc473d22ce.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Fast Stochastics":
            em = disnake.Embed(title="Fast Stochastics", description=f"```py\nImplication:\n\nTrading Central identifies an event for a fast stochastic oscillator when:```"

            "```py\nBullish: %K and %D lines fall below and then rise above the 20 threshold, indicating bullish potential, along with a %K line cross above the %D line, triggering a bullish signal event if these 3 crossovers occur within a 5-day period.```"
            "```py\nBearish: %K and %D lines rise above and then fall below the 80 threshold, indicating bearish potential, along with a %K line cross below the %D line, triggering a bearish signal event if these 3 crossovers occur within a 5-day period.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/961af9fdf8a348948617dddac0a5382b.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Rounded Top":
            em = disnake.Embed(title="Rounded Top", description=f"```py\nImplication:\n\nA Rounded Top is considered a bearish signal, indicating a possible reversal of the current uptrend to a new downtrend.```", color=disnake.Colour.dark_red())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/533f3e4bbe2e414a93f8e99a1801657e.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Rounded Bottom":
            em = disnake.Embed(title="Rounded Bottom", description=f"```py\nImplication:\n\nA Rounded Bottom is considered a bullish signal, indicating a possible reversal of the current downtrend to a new uptrend.```", color=disnake.Colour.dark_green())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/6614b983f9cc43ebb7f50cc5ff476519.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Double Top":
            em = disnake.Embed(title="Double Top", description=f"```py\nImplication:\n\nA Double Top is considered a bearish signal, indicating a possible reversal of the current uptrend to a new downtrend.```", color=disnake.Colour.dark_red())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/5932f20b1c214223877b05851585ab29.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Triple Top":
            em = disnake.Embed(title="Triple Top", description=f"```py\nImplication:\n\nA Triple Top is considered a bearish signal, indicating a possible reversal of the current uptrend to a new downtrend.```", color=disnake.Colour.dark_red())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/08c735d66b114ed9804ccb10303e3438.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Double Bottom":
            em = disnake.Embed(title="Double Bottom", description=f"```py\nImplication:\n\nA Double Bottom is considered a bullish signal, indicating a possible reversal of the current downtrend to a new uptrend.```", color=disnake.Colour.dark_green())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/10001a318a80438184f53f87838d9786.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Triple Bottom":
            em = disnake.Embed(title="Triple Bottom", description=f"```py\nImplication:\n\nA Triple Bottom is considered a bullish signal, indicating a possible reversal of the current downtrend to a new uptrend.```", color=disnake.Colour.dark_green())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/add50eee33a54f2384578344b3b7ec15.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Island Bottom":
            em = disnake.Embed(title="Island Bottom", description=f"```py\nImplication:\n\nAn Island Bottom is a bullish signal indicating a possible reversal of the current downtrend to a new uptrend. This pattern is an indication of a financial instrument's SHORT-TERM outlook.```",color=disnake.Colour.dark_green())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/3f93f2e5da594321b8968e8961ada42e.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Island Top":
            em = disnake.Embed(title="Island Top", description=f"```py\nImplication:\n\nAn Island Top is a bearish signal indicating a possible reversal of the current uptrend to a new downtrend. This pattern is an indication of a financial instrument's SHORT-TERM outlook.```",color=disnake.Colour.dark_red())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/1ef92c2c9dda4797b811660ceb12ea63.gif")
            await inter.response.edit_message(embed = em)    
        elif self.values[0] == "Head and Shoulders Top":
            em = disnake.Embed(title="Head and Shoulders Top", description=f"```py\nImplication:\n\nA Head and Shoulders Top is considered a bearish signal. It indicates a possible reversal of the current uptrend to a new downtrend.```", color=disnake.Colour.dark_red())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/98b1cd5c4ec04cfbacd6c9ac3c82b3c6.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Head and Shoulders Bottom":
            em = disnake.Embed(title="Head and Shoulders Bottom", description=f"```py\nImplication:\n\nA Head and Shoulders Bottom is considered a bullish signal. It indicates a possible reversal of the current downtrend into a new uptrend.```", color=disnake.Colour.dark_green())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/e1255ee1bded47dfb1ad5b149e5ae357.gif")
            await inter.response.edit_message(embed = em)  


class TechView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(TechDropdown())
        self.add_item(TechDropdown2())
        self.add_item(CandleDropdown())
        self.add_item(TrendDropdown())
        self.add_item(WebullTut())







class PersistentView2(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        self.add_item(Op())
        self.add_item(QuantSelect())
        self.add_item(StockCmdSelect())
        self.add_item(StreamSelect())
        self.add_item(AnalysisSelect())


class PersistentView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        self.add_item(FUDSTOPMenu())

class FUDSTOPMenu(disnake.ui.Select):
    def __init__(self):

        options = [
    
            disnake.SelectOption(label="map🗾Heatmaps"),
            disnake.SelectOption(label="ch💬Chats⬅"),
            disnake.SelectOption(label="flow💦Options Flow"),
            disnake.SelectOption(label="fd📶Market & Social Feeds"),
            disnake.SelectOption(label="rss🔊RSS Feeds"),
            disnake.SelectOption(label="nw🌐News Feeds"),
            disnake.SelectOption(label="tt🚀TradyTics Realtime Alerts"),
            disnake.SelectOption(label="fm📜Forums"),
            disnake.SelectOption(label="ut💡Utilities Sector"),
            disnake.SelectOption(label="etf⚓ETF Sector"),
            disnake.SelectOption(label="cc🌒Consumer Cyclical Sector"),
            disnake.SelectOption(label="cs📣Communication Services Sector"),
            disnake.SelectOption(label="re🏠Real Estate Sector"),
            disnake.SelectOption(label="he💉Healthcare Sector"),
            disnake.SelectOption(label="te💿Technology Sector"),
            disnake.SelectOption(label="in🌆Industrials Sector"),
            disnake.SelectOption(label="cd⛴️Consumer Defensive Sector"),
            disnake.SelectOption(label="fs💰Financial Services Sector"),
            disnake.SelectOption(label="en⚡Energy Sector"),
            disnake.SelectOption(label="bm🧱Basic Materials Sector")]

        super().__init__(
            placeholder="🇫 🇺 🇩 🇸 🇹 🇴 🇵 ☯️ 🇲 🇪 🇳 🇺",
            min_values=1,
            max_values=1,
            custom_id="selec_menu:FUDSTOPMenu",
            options=options
        )

    async def callback(self, interaction:disnake.MessageCommandInteraction):
        await interaction.response.defer(with_message=True, ephemeral=True)
        em = disnake.Embed(title=f"Welcome to FUDSTOP", description="```py\nThis is the server Menu. For those that are new - it's a great place to start going through the channels and begin customizing your notifications.\n\nWe offer over 175 channels with a plethora of tools, resources, and feeds that you can have streamlined to your PC or mobile device. Select from the menu below to get started!\n\n\nWhen you select from the menu - the command /navigate will be printed alongside the key to type into the search box. Simply click the command and type in the key to being findind what you need!``` ```py\nNote: The messages will dissapear after 30 seconds.```", color=disnake.Colour.dark_gold())
        if self.values[0] == "map🗾Heatmaps":
            em2 = disnake.Embed(title="map🗾Heatmaps", description=f"```py\nThis section provides automated heatmaps covering six different market indexes.``` ```py\nKeycode: map```",color=disnake.Colour.dark_green())
            em2.add_field(name="🗾",value="<#1035270377414336662>")
            em2.add_field(name="🗾",value="<#1035270668901699584>")
            em2.add_field(name="🗾",value="<#1035270694990262302>")
            em2.add_field(name="🗾",value="<#1035270719338201088>")
            em2.add_field(name="🗾",value="<#1035270806479056946>")
            em2.add_field(name="🗾",value="<#1035270870320562267>")
            em2.add_field(name="🗾",value="<#1035270941208498186>")
            em2.add_field(name="Navigation Code:",value="```py\nmap```")
            em2.set_footer(text="`All map channels provide the heat-map for the specific index.`")
            await interaction.edit_original_message(embed=em2)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)





        elif self.values[0] =="ch💬Chats⬅":
            em3 = disnake.Embed(title=f"ch💬Chats⬅", description="```py\nChatrooms. Ask questions, join the conversation, share ideas or research, or just mess around!`", color=disnake.Colour.dark_gold())
            em3.add_field(name="Main Chat💬", value="<#896207280117264434>")
            em3.add_field(name="💬", value="<#1035063759196135424>")
            em3.add_field(name="💬", value="<#943359218545721395>")
            em3.add_field(name="💬", value="<#1019752456999145553>")
            em3.add_field(name="💬", value="<#1022199154069471232>")
            em3.add_field(name="Navigation Code:",value="```py\nch```")
            await interaction.edit_original_message(embed=em3)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)
        
        elif self.values[0] =="flow💦Options Flow":
            em4 = disnake.Embed(title="",description=f"```py\nSet notifications here to recieve automatic order flow posts real-time and intraday.```", color=disnake.Colour.dark_gold())
            em4.add_field(name="💦",value="<#1035273203683172434>")
            em4.add_field(name="💦",value="<#1035273514250408037>")
            em4.add_field(name="Navigation Code:",value="```py\nflow```")
            await interaction.edit_original_message(embed=em4)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)
        
        elif self.values[0] =="tt🚀TradyTics Realtime Alerts":
            em5 = disnake.Embed(title="tt🚀TradyTics Realtime Alerts", description=f"```py\nPlay at your own risk. Very good return rates and play-calling. Definitely set notifications here to recieve the play alerts as soon as possible.```", color=disnake.Colour.dark_red())
            em5.add_field(name="🚀", value="<#1016372151596630016>")
            
            em5.add_field(name="tt🚀", value="<#1016369913759285338>")
            
            em5.add_field(name="tt🚀", value="<#1016369933187301416>")
            
            em5.add_field(name="tt🚀", value="<#1016369947829600297>")
            
            em5.add_field(name="tt🚀", value="<#1016369960810979388>")
            
                
            em5.add_field(name="tt🚀", value="<#1016369974945775666>")
            
                
            em5.add_field(name="tt🚀", value="<#1016369975864348673>")
            
            em5.add_field(name="tt🚀", value="<#1016369984768852090>")
            
            
            em5.add_field(name="tt🚀", value="<#1016369985867743394>")
            
                
            em5.add_field(name="tt🚀", value="<#1016372139802234991>")
            
                
            em5.add_field(name="tt🚀", value="<#1016372323051388999>")
            
                
            em5.add_field(name="tt🚀", value="<#1016372517251850360>")
            em5.add_field(name="Navigation Code:",value="```py\ntt```")
            await interaction.edit_original_message(embed=em5)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)

        
        elif self.values[0] =="fm📜Forums":
            em6 = disnake.Embed(title="fm📜Forums", description=f"```py\nForums are relatively new, and are a great place to spark conversation. Learn about technicals, markets, join a disucssion, or start your own discussions.```", color=disnake.Colour.dark_orange())
            em6.add_field(name="fm🧠",value="<#1019711610949996644> ```py\nForum Topics:``` <#1028520267305205811>    <#1019713167418458153>    <#1026817221663666236>    <#1020734566375362630>")
            em6.add_field(name="fm❓",value="<#1019642125442363483> ```py\nForum Topics:``` <#1019706068961591318>    <#1019707633134997556>    <#1019790741360349244>    <#1020527718837784687>\n\n<#1019735801413775481>    <#1024209030614360094>    <#1022005228951834634>    <#1028509757444730950>\n\n<#1019790351587889162>    <#1019643506920259594>")
            em6.add_field(name="fm🤖",value="<#1032051790432182294> ```py\nForum Topics:``` <#1032053051609059489>    <#1032053768231071776>")
            em6.add_field(name="fm📜",value="<#1020761776062738543> ```py\nForum Topics:``` <#1020762438372687973>    <#1020823240844791900>    <#1020822834920042557>    <#1020823436504870972>")
            em6.add_field(name="fm📜",value="<#1006354207294627952>")
            em6.add_field(name="fm📜",value="<#1022544320030572574> ```py\nForum topics:``` <#1022545349807702016>     <#1022546202190950532>     <#1022602221608775690>     <#1022547353779044402> \n\n<#1022548867822133380>     <#1022548401314877490>     <#1022549806738051092>\n\n<#375862240601047070>     <#1022550078818369667>     <#1022552203665363016>\n\n<#1022553103939141702>     <#1022599729802133514>     <#1022598010678546552>     <#1022598659264753776>")
            em6.add_field(name="fm📜", value="<#1028353042896130108>")
            em6.add_field(name="fm📜", value="<#1020521179796222023> | ```py\nForum Topics:``` <#375862240601047070>     <#1020528673851449344>    <#1020524901263736833>    <#1020533866504650853>\n\n<#1020526050544979998>    <#1020531730731507753>    <#1020527105563426886>")
            em6.add_field(name="fm📜", value="<#1020736388754313326> ```py\nForum Topics:``` <#1020743569411153930>    <#1020739768012783626>    <#1020746246354370692>    <#1020737393600499723>\n\n<#1020742475717017660>    <#1020741909146247219>    <#1020740766097752117>    <#1020738755998527648>\n\n <#1020744926981529690>")
            em6.add_field(name="NOTE:",value="```py\nIf the channels are showing 'deleted-channel' it's because you need to visit the parent forum first, and then open the posts and they will appear!```")
            em6.add_field(name="Navigation Code:",value="```py\nfm```")
            
            await interaction.edit_original_message(embed=em6)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)


        elif self.values[0] =="ut💡Utilities Sector":
            em = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            em.add_field(name="ut💡",value="<#1015399097500455013>")
            em.add_field(name="ut💡",value="<#1015399280221106217>")
            em.add_field(name="ut💡",value="<#1015399365394833499>")
            em.add_field(name="ut💡",value="<#1015399398794068151>")
            em.add_field(name="ut💡",value="<#1015399422269603880>")
            em.add_field(name="ut💡",value="<#1015405869929861130>")
            em.add_field(name="Navigation Code:",value="```py\nut```")
            await interaction.edit_original_message(f"</navigate channels:1034275861865705476>",embed=em)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)
        
        elif self.values[0] =="etf⚓ETF Sector":
            em = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            em.add_field(name="etf⚓",value="<#1015396437015674890>")
            em.add_field(name="Navigation Code:",value="```py\netf```")
            await interaction.edit_original_message(f"</navigate channels:1034275861865705476>",embed=em)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)
        
        elif self.values[0] =="cc🌒Consumer Cyclical Sector":
            em = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            em.add_field(name="cc🌒",value="<#1015399375171760289>")
            em.add_field(name="cc🌒",value="<#1015399522458931291>")
            em.add_field(name="cc🌒",value="<#1015399532336521226>")
            em.add_field(name="cc🌒",value="<#1015399748515156119>")
            em.add_field(name="cc🌒",value="<#1015399726960607292>")
            em.add_field(name="cc🌒",value="<#1015413980598124625>")
            em.add_field(name="cc🌒",value="<#1015414003884896256>")
            em.add_field(name="cc🌒",value="<#1015413991549452288>")
            em.add_field(name="cc🌒",value="<#1015414015956111480>")
            em.add_field(name="cc🌒",value="<#1015416056816345139>")
            em.add_field(name="cc🌒",value="<#1015416093826896013>")
            em.add_field(name="Navigation Code:",value="```py\ncc```")
            await interaction.edit_original_message(f"</navigate channels:1034275861865705476>",embed=em)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)


        elif self.values[0] =="fd📶Market & Social Feeds": 
            em = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            em.add_field(name="fd📶",value="<#1015879298940416071>")
            em.add_field(name="fd📶",value="<#1014186460162822234>")
            em.add_field(name="fd📶",value="<#1009157079803637851>")
            em.add_field(name="fd📶",value="<#1013870207456006164>")
            em.add_field(name="fd📶",value="<#1014186417385115728>")
            em.add_field(name="fd📶",value="<#961095958295347200>")
            em.add_field(name="fd📶",value="<#1009157366769524747>")
            em.add_field(name="fd📶",value="<#1035211665991553074>")
            em.add_field(name="Navigation Code:",value="```py\nfd```")
            await interaction.edit_original_message(f"</navigate channels:1034275861865705476>",embed=em)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)

        
        elif self.values[0] =="rss🔊RSS Feeds":
            em = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            em.add_field(name="🔊",value="<#1019359742549823508>") 
            em.add_field(name="🔊",value="<#1019361403032834128>")
            em.add_field(name="🔊",value="<#1019360302250332301>")
            em.add_field(name="🔊",value="<#1019362367362060410>")
            em.add_field(name="🔊",value="<#1019366556997795910>")  
            em.add_field(name="🔊",value="<#1019360339856470146>")          
            em.add_field(name="🔊",value="<#1028667813168173167>")
            em.add_field(name="🔊",value="<#1028668345702166698>")
            em.add_field(name="Navigation Code:",value="```py\nrss```")
            await interaction.edit_original_message(embed=em)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)  


        elif self.values[0] =="nw🌐News Feeds":
            em = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            em.add_field(name="nw🌐", value="<#1015664603079921784>")
            em.add_field(name="nw🌐", value="<#1015660065119797328>")
            em.add_field(name="nw🌐", value="<#1015664808101695488>")
            em.add_field(name="nw🌐", value="<#1015666153915424908>")
            em.add_field(name="nw🌐", value="<#1015665900864667821>")
            em.add_field(name="nw🌐", value="<#1015662803304067193>")
            em.add_field(name="nw🌐", value="<#1015659953865883788>")
            em.add_field(name="nw🌐", value="<#1015662737856155658>")
            em.add_field(name="nw🌐", value="<#1015664213605241013>")
            em.add_field(name="nw🌐", value="<#1015662708353409044>")
            em.add_field(name="nw🌐", value="<#1015663288639565835>")
            em.add_field(name="nw🌐", value="<#1015660095440425000>")
            em.add_field(name="nw🌐", value="<#1015663984013226084>")
            em.add_field(name="nw🌐", value="<#1015660106261737523>")
            em.add_field(name="nw🌐", value="<#1015666701389529228>")
            em.add_field(name="nw🌐", value="<#1015660085353123910>")
            em.add_field(name="nw🌐", value="<#1015664634923061362>")
            em.add_field(name="nw🌐", value="<#1015667147143381072>")
            em.add_field(name="nw🌐", value="<#1015666000814940220>")
            em.add_field(name="nw🌐", value="<#1015665876118294528>")
            em.add_field(name="nw🌐", value="<#1015660043284258856>")
            em.add_field(name="nw🌐", value="<#1015665926634475650>")
            em.add_field(name="nw🌐", value="<#1015664577754701825>")
            em.add_field(name="nw🌐", value="<#1015663450296430672>")
            em.add_field(name="Navigation Code:",value="```py\nnw```")
            await interaction.edit_original_message(embed=em)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)  
        
        elif self.values[0] =="cs📣Communication Services Sector":
            em = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            em.add_field(name="cs📣",value="<#1015390439400034334>")
            em.add_field(name="cs📣",value="<#1015390848734724187>")
            em.add_field(name="cs📣",value="<#1015390936798351381>")
            em.add_field(name="cs📣",value="<#1015390977701183559>")
            em.add_field(name="cs📣",value="<#1015391118231339058>")
            em.add_field(name="cs📣",value="<#1015391238704332932>")
            em.add_field(name="Navigation Code:",value="```py\ncs```")
            await interaction.edit_original_message(embed=em)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)  

        elif self.values[0] =="re🏠Real Estate Sector":
            em = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            em.add_field(name="re🏠",value="<#1015398703357505646>")
            em.add_field(name="re🏠",value="<#1015398716062060544>")
            em.add_field(name="re🏠",value="<#1015398609556094986>")
            em.add_field(name="re🏠",value="<#1015398725801226260>")
            em.add_field(name="Navigation Code:",value="```py\nre```")
            await interaction.edit_original_message(embed=em)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)  
        
        elif self.values[0] =="he💉Healthcare Sector":
            em = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            em.add_field(name="he💉",value="<#1015398746453966879>")
            em.add_field(name="he💉",value="<#1015398872132091956>")
            em.add_field(name="he💉",value="<#1015398885214138438>")
            em.add_field(name="he💉",value="<#1015398912049299486>")
            em.add_field(name="he💉",value="<#1015398898971451512>")
            em.add_field(name="he💉",value="<#1015398924426674257>")
            em.add_field(name="Navigation Code:",value="```py\nhe```")
            await interaction.edit_original_message(embed=em)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)  
        elif self.values[0] =="te💿Technology Sector":
            emte = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            emte.add_field(name="te💿",value="<#1015398199785168927>")
            emte.add_field(name="te💿",value="<#1015398409051578418>")
            emte.add_field(name="te💿",value="<#1015398422087467008>")
            emte.add_field(name="te💿",value="<#1015398435656060978>")
            emte.add_field(name="te💿",value="<#1015398530900299806>")
            emte.add_field(name="te💿",value="<#1015398545249009715>")
            emte.add_field(name="te💿",value="<#1015398557668343928>")
            emte.add_field(name="te💿",value="<#1015398585120084018>")
            emte.add_field(name="te💿",value="<#1015398587737329714>")
            emte.add_field(name="te💿",value="<#1015400438541070398>")
            em.add_field(name="Navigation Code:",value="```py\nte```")
            await interaction.edit_original_message(embed=emte)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)  
        elif self.values[0] =="in🌆Industrials Sector": 
            emin = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            emin.add_field(name="in🌆",value="<#1015403820337070181>")
            emin.add_field(name="in🌆",value="<#1015403810249781298>")
            emin.add_field(name="in🌆",value="<#1015398188112420894>")
            emin.add_field(name="in🌆",value="<#1015398139026477156>")
            emin.add_field(name="in🌆",value="<#1015398169921720390>")
            emin.add_field(name="in🌆",value="<#1015398149768089640>")
            emin.add_field(name="in🌆",value="<#1015398129396371586>")
            emin.add_field(name="in🌆",value="<#1015398120248582205>")
            emin.add_field(name="in🌆",value="<#1015398159184314478>")
            emin.add_field(name="in🌆",value="<#1015398110626840606>")
            emin.add_field(name="in🌆",value="<#1015398089516912741>")
            emin.add_field(name="in🌆",value="<#1015398078464925736>")
            emin.add_field(name="in🌆",value="<#1015398068868362240>")
            emin.add_field(name="in🌆",value="<#1015398055266234448>")
            emin.add_field(name="in🌆",value="<#1015397859023147131>")
            emin.add_field(name="Navigation Code:",value="```py\nin```")
            await interaction.edit_original_message(embed=emin)    
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)   
        elif self.values[0] == "cd⛴️Consumer Defensive Sector":
            em = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            em.add_field(name="cd⛴️",value="<#1015394369483849758>")
            em.add_field(name="cd⛴️",value="<#1015394456943472740>")
            em.add_field(name="cd⛴️",value="<#1015394467068514304>")
            em.add_field(name="cd⛴️",value="<#1015394479336865792>")
            em.add_field(name="cd⛴️",value="<#1015394491319975998>")
            em.add_field(name="cd⛴️",value="<#1015394502808195203>")
            em.add_field(name="cd⛴️",value="<#1015394516229963807>")
            em.add_field(name="Navigation Code:",value="```py\ncd```")  
            await interaction.edit_original_message(embed=em)
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)  


        elif self.values[0] =="fs💰Financial Services Sector":
            em = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            em.add_field(name="fs💰",value="<#1015396231050182766>")
            em.add_field(name="fs💰",value="<#1015396387988447242>")
            em.add_field(name="fs💰",value="<#1015397024629268580>")
            em.add_field(name="fs💰",value="<#1015396402400084150>")
            em.add_field(name="fs💰",value="<#1015396459044143225>")
            em.add_field(name="fs💰",value="<#1015396425451962408>")
            em.add_field(name="fs💰",value="<#1015396414014107719>")
            em.add_field(name="fs💰",value="<#1015397020120391700>")
            em.add_field(name="fs💰",value="<#1015396854772531292>")
            em.add_field(name="fs💰",value="<#1015396867028291614>")
            em.add_field(name="Navigation Code:",value="```py\nfs```")
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)  
            await interaction.edit_original_message(embed=em)

        elif self.values[0] == "bm🧱Basic Materials Sector":
            em = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            em.add_field(name="bm🧱",value="<#1015391472121557022>")
            em.add_field(name="bm🧱",value="<#1015391504333807746>")
            em.add_field(name="bm🧱",value="<#1015392688511660142>")
            em.add_field(name="bm🧱",value="<#1015391494263291904>")
            em.add_field(name="bm🧱",value="<#1015391265870856252>")
            em.add_field(name="bm🧱",value="<#1015391482447921212>")
            em.add_field(name="bm🧱",value="<#1015391514458849342>")
            em.add_field(name="bm🧱",value="<#1015391524013477898>")
            em.add_field(name="Navigation Code:",value="```py\nbm```")
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)  
            await interaction.edit_original_message(embed=em)


        elif self.values[0] == "en⚡Energy Sector":
            em = disnake.Embed(title="Sector Monitoring", description=f"```py\nSector monitoring for stock market industries. Each section contains dark pool feeds, quant alerts, unusual options alerts, regulation SHO alerts, and dark pool feeds real-time.```",color=disnake.Colour.random())
            em.add_field(name="en⚡",value="<#1015398944186056744>")
            em.add_field(name="en⚡",value="<#1015399058388561980>")
            em.add_field(name="en⚡",value="<#1015399068480045237>")
            em.add_field(name="Navigation Code:",value="```py\nen```")
            await interaction.send("</navigate channels:1034275861865705476>", ephemeral=True)  
            await interaction.edit_original_message(embed=em)

class PersistentViewBot(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix=commands.when_mentioned)
        self.persistent_views_added = False

    async def on_ready(self):
        if not self.persistent_views_added:
            # Register the persistent view for listening here.
            # Note that this does not send the view to any message.
            # In order to do this you need to first send a message with the View, which is shown below.
            # If you have the message_id you can also pass it as a keyword argument, but for this example
            # we don't have one.
            self.add_view(PersistentView())
            self.add_view(PersistentView2())
            self.persistent_views_added = True

        print(f"Logged in as {self.user} (ID: {self.user.id})")
        print("------")


me = PersistentViewBot()
@commands.is_owner()
@me.command()
async def heybitch(ctx):
    em = disnake.Embed(title="Yes, my lord?")
    await ctx.send(embed=em)

@commands.is_owner()
@me.command()
async def youready(ctx):
    em = disnake.Embed(title="Why of course.. right away sir...")
    await ctx.send(embed=em)
    view = disnake.ui.View()
    loading1 = disnake.ui.Button(label=".", style=disnake.ButtonStyle.red)
    loading2 = disnake.ui.Button(label="..", style=disnake.ButtonStyle.green)
    loading3 = disnake.ui.Button(label="...", style=disnake.ButtonStyle.blurple)
    await ctx.send(embed=em, view=view)
    counter = 0
    while True:
        counter = counter + 1
        view.add_item(loading1)
        await ctx.send(view=view)
        view.add_item(loading2)
        await ctx.send(view=view)
        view.add_item(loading3)
        await ctx.send(view=view)
        sleep(1)
        view.remove_item(loading1)
        view.remove_item(loading2)
        view.remove_item(loading3)
        sleep(6)
        if counter == 1:
            break
        elif counter == 1:
            view = PersistentView2()
            await ctx.send(view=view)


class OtherSelect(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(label="/charlies_vids", description=f"```py\nSearch for videos to watch from my YouTube collection.```", color=disnake.Colour.dark_gold())
        ]


        super().__init__(
            placeholder="Other Slash Commands",
            min_values=1,
            max_values=1,
            options=options
        )

    async def callback(self, interaction: disnake.MessageCommandInteraction):
        if self.values[0] == "/charlies_vids":
            await interaction.response.send_message(f"</charlies_vids:1034275861806989326>")


        
class StockCmdSelect(disnake.ui.Select):
    def __init__(self):
        options =[
            disnake.SelectOption(label="🤖/stock shortinterest"),
            disnake.SelectOption(label="🤖/stock ipos"),
            disnake.SelectOption(label="🤖/stock capitalflow"),
            disnake.SelectOption(label="🤖/stock orderflow"),
            disnake.SelectOption(label="🤖/stock liquidity"),
            disnake.SelectOption(label="🤖/stock criminals"),
            disnake.SelectOption(label="🤖/stock leverage"),
            disnake.SelectOption(label="🤖/stock company_brief"),
            disnake.SelectOption(label="🤖/stock insider_summary"),
            disnake.SelectOption(label="🤖/stock institutions"),

        ] 



        super().__init__(
            placeholder="",
            min_values=1,
            max_values=1,
            custom_id="StockCMDSelect",
            options=options)

    async def callback(self, interaction: disnake.MessageCommandInteraction):
        if self.values[0] == "🤖/stock shortinterest":
            await interaction.send("</stock shortinterest:1034275861941211161>", ephemeral=True)
        elif self.values[0] == "🤖/stock ipos":
            await interaction.send("</stock ipos:1034275861941211161>", ephemeral=True)
        elif self.values[0] == "🤖/stock capitalflow":
            await interaction.send("</stock capitalflow:1034275861941211161>", ephemeral=True)
        elif self.values[0] == "🤖/stock orderflow":
            await interaction.send("</stock orderflow:1034275861941211161>", ephemeral=True)
        elif self.values[0] == "🤖/stock liquidity":
            await interaction.send("</stock liquidity:1034275861941211161>", ephemeral=True)
        elif self.values[0] == "🤖/stock criminals":
            await interaction.send("</stock criminals:1034275861941211161>", ephemeral=True)
        elif self.values[0] == "🤖/stock leverage":
            await interaction.send("/stock leverage:1034275861941211161>", ephemeral=True)
        elif self.values[0] == "🤖/stock company_brief":
            await interaction.send("/stock company_brief:1034275861941211161>", ephemeral=True)
        elif self.values[0] == "🤖/stock insider_summary":
            await interaction.send("/stock insider_summary:1034275861941211161>", ephemeral=True)
        elif self.values[0] == "🤖/stock institutions":
            await interaction.send("/stock institutions:1034275861941211161>", ephemeral=True)




class QuantSelect(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(label="🤖/flow"),
            disnake.SelectOption(label="🤖/stats contract"),
            disnake.SelectOption(label="🤖/stats market"),
            disnake.SelectOption(label="🤖/stats ticker"),
            disnake.SelectOption(label="🤖/dividends today"),
            disnake.SelectOption(label="🤖/dividends tomorrow"),
            disnake.SelectOption(label="🤖/dividends date"),
            disnake.SelectOption(label="🤖/dividends ticker"),
            disnake.SelectOption(label="🤖/dividends calendar"),
            disnake.SelectOption(label="🤖/fib"),
            disnake.SelectOption(label="🤖/earnings calendar"),
            disnake.SelectOption(label="🤖/earnings ticker"),
            disnake.SelectOption(label="🤖/earnings date"),
            disnake.SelectOption(label="🤖/federal-reserve today"),
            disnake.SelectOption(label="🤖/federal-reserve calendar"),
            disnake.SelectOption(label="🤖/sec-filings")]



        super().__init__(
            placeholder="🇶  🇺  🇦  🇳  🇹  🇩  🇦  🇹  🇦",
            min_values=1,
            max_values=1,
            custom_id="QuantDataCmdSelect",
            options=options
        )

    async def callback(self, interaction: disnake.MessageCommandInteraction):
        if self.values[0] == "🤖/flow":
            await interaction.send("<</flow:910724015490998293>```", ephemeral=True)
        elif self.values[0] == "🤖/stats contract":
            await interaction.send("<</stats contract:911140318118838274>```", ephemeral=True)
        elif self.values[0] == "🤖/stats market":
            await interaction.send("<</stats market:911140318118838274>```", ephemeral=True)
        elif self.values[0] == "🤖/stats ticker":
            await interaction.send("<</stats ticker:911140318118838274>```", ephemeral=True)
        elif self.values[0] == "🤖/dividends today":
            await interaction.send("<</dividends today:911140318118838276>```", ephemeral=True)
        elif self.values[0] == "🤖/dividends tomorrow":
            await interaction.send("<</dividends tomorrow:911140318118838276>```", ephemeral=True)
        elif self.values[0] == "🤖/dividends date":
            await interaction.send("<</dividends date:911140318118838276>```", ephemeral=True)
        elif self.values[0] == "🤖/dividends ticker":
            await interaction.send("<</dividends ticker:911140318118838276>```", ephemeral=True)
        elif self.values[0] == "🤖/dividends calendar":
            await interaction.send("<</dividends calendar:911140318118838276>```", ephemeral=True)
        elif self.values[0] == "🤖/fib":
            await interaction.send("<</fib:910724015541334088>```", ephemeral=True)
        elif self.values[0] == "🤖/earnings calendar":
            await interaction.send("<</earnings calendar:911140318118838277>```", ephemeral=True)
        elif self.values[0] == "🤖/earnings ticker":
            await interaction.send("<</earnings ticker:911140318118838277>```", ephemeral=True)
        elif self.values[0] == "🤖/earnings date":
            await interaction.send("<</earnings date:911140318118838277>```", ephemeral=True)
        elif self.values[0] == "🤖/federal-reserve today":
            await interaction.send("<</federal-reserve today:1002066714198024197>```", ephemeral=True)
        elif self.values[0] == "🤖/federal-reserve calendar":
            await interaction.send("<</federal-reserve calendar:1002066714198024197>```", ephemeral=True)
        elif self.values[0] == "🤖/sec-filings":
            await interaction.send("<</sec-filings:1002066714198024198>```", ephemeral=True)


class StreamSelect(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(label="💦/stream time_and_sales"),
            disnake.SelectOption(label="💦/stream crypto"),
            disnake.SelectOption(label="💦/stream double_crypto"),
            disnake.SelectOption(label="💦/stream double_quote"),
            disnake.SelectOption(label="💦/stream topvolume"),

        ]


        super().__init__(
            placeholder="",
            min_values=1,
            max_values=1,
            custom_id="StreamSel1337420",
            options=options)


    async def callback(self, interaction: disnake.MessageCommandInteraction):
        if self.values[0] =="💦/stream time_and_sales":
            await interaction.send("</stream time_and_sales:1034275861865705478>", ephemeral=True)
        elif self.values[0] =="💦/stream crypto":
            await interaction.send("</stream crypto:1034275861865705478>", ephemeral=True)
        elif self.values[0] =="💦/stream double_crypto":
            await interaction.send("</stream double_crypto:1034275861865705478>", ephemeral=True)
        elif self.values[0] == "</stream quote":
            await interaction.send("</stream quote:1034275861865705478>", ephemeral=True)
        elif self.values[0] =="💦/stream double_quote:1034275861865705478 ":
            await interaction.send("</stream double_quote:1034275861865705478> ", ephemeral=True)
        elif self.values[0] =="💦/stream topvolume:1034275861865705478":
            await interaction.send("</stream topvolume:1034275861865705478>", ephemeral=True)

class AnalysisSelect(disnake.ui.Select):
    def __init__(self):
        options = [
            disnake.SelectOption(label="🔍/analysis all_52s", description=f"Choose between near high, near low, new high, or new low."),
            disnake.SelectOption(label="🔍/analysis topshorts", description=f"Returns the top 30 highest shorted stocks."),
            disnake.SelectOption(label="🔍/analysis finscreen", description=f"Input several customizable metrics to screen for the results!"),
            disnake.SelectOption(label="🔍/analysis gaps_up", description=f"Enter the percent gap you want - and the results will populate!"),
            disnake.SelectOption(label="🔍/analysis gaps_down", description=f"Enter the percent gap down you want - and the results will populate!"),
            disnake.SelectOption(label="🔍/analysis rating", description=f"Returns latest analyst buy/hold/sell ratings for a ticker."),
            disnake.SelectOption(label="🔍/analyst", description=f"Returns latest analyst buy/hold/sell ratings for a ticker."),
            disnake.SelectOption(label="🔍/analysis overbought_gap", description=f"Returns a link to tickers that are overbought and have gapped up."),
        ]



        super().__init__(
            placeholder="🔍 Analysis Commands",
            min_values=1,
            max_values=1,
            custom_id="analysisSelect",
            options=options
        )

    async def callback(self, interaction:disnake.MessageCommandInteraction):
        if self.values[0] == "🔍/analysis all_52s":
            await interaction.response.edit_message(f"```py\n🔍 Analysis Commands - {self.values[0]}\n\n"
            "Select between 'new high' 'new low' 'near high' or 'near low' and return 10 tickers from each category.```\n\n"
            f"</analysis all_52s:1025074283942248481>")
        elif self.values[0] == "🔍/analysis topshorts":
            await interaction.response.edit_message(f"```py\n🔍 Analysis Commands - {self.values[0]}\n\n"
            f"Returns the top 30 highest shorted stocks.``` </analysis topshorts:1034275861865705480>")
        
        elif self.values[0] == "🔍/analysis finscreen":
            await interaction.response.edit_message(f"```py\n🔍 Analysis Commands - {self.values[0]}\n\n"
            "Input several customizable metrics to screen for the results!```\n\n"
            "</analysis finscreen:1034275861865705480>")
        
        elif self.values[0] == "🔍/analysis gaps_up":
            await interaction.response.edit_message(f"```py\n🔍 Analysis Commands - {self.values[0]}\n\n"
            "Enter the percent gap you want - and the results will populate!```"
            "</analysis gaps_up:1034275861865705480>")
        elif self.values[0] == "🔍/analysis gaps_down":
            await interaction.response.edit_message(f"```py\n🔍 Analysis Commands - {self.values[0]}\n\n"
            "Enter the percent gap you want - and the results will populate!```"
            "</analysis gaps_down:1034275861865705480>")

            
        
        elif self.values[0] == "🔍/analyst":
            await interaction.response.edit_message(f"```py\n🔍 Analysis Commands - {self.values[0]}\n\n"
            "Returns several analyst ratings for a ticker.```")
            "</analyst:1034275861865705474>"
            
        elif self.values[0] == "🔍/analysis overbought_gap":
            await interaction.response.edit_message(f"```py\n🔍 Analysis Commands - {self.values[0]}\n\n"
            "Returns tickers that have gapped up and are overbought.```"
            "</analysis overbought_gap:1034275861865705480>")



@me.command()
@commands.is_owner()
async def prepare(ctx: commands.Context):
    """Starts a persistent view."""
    # In order for a persistent view to be listened to, it needs to be sent to an actual message.
    # Call this method once just to store it somewhere.
    # In a more complicated program you might fetch the message_id from a database for use later.
    # However this is outside of the scope of this simple example.
    await ctx.send("```py\nSelect a category and the channels will print out for you!```", view=PersistentView())

@me.command()
@commands.is_owner()
async def ready_the_commands(ctx: commands.Context):
    """Starts a persistent view."""
    # In order for a persistent view to be listened to, it needs to be sent to an actual message.
    # Call this method once just to store it somewhere.
    # In a more complicated program you might fetch the message_id from a database for use later.
    # However this is outside of the scope of this simple example.
    await ctx.send("```py\nSelect a command from the dropdown to learn how to use it.```", view=PersistentView2())




class NearHigh(disnake.ui.Select):
    def __init__(self):
        choice = self
        self.choice = choice
        nearhighr = requests.get(url=f"https://quotes-gw.webullfintech.com/api/wlas/ranking/52weeks?regionId=6&rankType={choice}&pageSize=10&order=lastChangeRatio&direction=1")
        nearhighd = nearhighr.json()
        data = nearhighd['data']
        t1 = data[0]
        t1t = t1['ticker']
        #t1name = t1t['name']
        t1sym = t1t['disSymbol']
        #t1exch = t1t['disExchangeCode']
        t1opt = t1t['derivativeSupport']
        #t1close = t1t['close']
        #t1open = t1t['open']
        #t1low = t1t['low']
        t152h = t1t['fiftyTwoWkHigh']
        t152l = t1t['fiftyTwoWkLow']
        t1vol = round(float(t1t['volume'])*0.000001,ndigits=2)#million
        #t1vr = t1t['vibrateRatio']


        t1v = t1['values']
        #t1week = t1v['weeksPrice']
        #t1hist = t1v['historyPrice']
        #t1lpch = round(float(t1v['lastChangeRatio'])*100,ndigits=2)



        t2 = data[1]
        t2t = t2['ticker']
        t2name = t2t['name']
        t2sym = t2t['disSymbol']
        #t2exch = t2t['disExchangeCode']
        t2opt = t2t['derivativeSupport']
        #t2close = t2t['close']
        #t2open = t2t['open']
        #t2low = t2t['low']
        t252h = t2t['fiftyTwoWkHigh']
        t252l = t2t['fiftyTwoWkLow']
        t2vol = round(float(t2t['volume'])*0.000001,ndigits=2)#million
        #t2vr = t2t['vibrateRatio']



        t2v = t2['values']
        #t2week = t2v['weeksPrice']
        #t2hist = t2v['historyPrice']
        #t2lpch = round(float(t2v['lastChangeRatio'])*100,ndigits=2)


        t3 = data[2]
        t3t = t3['ticker']
        #t3name = t3t['name']
        t3sym = t3t['disSymbol']
        #t3exch = t3t['disExchangeCode']
        t3opt = t3t['derivativeSupport']
        #t3close = t3t['close']
        #t3open = t3t['open']
        #t3low = t3t['low']
        t352h = t3t['fiftyTwoWkHigh']
        t352l = t3t['fiftyTwoWkLow']
        t3vol = round(float(t3t['volume'])*0.000001,ndigits=2)#million

        t3v = t3t['vibrateRatio']
        t3v = t3['values']
        ##t3week = t3v['weeksPrice']
        #t3hist = t3v['historyPrice']
        #t3lpch = round(float(t3v['lastChangeRatio'])*100,ndigits=2)

        t4 = data[3]
        t4t = t4['ticker']
        #t4name = t4t['name']
        t4sym = t4t['disSymbol']
        #t4exch = t4t['disExchangeCode']
        t4opt = t4t['derivativeSupport']
        #t4close = t4t['close']
        #t4open = t4t['open']
        #t4low = t4t['low']
        t452h = t4t['fiftyTwoWkHigh']
        t452l = t4t['fiftyTwoWkLow']
        t4vol = round(float(t4t['volume'])*0.000001,ndigits=2)#million
        #t4vr = t4t['vibrateRatio']

        t4v = t4['values']
        #t4week = t4v['weeksPrice']
        #t4hist = t4v['historyPrice']
        #t4lpch = round(float(t4v['lastChangeRatio'])*100,ndigits=2)

        t5 = data[4]
        t5t = t5['ticker']
        #t5name = t5t['name']
        t5sym = t5t['disSymbol']
        #t5exch = t5t['disExchangeCode']
        t5opt = t5t['derivativeSupport']
        #t5close = t5t['close']
        #t5open = t5t['open']
        #t5low = t5t['low']
        t552h = t5t['fiftyTwoWkHigh']
        t552l = t5t['fiftyTwoWkLow']
        t5vol = round(float(t5t['volume'])*0.000001,ndigits=2)#million
        #t5vr = t5t['vibrateRatio']

        t5v = t5['values']
        #t5week = t5v['weeksPrice']
        #t5hist = t5v['historyPrice']
        #t5lpch = round(float(t5v['lastChangeRatio'])*100,ndigits=2)

        t6 = data[5]
        t6t = t6['ticker']
        #t6name = t6t['name']
        t6sym = t6t['disSymbol']
        #t6exch = t6t['disExchangeCode']
        t6opt = t6t['derivativeSupport']
        #t6close = t6t['close']
        #t6open = t6t['open']
        #t6low = t6t['low']
        t652h = t6t['fiftyTwoWkHigh']
        t652l = t6t['fiftyTwoWkLow']
        t6vol = round(float(t6t['volume'])*0.000001,ndigits=2)#million


        t6v = t6['values']
        #t6week = t6v['weeksPrice']
        #t6hist = t6v['historyPrice']
        #t6lpch = round(float(t6v['lastChangeRatio'])*100,ndigits=2)

        t7 = data[6]
        t7t = t7['ticker']
        #t7name = t7t['name']
        t7sym = t7t['disSymbol']
        #t7exch = t7t['disExchangeCode']
        t7opt = t7t['derivativeSupport']
        #t7close = t7t['close']
        #t7open = t7t['open']
        #t7low = t7t['low']
        t752h = t7t['fiftyTwoWkHigh']
        t752l = t7t['fiftyTwoWkLow']
        t7vol = round(float(t7t['volume'])*0.000001,ndigits=2)#million
        t7v = t7['values']
        #t7week = t7v['weeksPrice']
        #t7hist = t7v['historyPrice']
        #t7lpch = round(float(t7v['lastChangeRatio'])*100,ndigits=2)
        t8 = data[7]
        t8t = t8['ticker']
        #t8name = t8t['name']
        t8sym = t8t['disSymbol']
        #t8exch = t8t['disExchangeCode']
        t8opt = t8t['derivativeSupport']
        #t8close = t8t['close']
        #t8open = t8t['open']
        #t8low = t8t['low']
        t852h = t8t['fiftyTwoWkHigh']
        t852l = t8t['fiftyTwoWkLow']
        t8vol = round(float(t8t['volume'])*0.000001,ndigits=2)#million
        t8v = t8['values']
        t8week = t8v['weeksPrice']
        #t8hist = t8v['historyPrice']
        #t8lpch = round(float(t8v['lastChangeRatio'])*100,ndigits=2)
        t9 = data[8]
        t9t = t9['ticker']
        #t9name = t9t['name']
        t9sym = t9t['disSymbol']
        #t9exch = t9t['disExchangeCode']
        t9opt = t9t['derivativeSupport']
        #t9close = t9t['close']
        #t9open = t9t['open']
        #t9low = t9t['low']
        t952h = t9t['fiftyTwoWkHigh']
        t952l = t9t['fiftyTwoWkLow']
        t9vol = round(float(t9t['volume'])*0.000001,ndigits=2)#million
        t9v = t9['values']
        #t9week = t9v['weeksPrice']
        #t9hist = t9v['historyPrice']
        #t9lpch = round(float(t9v['lastChangeRatio'])*100,ndigits=2)
        t10t = data[9]
        #t10t = t10['ticker']
        #t10name = t10t['name']
        t10sym = t10t['disSymbol']
        #t10exch = t10t['disExchangeCode']
        t10opt = t10t['derivativeSupport']
        #t10close = t10t['close']
        #t10open = t10t['open']
        #t10low = t10t['low']
        t1052h = t10t['fiftyTwoWkHigh']
        t1052l = t10t['fiftyTwoWkLow']
        t10vol = round(float(t10t['volume'])*0.000001,ndigits=2)#million


        t10v = t10t['values']
        #t10week = t10v['weeksPrice']
        #t10hist = t10v['historyPrice']
        #t10lpch = round(float(t10v['lastChangeRatio'])*100,ndigits=2)
        options=[
            disnake.SelectOption(label=f"{t1sym} | Has Options? {t1opt}", value=1, description=f"52w High: {t152h} | 52w Low: {t152l} | Volume: {t1vol}"),
            disnake.SelectOption(label=f"{t2sym} | Has Options? {t2opt}", description=f"52w High: {t252h} | 52w Low: {t252l} | Volume: {t2vol}"),
            disnake.SelectOption(label=f"{t3sym} | HasOptions? {t3opt}", description=f"52w High: {t352h} | 52w Low: {t352l} | Volume: {t3vol}"),
            disnake.SelectOption(label=f"{t4sym} | Has Options? {t4opt}", description=f"52w High: {t452h} | 52w Low: {t452l} | Volume: {t4vol}"),
            disnake.SelectOption(label=f"{t5sym} | Has Options? {t5opt}", description=f"52w High: {t552h} | 52w Low: {t552l} | Volume: {t5vol}"),
            disnake.SelectOption(label=f"{t6sym} | Has Options? {t6opt}", description=f"52w High: {t652h} | 52w Low: {t652l} | Volume: {t6vol}"),
            disnake.SelectOption(label=f"{t7sym} | Has Options? {t7opt}", description=f"52w High: {t752h} | 52w Low: {t752l} | Volume: {t7vol}"),
            disnake.SelectOption(label=f"{t8sym} | Has Options? {t8opt}", description=f"52w High: {t852h} | 52w Low: {t852l} | Volume: {t8vol}"),
            disnake.SelectOption(label=f"{t9sym} | Has Options? {t9opt}", description=f"52w High: {t952h} | 52w Low: {t952l} | Volume: {t9vol}"),
            disnake.SelectOption(label=f"{t10sym} | Has Options? {t10opt}", description=f"52w High: {t1052h} | 52w Low: {t1052l} | Volume: {t10vol}")]

        super().__init__(
            placeholder=f" 5️⃣2️⃣ 🇼 🇪 🇪 🇰 | {choice}",
            max_values=1,
            min_values=1,
            custom_id="choicescmd",
            options=options
        )
    async def callback(self, interaction: disnake.MessageCommandInteraction):
        if self.values[0] == self.values[0]:
            em = disnake.Embed(title=f"Meant to just display the results!", description="Try running the </everything:1034275861806989330> command on the results!")
            await interaction.response.edit_message(embed=em)




class LowFloatView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    data = client.low_float()
    index0 = data[0]
    index1 = data[1]
    index2 = data[2]
    index3 = data[3]
    index4 = data[4]
    index5 = data[5]
    index6 = data[6]
    index7 = data[7]
    index8 = data[8]
    index9 = data[9]
    index10 = data[10]
    index11 = data[11]
    index12 = data[12]
    index13 = data[13]
    index14 = data[14]
    ticker0 = index0['ticker']
    ticker1 = index1['ticker']
    ticker2 = index2['ticker']
    ticker3 = index3['ticker']
    ticker4 = index4['ticker']
    ticker5 = index5['ticker']
    ticker6 = index6['ticker']
    ticker7 = index7['ticker']
    ticker8 = index8['ticker']
    ticker9 = index9['ticker']
    ticker10 = index10['ticker']
    ticker11 = index11['ticker']
    ticker12 = index12['ticker']
    ticker13 = index13['ticker']
    ticker14 = index14['ticker']
    floating_shares0 = index0['floating_shares']
    floating_shares1 = index1['floating_shares']
    floating_shares2 = index2['floating_shares']
    floating_shares3 = index3['floating_shares']
    floating_shares4 = index4['floating_shares']
    floating_shares5 = index5['floating_shares']
    floating_shares6 = index6['floating_shares']
    floating_shares7 = index7['floating_shares']
    floating_shares8 = index8['floating_shares']
    floating_shares9 = index9['floating_shares']
    floating_shares10 = index10['floating_shares']
    floating_shares11 = index11['floating_shares']
    floating_shares12 = index12['floating_shares']
    floating_shares13 = index13['floating_shares']
    floating_shares14 = index14['floating_shares']

    @disnake.ui.button(label=f"#1: {ticker0} | Float: {floating_shares0}", style= disnake.ButtonStyle.grey)
    async def buttonf(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())
    @disnake.ui.button(label=f"#1: {ticker1} | Float: {floating_shares1}", style= disnake.ButtonStyle.grey)
    async def button1(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())
    @disnake.ui.button(label=f"#1: {ticker2} | Float: {floating_shares2}", style= disnake.ButtonStyle.grey)
    async def button2(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())
    @disnake.ui.button(label=f"#1: {ticker3} | Float: {floating_shares3}", style= disnake.ButtonStyle.grey)
    async def button3(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())
    @disnake.ui.button(label=f"#1: {ticker4} | Float: {floating_shares4}", style= disnake.ButtonStyle.grey)
    async def button4(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())
    @disnake.ui.button(label=f"#1: {ticker5} | Float: {floating_shares5}", style= disnake.ButtonStyle.grey)
    async def button5(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())
    @disnake.ui.button(label=f"#1: {ticker6} | Float: {floating_shares6}", style= disnake.ButtonStyle.grey)
    async def button6(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())
    @disnake.ui.button(label=f"#1: {ticker7} | Float: {floating_shares7}", style= disnake.ButtonStyle.grey)
    async def button7(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())
    @disnake.ui.button(label=f"#1: {ticker8} | Float: {floating_shares8}", style= disnake.ButtonStyle.grey)
    async def button8(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())
    @disnake.ui.button(label=f"#1: {ticker9} | Float: {floating_shares9}", style= disnake.ButtonStyle.grey)
    async def button9(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())
    @disnake.ui.button(label=f"#1: {ticker10} | Float: {floating_shares10}", style= disnake.ButtonStyle.grey)
    async def button10(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())
    @disnake.ui.button(label=f"#1: {ticker11} | Float: {floating_shares11}", style= disnake.ButtonStyle.grey)
    async def button11(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())
    @disnake.ui.button(label=f"#1: {ticker12} | Float: {floating_shares12}", style= disnake.ButtonStyle.grey)
    async def button12(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())
    @disnake.ui.button(label=f"#1: {ticker13} | Float: {floating_shares13}", style= disnake.ButtonStyle.grey)
    async def button13(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())
    @disnake.ui.button(label=f"#1: {ticker14} | Float: {floating_shares14}", style= disnake.ButtonStyle.grey)
    async def button14(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Stocks with Low Free Floats", description=f"Top 15 Tickers with the lowest Floats", color = disnake.Colour.dark_orange())
        em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Apperate")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await inter.response.edit_message(embed=em, view=LowFloatView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"Welcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. \n\n Simply click the buttons to navigate where desired. \n\n \*\*/fudstop\*\*\.", color = disnake.Colour.dark_green())
        
        em.add_field(name="Navigation Tooltip:", value="You just went **🏡 Home** from the **Stocks with lowest free float Menu**")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=em, view=MainView2())



class PlayView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        self.add_item(LowFloatDropdown())



class DirectionDropdownView(View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(DirectionDropdown())




class ShortInterestView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        self.add_item(TradingMainMenuDropdown())

        data = client.short_interest()
        index0 = data[0]
        index1 = data[1]
        index2 = data[2]
        index3 = data[3]
        index4 = data[4]
        index5 = data[5]
        index6 = data[6]
        index7 = data[7]
        index8 = data[8]
        index9 = data[9]
        index10 = data[10]
        index11 = data[11]
        index12 = data[12]
        index13 = data[13]
        index14 = data[14]
        percentshort0 = index0['%Float Short']
        percentshort1 = index1['%Float Short']
        percentshort2 = index2['%Float Short']
        percentshort3 = index3['%Float Short']
        percentshort4 = index4['%Float Short']
        percentshort5 = index5['%Float Short']
        percentshort6 = index6['%Float Short']
        percentshort7 = index7['%Float Short']
        percentshort8 = index8['%Float Short']
        percentshort9 = index9['%Float Short']
        percentshort10 = index10['%Float Short']
        percentshort11 = index11['%Float Short']
        percentshort12 = index12['%Float Short']
        percentshort13 = index13['%Float Short']
        percentshort14 = index14['%Float Short']
        cpercentshort0=float(percentshort0)
        cpercentshort1 =float(percentshort1)
        cpercentshort2 =float(percentshort2)
        cpercentshort3 =float(percentshort3)
        cpercentshort4 =float(percentshort4)
        cpercentshort5 =float(percentshort5)
        cpercentshort6 =float(percentshort6)
        cpercentshort7 =float(percentshort7)
        cpercentshort8 =float(percentshort8)
        cpercentshort9 =float(percentshort9)
        cpercentshort10 =float(percentshort10)
        cpercentshort11 =float(percentshort11)
        cpercentshort12 =float(percentshort12)
        cpercentshort13 =float(percentshort13)
        cpercentshort14 =float(percentshort14)
        short0=round(cpercentshort0, ndigits=2)
        short1=round(cpercentshort1, ndigits=2)
        short2=round(cpercentshort2, ndigits=2)
        short3=round(cpercentshort3, ndigits=2)
        short4=round(cpercentshort4, ndigits=2)
        short5=round(cpercentshort5, ndigits=2)
        short6=round(cpercentshort6, ndigits=2)
        short7=round(cpercentshort7, ndigits=2)
        short8=round(cpercentshort8, ndigits=2)
        short9=round(cpercentshort9, ndigits=2)
        short10=round(cpercentshort10, ndigits=2)
        short11=round(percentshort11, ndigits=2)
        short12=round(cpercentshort12, ndigits=2)
        short13=round(cpercentshort13, ndigits=2)
        short14=round(cpercentshort14, ndigits=2)
        rank0 = index0['Rank']
        rank1 = index1['Rank']
        rank2 = index2['Rank']
        rank3 = index3['Rank']
        rank4 = index4['Rank']
        rank5 = index5['Rank']
        rank6 = index6['Rank']
        rank7 = index7['Rank']
        rank8 = index8['Rank']
        rank9 = index9['Rank']
        rank10 = index10['Rank']
        rank11 = index11['Rank']
        rank12 = index12['Rank']
        rank13 = index13['Rank']
        rank14 = index14['Rank']
        ticker0 = index0['Ticker']
        ticker1 = index1['Ticker']
        ticker2 = index2['Ticker']
        ticker3 = index3['Ticker']
        ticker4 = index4['Ticker']
        ticker5 = index5['Ticker']
        ticker6 = index6['Ticker']
        ticker7 = index7['Ticker']
        ticker8 = index8['Ticker']
        ticker9 = index9['Ticker']
        ticker10 = index10['Ticker']
        ticker11 = index11['Ticker']
        ticker12 = index12['Ticker']
        ticker13 = index13['Ticker']
        ticker14 = index14['Ticker']
        
        @disnake.ui.button(label=f"#{rank0}| {ticker0}: {short0}%", style= disnake.ButtonStyle.grey)
        async def button1(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())
        @disnake.ui.button(label=f"#{rank1}| {ticker1}: {short1}%", style= disnake.ButtonStyle.grey)
        async def button2(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())
        @disnake.ui.button(label=f"#{rank2}| {ticker2}: {short2}%", style= disnake.ButtonStyle.grey)
        async def button3(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())
        @disnake.ui.button(label=f"#{rank3}| {ticker3}: {short3}%", style= disnake.ButtonStyle.grey)
        async def button4(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())
        @disnake.ui.button(label=f"#{rank4}| {ticker4}: {short4}%", style= disnake.ButtonStyle.grey)
        async def button5(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())
        @disnake.ui.button(label=f"#{rank5}| {ticker5}: {short5}%", style= disnake.ButtonStyle.grey)
        async def button6(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())
        @disnake.ui.button(label=f"#{rank6}| {ticker6}: {short6}%", style= disnake.ButtonStyle.grey)
        async def button7(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())
        @disnake.ui.button(label=f"#{rank7}| {ticker7}: {short7}%", style= disnake.ButtonStyle.grey)
        async def button8(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())
        @disnake.ui.button(label=f"#{rank8}| {ticker8}: {short8}%", style= disnake.ButtonStyle.grey)
        async def button9(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())
        @disnake.ui.button(label=f"#{rank9}| {ticker9}: {short9}%", style= disnake.ButtonStyle.grey)
        async def button10(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())
        @disnake.ui.button(label=f"#{rank10}| {ticker10}: {short10}%", style= disnake.ButtonStyle.grey)
        async def button11(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())
        @disnake.ui.button(label=f"#{rank11}| {ticker11}:{short11}%", style= disnake.ButtonStyle.grey)
        async def button12(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())
        @disnake.ui.button(label=f"#{rank12}| {ticker12}: {short12}%", style= disnake.ButtonStyle.grey)
        async def button13(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())
        @disnake.ui.button(label=f"#{rank13}| {ticker13}: {short13}%", style= disnake.ButtonStyle.grey)
        async def button14(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())
        @disnake.ui.button(label=f"#{rank14}| {ticker14}: {short14}%", style= disnake.ButtonStyle.grey)
        async def button15(self,inter: disnake.AppCmdInter):
            em = disnake.Embed(title=f"Highest Short Interest Tickers", description=f"As you all are aware - the FINRA Short Settlement Window is a great time to take advantage of: \n\n"
            "#1: Heavy FTD stocks \n\n #2: Heavy short interest stocks. Short settlement windows happen twice per month, and are scheduled ahead of time. Don't forget this! \n\n **Use the picture below to view the up and coming short windows. (left to right - each one is a window)", color=disnake.Colour.dark_orange())
            em.set_image(url="https://i.ibb.co/TPqKvj8/shortwindow.png")
            em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
            em.set_footer(icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif", text="Implemented by Fudstop Trading, Data Provided By Stocksera")
            await inter.response.edit_message(embed = em, view=ShortInterestView())

        @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
        async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
            em = disnake.Embed(title="🏡 Home Menu",description=f"Welcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. \n\n Simply click the buttons to navigate where desired. \n\n \*\*/fudstop\*\*\.", color = disnake.Colour.dark_green())
            
            em.add_field(name="Navigation Tooltip:", value="You just went **🏡 Home** from the **Tickers with high Short Interest List**")
            em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
            await interaction.response.edit_message(embed=em, view=MainView2())




class TopOptionsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self, interaction: disnake.ApplicationCommandInteraction, ):
        em = disnake.Embed(title="🏡 Home Menu", description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more.``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())
        em.add_field(name="Navigation Tooltip:", value="```py\nYou just went 🏡 'Home'```")

        await interaction.response.edit_message(embed=em, view=MainView2())
    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self, interaction: disnake.ApplicationCommandInteraction, ):
        em= disnake.Embed(title="You just went **BACK** from **Top Options Explanation**", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(embed = em, view = LearnView())
class CoreDropDown(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(
                label="🧠The Alpha Screener and Plays",
                description="Learn about how to use Alphaquery to find play candidates.",
                ),
            disnake.SelectOption(
                label="Stay IN THE MONEY🚮",
                description="Learn why you stick to in the money.",
                ),
            disnake.SelectOption(
                label="❌Exit Strategy❌",
                description="Learn best practices for when to exit if the trade goes against you.",
                ),
            disnake.SelectOption(
                label="Never Buy The Ask🙅‍♂️", description="Don't be an ape. Don't slap that ask.",
                ),
            disnake.SelectOption(
                label="Avoid Corporate Actions⭕", description="Avoid corporate actions! Learn what to look for.",
                ),]
        super().__init__(

            placeholder="🔺 🇨  🇴  🇷  🇪 🔻",
            min_values=1,
            max_values=1,
            custom_id="mainmenu24",
            options=options,
            )

    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "🧠The Alpha Screener and Plays":
            em = disnake.Embed(title="Finding your play opportunities", description="```py\nThe process has been made pretty simple! Simply run the``` ```py\n /fudstop``` ```py\ncommand - and you can run the 'core' and 'put' screeners that will return tickers that fit our core logic criteria.``` ```py\nThe criteria is as follow: \n\n 1. MUST HAVE HAD EARNINGS REPORT WITHIN THE LAST 10 DAYS \n\n 2. MUST HAVE AN RSI LOWER THAN 30, OR GREATER THAN 70. \n\n 3. MUST HAVE A VISIBLE DAILY GAP THAT OCCURS ON EARNINGS OR THE DAY AFTER EARNINGS.``` ```py\nThe screener scans for these specific things OTHER than the gap - which is why you need to make sure when checking plays that you verify with your own eyes that they indeed meet all three criteria. \n\n 2/3 of the criteria has been met for you by default. Use the process and you'll scale consistent gains over-time.```", color=disnake.Colour.random())
            em.set_footer(text="Implemented by FUDSTOP Trading")
            em.add_field(name="IMPORTANT NOTE 📒", value="```py\nUTILIZE PAPER TRADING!!!!!! THESE PLAYS ARE DELIVERED DAILY - YOU CAN EASILY TEST WITH PAPER BEFORE RISKING YOUR OWN CAPITAL.```")

            await inter.response.edit_message(embed=em)
        elif self.values[0] == "❌Exit Strategy❌":

            embed = disnake.Embed(title="❌Exit Strategy❌", color = disnake.Colour.random())
            embed.add_field(name="❌Exit Strategy❌", value="```py\nYour exit strategy is simple - if you are pushed out of the money - EXIT. For example: If you buy a put at $40 and the price goes to $40.50 - SELL.```", inline = True)
            embed.set_image(url="https://i.ibb.co/gSM3S52/CORPACTION.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await inter.response.edit_message(embed=embed, view=AvoidView())
        elif self.values[0] == "Stay IN THE MONEY🚮":
            embed = disnake.Embed(title="Stay IN THE MONEY🚮", color = disnake.Colour.random())
            embed.add_field(name="Stay IN THE MONEY🚮", value="```py\nGet in the habit of buying IN THE MONEY``` ```py\nYES - In the money contracts are more expensive - because they hold more VALUE. \n\n When sitting out of the money - not only do you have zero intrinsic value - but theta will eat away at your cost average much faster. Play it safe and stick to what works - IN THE MONEY.``` ```py\nIN THE MONEY FOR PUTS:\nAny strike ABOVE the current price. \n\n IN THE MONEY FOR CALLS:\nAny strike **BELOW** the current price.```", inline = True)
            embed.set_image(url="https://i.ibb.co/Rjz0wwz/itmotm.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await inter.response.edit_message(embed=embed, view=AvoidView())
        elif self.values[0] == "Never Buy The Ask🙅‍♂️":
            embed = disnake.Embed(title="Never Buy The Ask🙅‍♂️", color = disnake.Colour.random())
            embed.add_field(name="Never Buy The Ask🙅‍♂️", value="```py\nNEVER BUY THE ASK!``` ```py\nWhen you buy the ask, you're paying a PREMIUM. With illiquid options - always buy between the MID and the BID. \n\n If it helps - set-up your options chain where the ask price is not visible. Out of sight out of mind!```", inline = True)
            embed.set_image(url="https://i.ibb.co/m0hzrzx/noask.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await inter.response.edit_message(embed=embed, view=AvoidView())
        elif self.values[0] == "Avoid Corporate Actions⭕":
            embed = disnake.Embed(title="Avoid Corporate Actions⭕", color = disnake.Colour.random())
            embed.add_field(name="Avoid Corporate Actions", value="```py\nWhen you see a super over-bought RSI that gaps up on the 'daily' and consolidates - look to the news to confirm a corporate action. Buyouts, mergers, splits, reverse splits, etc. are corporate actions - and should be avoided. \n\n This image here is exactly what to avoid.```", inline = True)
            embed.set_image(url="https://i.ibb.co/gSM3S52/CORPACTION.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await inter.response.edit_message(embed=embed, view=AvoidView())
        elif self.values[0] == "Avoid Weekly Expirations🗓️":
            embed = disnake.Embed(title="Avoid Weekly Expirations🗓️", color = disnake.Colour.random())
            embed.add_field(name="Avoid Weekly Expirations🗓️", value="```py\nWeekly expirations have more liquidity, and are typically more popular. Avoid them for best results when utilizing the core logic in MOST cases.```", inline = True)
            embed.set_image(url="https://i.ibb.co/c3PvNMH/weeklymonthly.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await inter.response.edit_message(embed=embed, view=AvoidView())


class CoreView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)
        self.add_item(CoreDropDown())
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="🅰️LPHAQUERY", url=f"https://www.alphaquery.com/saved-screens"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="🟢 Core Calls".center(1, " "), url=f"https://www.alphaquery.com/stock-screener/600010230?run=1"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="🔴 Core Puts".center(1, " "), url=f"https://www.alphaquery.com/stock-screener/600010229?run=1"))


class VideoSelect(disnake.ui.Select):
    def __init__(self):
    
        options= [
            disnake.SelectOption( label=f"🇨🇳 🇨 🇭 🇮 🇳 🇦"),
            disnake.SelectOption( label=f"🇩 🇹 🇨 🇨 / 🇩 🇹 🇨"),
            disnake.SelectOption( label=f"🇴 🇨 🇨"),
            disnake.SelectOption( label=f"🇳 🇸 🇨 🇨"),
            disnake.SelectOption( label=f"🇫 ℹ️ 🇳 🇷 🇦"),
            disnake.SelectOption( label=f"🇸 🇫 🇹  🇸 🇪 🇷 🇻 ℹ️ 🇨 🇪"),
            disnake.SelectOption( label=f"🇳 🇸 🇫 🇷  🇷 🇦 🇹 ℹ️ 🇴"),
            disnake.SelectOption( label=f"🇴 🇵 🇹 ℹ️ 🇴 🇳 🇸 1️⃣ 0️⃣ 1️⃣"),
            disnake.SelectOption( label=f"🇨 🇧 🇴 🇪"),
            disnake.SelectOption( label=f"🇮 🇨 🇪"),
            disnake.SelectOption( label=f"🇪 🇹 🇫 🇸"),
            disnake.SelectOption( label=f"🇳 🇾 🇸 🇪"),]

        super().__init__(
        placeholder=f"🇲 🇦 🇷 🇰 🇪 🇹 📽️ 🇻 ℹ️ 🇩 🇸", 
        min_values=1, 
        max_values=1, 
        custom_id=f"marketvids",
        options=options)

    async def callback(self, interaction: disnake.MessageCommandInteraction):
        await interaction.response.defer(with_message=True, ephemeral=True)
        if self.values[0] == "🇨🇳 🇨 🇭 🇮 🇳 🇦":
            await interaction.edit_original_message(view=ChinaView())
        elif self.values[0] == "🇩 🇹 🇨 🇨 / 🇩 🇹 🇨":
            await interaction.edit_original_message(view=DTCCView())
        elif self.values[0] == "🇴 🇨 🇨":
            await interaction.edit_original_message(view=OCCView())
        elif self.values[0] == "🇳 🇸 🇨 🇨":
            await interaction.edit_original_message(view=NSCCView())
        elif self.values[0] == "🇫 ℹ️ 🇳 🇷 🇦":
            await interaction.edit_original_message(view=FINRAView())
        elif self.values[0] == "🇸 🇫 🇹  🇸 🇪 🇷 🇻 ℹ️ 🇨 🇪":
            await interaction.edit_original_message(view=SFTView())
        elif self.values[0] == "🇳 🇸 🇫 🇷  🇷 🇦 🇹 ℹ️ 🇴":
            await interaction.edit_original_message(view=NSFRView())
        elif self.values[0] == "🇴 🇵 🇹 ℹ️ 🇴 🇳 🇸 1️⃣ 0️⃣ 1️⃣":
            await interaction.edit_original_message(view=Opt101View())
        elif self.values[0] == "🇨 🇧 🇴 🇪":
            await interaction.edit_original_message(view=CBOEView())
        elif self.values[0] == "🇮 🇨 🇪":
            await interaction.edit_original_message(view=ICEView())
        elif self.values[0] == "🇪 🇹 🇫 🇸":
            await interaction.edit_original_message(view=ETFView())
        elif self.values[0] == "🇳 🇾 🇸 🇪":
            await interaction.edit_original_message(view=NyseVIDView())


class NyseVIDView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The Designated Market Maker👷‍♂️", url="https://youtu.be/zFXZRspjOxY" ))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Dark Pools, Dark Fibers, and the NYSE🧵", url="https://youtu.be/0073Jg8hY-4"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The NYSE Adopts the Retail Order Type🚬",url="https://youtu.be/PVFECoLEIpU"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-47 | The OX and Pillar Systems🐂", url="https://youtu.be/tZ4M0vDj37s"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NYSE-ARCA-2021-58 || Options Fee Schedule Modifications (Liquidity)💦", url="https://youtu.be/b4KdRT9uKmE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEArca-2021-55 | Options Series⭕", url="https://youtu.be/hHz6QBoF5tE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSE-2021-40 | Trading Halt Permeance🚫", url="https://youtu.be/lLnCbYqf1W0"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Retail Orders cannot be executed by Algorithims🤖", url="https://youtu.be/DjegbrqKnSY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEArca-2021-63 | Risk / Hedging🌳", url="https://youtu.be/qH_gVxNWCcI"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-66 Reformat the Basic Rates Section➿", url="https://youtu.be/epkyjA2y8Sk"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSE-2021-045 Acquisition Spinoffs📴", url="https://youtu.be/yiZwfLwySVM"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-74 | A highly Competitive Market☠️", url="https://youtu.be/VAjXpBv4O3o"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-84 | Proxy Portfolios🥠", url="https://youtu.be/kSrV-Td6d4A"))# \n Learn about proxy portfolios. It's absurd to say the least.", inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NYSE CEO Can now Halt Trading for up to Two Days2️⃣",url="https://youtu.be/1S7kzaT4FYo"))# \n The NYSE CEO can now halt trading for up to two days at his own discretion.", inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEArca-2021-109 | Liquidity and Price Discovery🔎", url="https://youtu.be/53ptYMUqudE"))# \n NYSEARCA refers to the market share crisis happening in the markets.", inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The NYSE Gives Special treatment to ADRs.💌", url="https://youtu.be/V8ZjerMaq58"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSENAT-2022-06 | Directed Orders Added on Exchange🎯", url="https://youtu.be/0q-QndhzuBU"))# inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSE-2022-04 | Integrated Market Making🎊",url="https://youtu.be/8lr3Y0Xqp8w")) #\n SEC Adopts a new type of Market Making - Integrated Market Making", inline=False)


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="video menu.", color=disnake.Colour.dark_gold())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=VideoView())

class SmilesView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None
)

    @disnake.ui.button(label="Characteristics of Smiles", style=disnake.ButtonStyle.blurple)
    async def characteristics(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="Option Smiles and Earnings", color=disnake.Colour.random())
        embed.add_field(name="SMILES CAN OCCUR ON BOTH THE CALL AND PUT SIDE", value ="An ITM smile for puts would be an OTM smile for calls, and vise versa. We are playing the OTM smiles (either call or put) because it is highly unusual for an options contract to have the lowest IV out of the money. ")
        embed.add_field(name="EVEN IF THE PLAY GOES AGAINST YOU - THERE IS STILL HOPE FOR PROFIT.", value="Using smiles as directional indicator is a great way to use this strategy. Unless the smile moves IN THE MONEY, or close to ATM, it should still pan out - as proven by plays we've already played like MSFT, and AMD, AND NFLX.")
        embed.set_image(url="https://i.ibb.co/2ZN6pcD/SMILES.png")
        embed.set_thumbnail(url="https://i.ibb.co/mz4MSh7/SMILES-MOVE.pn")
        await interaction.response.edit_message(embed=embed, view=SmilesView())


    @disnake.ui.button(label="Earnings", style=disnake.ButtonStyle.blurple, )
    async def earnings( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Option Smiles and Earnings", description="If you've been in this group for a bit - you'll remember where we started: GAPS. **since then, gaps have always been an essential part of our strategy, and nothing has changed there.** \n\n OPTION SMILES ARE AN INDICATION OF FUTURE PRICE ACTION DUE TO EARNINGS (positive news).", url="https://1drv.ms/x/s!AgLOXVUYbs6VhYMswtMd9SvCFGeA4w?e=g57FaY", color=disnake.Colour.random())
        embed.set_image(url="https://media.discordapp.net/attachments/896207280117264434/955135923530629190/816.png?width=789&height=629")
        embed.add_field(name="HOW TO FIND THE LIST", value="First - use the /sp500 command to get a list of all tickers in the sp500. Take that list - and copy/paste it into alphaquery, and then select next earnings report date for the list of tickers. This will return a giant list of sp500 components we can sort by date to have a scheduled list of plays!")
        await interaction.response.edit_message(embed=embed, view=SmilesView())

    @disnake.ui.button(label="Affected Tickers", style=disnake.ButtonStyle.blurple, )
    async def affected( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Option Smiles Constituents", description=" https://www.sec.gov/rules/sro/occ/2022/34-95319.pdf \n\n The filing above is the bread and butter for why this works. It clearly states in the filing that they are trying to remedy the options methodology for calculating RISK. \n\n In doing this - they're specifically targeting components of the SP500 index for the new methodology, which are the tickers we should be playing for SMILES near earnings.", color=disnake.Colour.random())
        embed.set_image(url="https://media.discordapp.net/attachments/896207280117264434/955135923530629190/816.png?width=789&height=629")
        embed.add_field(name="Sp500 earnings list by date", value="https://1drv.ms/x/s!AgLOXVUYbs6VhYMswtMd9SvCFGeA4w?e=g57FaY")
        await interaction.response.edit_message(embed=embed, view=SmilesView())

    @disnake.ui.button(label="A Moving Target", style=disnake.ButtonStyle.blurple, )
    async def moving( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="OPTION SMILES MOVE", description="Due to the fact option smiles move - IT IS IMPERATIVE NOT TO BUY IN TOO EARLY. Wait until the week of earnings and try to wait for a dip in the stock like any other strategy. If you buy a smile too soon - it could be the WRONG smile, which ill explain more in the next button.", color=disnake.Colour.random())
        embed.set_image(url="https://media3.giphy.com/media/4lXLKH5PxBD6CYhAKp/giphy.gif?cid=790b7611af379f64558476bc3a73966395e64d7a605c2d5c&rid=giphy.gif&ct=g")
        embed.add_field(name="Sp500 earnings list by date", value="https://1drv.ms/x/s!AgLOXVUYbs6VhYMswtMd9SvCFGeA4w?e=g57FaY")
        await interaction.response.edit_message(embed=embed, view=SmilesView())

    @disnake.ui.button(label="LOCK IN THE SMILE STRIKE", style=disnake.ButtonStyle.blurple, )
    async def lock( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Where's the real smile?", description="Since the dawn of this group - gaps and earnings has been our bread and butter. How can we be sure where the true smile should be if they move? \n\n\n USE THE GAPS ON THE CHART! ", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/fdXsVPY/clx.png")
        embed.add_field(name="For example - look for a gap on the daily. If the gap is at $150 and the stock is trading at $125 - go through the options chain for that ticker until you find a smile out at those prices ", value="https://1drv.ms/x/s!AgLOXVUYbs6VhYMswtMd9SvCFGeA4w?e=g57FaY")
        await interaction.response.edit_message(embed=embed, view=SmilesView())

    @disnake.ui.button(label="THIS IS NEW FOR EVERYONE!", style=disnake.ButtonStyle.blurple, )
    async def new( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="USE YOUR EYES", description="Just like everything else - this is a new occurence in the market compared to what we've seen lately. THIS MEANS IT WILL TAKE YOU, AS AN INDIVIDUAL, MANAGING YOUR POSITIONS AND TAKING NOTE OF YOUR SMILE LOCATION / THE DIRECTION OF THE GENERAL MARKET / AND HOW THE STRIKE MOVES AS YOU'RE EXPOSED TO IT. \n\n\n Please use risk management here with everything else - and **make sure you are watching your positions if holding intraday and overnight. It is nobody's responsibility to watch your plays for you but you!**", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/fdXsVPY/clx.png")
        embed.add_field(name="For example - look for a gap on the daily. If the gap is at $150 and the stock is trading at $125 - go through the options chain for that ticker until you find a smile out at those prices ", value="https://1drv.ms/x/s!AgLOXVUYbs6VhYMswtMd9SvCFGeA4w?e=g57FaY")
        await interaction.response.edit_message(embed=embed, view=SmilesView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Opportunities Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=OpportunitiesView())



class SpyView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="Spy🕵️", style=disnake.ButtonStyle.red, )
    async def spyn( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
            embed = disnake.Embed(title="Spy🕵️", color = disnake.Colour.random())
            embed.add_field(name="Spy🕵️", value="**SPY** IS ONE OF THE MOST LIQUID TICKERS IN THE MARKET. \n\n **I HIGHLY RECOMMEND AVOIDING SPY UNTIL YOU GRASP CORE.** \n\n PLAY SPY WITH PROFITS ONLY IS MY RECOMMENDATION. TRADE AT YOUR OWN RISK.", inline = True)
            embed.add_field(name="Spy Relevance🕵️", value="**SPY** is best played around macro-economic events and especially around FOMC meetings. Other than that - the **CORE LOGIC** is the supreme logic and is what should be learned and practiced by anyone looking to scale gains consistently.", inline = True)
            embed.add_field(name="FOMC CALENDAR🕵️", value="**Save this calendar and refer to it. The dates here are important!** \n https://www.federalreserve.gov/monetarypolicy/fomccalendars.htm", inline=True)
            embed.set_image(url="https://i.ibb.co/x8H5Hys/FOMCMEETINGS.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=SpyView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def gohome( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Opportunities Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=OpportunitiesView())




class SFTView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url,label="Basel III Regulations and Reforms", url="https://youtu.be/G_4qeFJqSdk"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url,label="Introduction to the NSCC SFT Service" , url="https://youtu.be/cGjsCr72hjU"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url,label="SFT: Fire sale + Liquidity Drain Risk Mitigation", url="https://youtu.be/qLmSepmYnSo"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url,label="Agency and Principal models for the SFT Service", url="https://youtu.be/AhTysJ7Rc2E"))



    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="eo Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=VideoView())



class VidVideoView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="China", style=disnake.ButtonStyle.blurple, custom_id="chinas")
    async def China( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="China", description="```py\nChina experienced an earlier lockdown than other countries in the fight against the coronavirus, followed by an earlier easing of restrictions. Government policies in the initial crisis phase focused on containing the coronavirus via lockdowns, travel and immigration restrictions, and strict quarantine regulations. A second phase began in March as the policy focus shifted to a gradual easing of restrictions and the reopening of China’s economy. An important milestone was reached in early April. After 11 weeks, China announced the end of the lockdown in Wuhan, the epicenter of the initial outbreak, allowing stranded travelers and migrant workers to finally return home or to their place of work. Beijing’s successful strategy to contain the coronavirus is being reflected in household and business confidence, which are returning to more normal levels```", color=disnake.Colour.dark_green())
        embed.add_field(name="2012-2022 | The Completed Puzzle", value="https://youtu.be/cyFyepDlAh8", inline=False)
        embed.add_field(name="Learn about China's Three Red Lines Policy", value="https://youtu.be/qk0zftFn5s8", inline=False)
        embed.add_field(name="Learn about China's Macroeconomic Transformation", value="https://youtu.be/b4KdRT9uKmE", inline=False)
        embed.add_field(name="China's Recovery is Imminent - Learn Why.", value="https://youtu.be/gk_mNOZTN64", inline=False)
        embed.add_field(name="What's coming, what it means, and how to navigate it.", value="https://youtu.be/6u9w8tgjaoI", inline=False)
        embed.add_field(name="China's Transformation Explained", value="https://youtu.be/Uy8cwQylfzM",)
        embed.add_field(name="China IS The Supply Chain Issue", value="https://youtu.be/xwUF4TdfXsM", inline=False)
        embed.set_author(name="FUDSTOP Trading")
        embed.set_image(url="https://th.bing.com/th/id/OIP.hiZ2Ba_VYKvXz0u_zxS3swHaD4?pid=ImgDet&rs=1")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=ChinaView())

    @disnake.ui.button(label="The DTCC / DTC", style=disnake.ButtonStyle.gray, custom_id="dtcc")
    async def dtcc( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Depository Trust Clearing Corporation", description="```py\nThe Depository Trust and Clearing Corporation (DTCC) is an American financial services company founded in 1999 that provides clearing and settlement services for the financial markets. When the DTCC was established in 1999, it combined the functions of the Depository Trust Company (DTC) and the National Securities Clearing Corporation (NSCC).1 The NSCC is currently a subsidiary of the DTCC.```")
        embed.set_image(url="https://stopnakedshortselling.org/wp-content/uploads/2020/05/DTCC.jpg")
        embed.add_field(name="DTC-2021-005 | A Closer Look", value="https://youtu.be/DZ4e1zl_LxM", inline=False)
        embed.add_field(name= "DTC-2021-011 - Cyber Attacks / System Failures", value="https://youtu.be/c54ifHkXyIs", inline=False)
        embed.add_field(name= "DTC-2021-014 | Settlement Services for the SFT", value="https://youtu.be/GyglhxT4qR4", inline=False)
        embed.add_field(name= "State Street and DTCC are PARTNERS IN THIS FREE MARKET", value="https://youtu="").be/3I9WfTpsnJQ", inline=False)
        embed.add_field(name= "DRS, Fast Agents, and the DTC | Final Cut", value="https://youtu.be/ioSgS-e58QM", inline=False)
        embed.add_field(name= "DEMAT | DTCC, DRS, and the Uninformed", value="https://youtu.be/nLttk7nG9ms \n Share dematerialization has been an ongoing goal of the DTCC for nearly a decade. Learn about DEMAT in this video.", inline=False)
        embed.add_field(name= "Overstock Partners with US Treasury and DTCC", value="https://youtu.be/4wuuCmnK7oU", inline=False)
        embed.add_field(name= "DTCC Notice - Changes to Collateralized Haircuts", value="https://youtu.be/Hh70tMs7TkE", inline=False)
        embed.add_field(name= "SEC Filing | DTC 2021 002 - Adjust DTC's Investment Policy", value="https://youtu.be/rntLFb09Kuo", inline=False)
        embed.add_field(name= "Meet the DRS Fast Agents", value="https://youtu.be/SgfJXBINPqY", inline=False)
        embed.add_field(name= "DTC-2021-016 | Governing Law", value="https://youtu.be/g1IbrIdN_2Y", inline=False)
        embed.add_field(name= "DTC/FICC/NSCC increase Capital Requirements", value="https://youtu.be/HkTIiDQYR7o", inline=False)
        embed.add_field(name= "The DRS Guide to Reality", value="https://youtu.be/6TGTvunz9Nw", inline=False)
        embed.add_field(name= "15 Years of Pain - CMKM Diamond", value="https://youtu.be/6TGTvunz9Nw", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=DTCCView())

    @disnake.ui.button(label="The OCC", style=disnake.ButtonStyle.gray, custom_id="occ2")
    async def occ( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Options Clearing Corporation", description="```py\nOptions Clearing Corporation is a United States clearing house based in Chicago. It specializes in equity derivatives clearing, providing central counterparty clearing and settlement services to 16 exchanges.```",color=disnake.Colour.dark_orange())
        embed.add_field(name="OCC-2021-011 | Margin & Defaults", value="https://youtu.be/XJNTt2Yrf30 \n", inline=False)
        embed.add_field(name="SEC FILING OCC-2021-006", value="https://youtu.be/OkiPeHgDimk \n", inline=False)
        embed.add_field(name="SR-OCC-2021-004 Explained in 04:20", value="https://youtu.be/1MCVZH7QvAc \n", inline=False)
        embed.add_field(name="SR-OCC-2021-003 Explained", value="https://youtu.be/ChumKl1SWq8 \n", inline=False)
        embed.add_field(name="Shakeup at the OCC! Beat the news again!", value="https://youtu.be/tc1kn_au3Os \n", inline=False)
        embed.add_field(name="SR-OCC-2021-007 | Force Majeure / Bylaws / Act of God", value="https://youtu.be/BgBfSwFoQ1U \n", inline=False)
        embed.add_field(name="OCC Partial Tear-up Rule Approved", value="https://youtu.be/5s2ytMppZCg \n", inline=False)
        embed.add_field(name="SR-OCC-2021-803 | No Objection", value="https://youtu.be/H_4QuzqLDDc \n", inline=False)
        embed.add_field(name="The OCC Cloud | BIG Changes", value="https://youtu.be/sjCFhzoT6Mo \n", inline=False)
        embed.add_field(name="OCC-2021-013 | Equity Recovery / Operational Loss", value="https://youtu.be/CG6_X6LtwoQ \n", inline=False)
        embed.add_field(name="OCC-2021-014 | The Coming Slaughter", value="https://youtu.be/gT7Z25bnbnU \n", inline=False)
        embed.add_field(name="BREAKING: OCC-2022-801 | A New IV Model", value="https://youtu.be/oOZQCwk7gxc \n", inline=False)
        embed.add_field(name="The OCC Cloud | BIG Changes", value="https://youtu.be/sjCFhzoT6Mo \n", inline=False)
        embed.add_field(name="OCC to collect MARGIN DEFICITS On July 27th", value="https://youtu.be/hc3n2RsMG14 \n", inline=False)
        embed.set_image(url="https://res.cloudinary.com/crunchbase-production/image/upload/c_lpad,h_256,w_256,f_auto,q_auto:eco,dpr_1/ncc2rldzqyqqpk6aoobr")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OCCView())

    @disnake.ui.button(label="The NSCC", style=disnake.ButtonStyle.gray, custom_id="nscc")
    async def nscc( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="The NSCC", description="```py\nNational Securities Clearing Corporation (NSCC) founded in 1976 is a subsidiary of Depository Trust & Clearing Corporation (DTCC). \n The NSCC operates as a seller for every buyer, and buyer for every seller in the financial industry for trades that settle in U.S. markets.```")
        embed.set_image(url="https://mark.trademarkia.com/logo-images/national-securities-clearing-corporation/ns-cc-73150136.jpg")
        embed.add_field(name="SR-NSCC-2022-009 | The Volatility Charge", value="https://youtu.be/4GERvX7EzZI", inline=False)
        embed.add_field(name="SR-NSCC-2021-007 | System Failure & Market Disruption Events", value="https://youtu.be/-xfHt_8mntg", inline=False)
        embed.add_field(name="SR-NSCC-2021-009 | Tax Obligations", value="https://youtu.be/901q5eaRKEU", inline=False)
        embed.add_field(name="NSCC-2021-803 SFT | Fire Sale and Liquidity Risk Mitigation", value="https://youtu.be/E_hQT954ACM", inline=False)
        embed.add_field(name="NSCC-2021-803 SFT | Agency vs. Principal Model", value="https://youtu.be/WGGCEvOl2io", inline=False)
        embed.add_field(name="NSCC-2021-011 | Game Over", value="https://youtu.be/6-jXYUi4HDs", inline=False)
        embed.add_field(name="SR-NSCC-2021-005 NSCC increases Margin Requirements by 25x", value="https://youtu.be/hHeqaMnkGrk", inline=False)
        embed.add_field(name="NSCC Introduction to Interval Funds", value="https://youtu.be/MdkpF6K85vo")
        embed.add_field(name="NYSE No Longer an NSCC Participant", value="https://youtu.be/t-zi0UED-KQ")
        embed.add_field(name="NSCC - Forced Settlement", value="https://youtu.be/RY0kPXZHQyA", inline=False)
        embed.add_field(name="SR-2021-NSCC-015 | DOUBLE-DEFAULTS and Mutual Funds", value="https://youtu.be/I59a1fwLONA", inline=False)
        embed.add_field(name="The execution of small / medium players in the industry.", value="https://youtu.be/Q6yKY2gdURg", inline=False)
        embed.add_field(name="SR-NSCC-2022-002 | Interval Fund Repurchase Orders", value="https://youtu.be/SP7MekrNQcE", inline=False)
        embed.add_field(name="NSCC SFT Removes Haircut Component from Margin", value="https://youtu.be/3XwWBmq8ggs", inline=False)
        embed.add_field(name="DTC / FICC / NSCC increase capital requirements.", value="https://youtu.be/HkTIiDQYR7o", inline=False)
        embed.add_field(name="NSCC's Stock Borrow Program Loophole Sealed", value="https://youtu.be/9BMludHQAHs", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NSCCView())

    @disnake.ui.button(label="FINRA", style=disnake.ButtonStyle.gray, )
    async def finra( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction, custom_id="finra"):
        embed = disnake.Embed(title="Financial Industry Regulatory Authority (FINRA)", description="```py\nUnderstanding FINRA - \n FINRA governs brokers and broker-dealer firms -- government lingo for financial institutions. Any institution that you use for a brokerage account or that a business uses to go public or sell securities is governed by FINRA.\n Although it acts as a governor of the industry, FINRA is a non-governmental organization. It is an independent regulatory body financial institutions must register with. The Securities and Exchange Commission (SEC) has given it the authority to discipline financial institutions with fines and other measures.``` ```py\nFINRA exists to protect investors in the following ways:\n 1️⃣ Makes sure all security products have been tested and qualified: FINRA-registered brokers can only sell investment products that have been reviewed and approved by the agency. \n2️⃣ Makes sure securities advertisements are truthful and not misleading: You may have noticed the seemingly endless fine print in all financial advertising. FINRA sets and enforces those guidelines.\n3️⃣ Makes sure securities products sold to investors are suitable for their needs: Brokers who sell volatile penny stocks to retirees or expensive annuities to college students will run afoul of FINRA.\n4️⃣ Makes sure investors receive complete disclosure for products before investing: Potential risk and a complete rundown of historical returns must be disclosed to investors.```", color=disnake.Colour.dark_blue())
        embed.set_image(url="https://th.bing.com/th/id/R.12686266421d26ae7414dd4e7da61055?rik=fzMjFgIMZj%2fh0w&pid=ImgRaw&r=0")
        embed.add_field(name="Alternate Display Facility - FINRAs Secondary Order Book", value="https://youtu.be/M_9Z4CayCx8", inline=False)
        embed.add_field(name="Alternate Display Facility History", value = "https://youtu.be/52m1cX9Mii8 \n Learn about SuperMontage, the NASD and how they eventually became FINRA - who now operates the two facilities that take up over 75% of market share on a daily basis. **The TRF Carteret Facility** and the **Alternate Display Facility**", inline=False)
        embed.add_field(name="SR FINRA 2021 009 Supplemental Liquidity", value = "https://youtu.be/HAs_aW2l1rI", inline=False)
        embed.add_field(name="FINRA RULE 6439 - New OTC Reporting Requirements", value = "https://youtu.be/GmA5LcaZyxM \n These new reporting requirements can be observed today at https://otce.finra.org/otce/home", inline=False)
        embed.add_field(name="SR-FINRA-2020-04 Restricted Firm Obligations", value = "https://youtu.be/K37TZiKD5gA", inline=False)
        embed.add_field(name="FINRA Partners with the FBI", value="https://youtu.be/oZctWlv3QUw", inline=False)
        embed.add_field(name="SR-FINRA-2021-011 | FINRA Approves Specified Risk Event", value="https://youtu.be/JYpwVZ6OqnY", inline=False)
        embed.add_field(name="SR-FINRA-2022-11 FINRA to Surveille Foreign Fixed Income Debt", value="https://youtu.be/1aUDZcCaopw", inline=False)
        embed.add_field(name="FINRA Treasury Portfolio Descrepancies", value="https://youtu.be/gy8DcK7rNgY", inline=False)
        embed.add_field(name="FINRA Rule 15c2-11", value="```py\n**Some** refer to this phenomenon as 'the zombie stock' effect. Learn how it works and the governing legislation behind it.``` https://youtu.be/KKpYE9UJUHg ", inline=False)
        embed.add_field(name="The Consolidated Audit Trail", value="```py\nLearn about the C.A.T. system that has taken nearly 14 years to complete. Bart of the Basel III reform post 2008 crisis - this is due for PRODUCTION GO-LIVE on July 27th.```https://youtu.be/QuMdFtg6ib4", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=FINRAView())

    @disnake.ui.button(label="The SFT Service", style=disnake.ButtonStyle.green, custom_id="sft")
    async def sft( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Securities Financing Transaction Service", description="```py\nSFTs are transactions in which a securities lender loans securities to a securities borrower, for a fee. \n\n\n The borrowers typically use the borrowed securities to **cover short sales or fails to deliver that may result from either short or long sales.** \n\n A lender typically lends securities to generate income through the fees that it charges. \n\n As a CCP (Central Clearing Counterparty)***, NSCC would interpose itself **between the securities lender and borrower and become the counterparty to each entity. \n\n NSCC would then be obligated to complete the transaction, that is, to return loaned securities to the lender and collateral to the borrower, even if a lender or borrower in an SFT fails to satisfy its obligations, thereby assuming the risk of each entity’s failure to perform to each other.```", color=disnake.Color.random())
        embed.add_field(name="Basel III Regulations and Reforms", value="https://youtu.be/G_4qeFJqSdk \n Learn about the Basel III regulation regime.", inline=False)
        embed.add_field(name="Introduction to the NSCC SFT Service" , value="https://youtu.be/cGjsCr72hjU", inline=False)
        embed.add_field(name="SFT: Fire sale + Liquidity Drain Risk Mitigation", value="https://youtu.be/qLmSepmYnSo \n", inline=False)
        embed.add_field(name="Agency and Principal models for the SFT Service", value="https://youtu.be/AhTysJ7Rc2E \n", inline=False)
        embed.set_image(url="https://www.federalreserve.gov/econres/notes/feds-notes/figure-1-collateral.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=SFTView())

    @disnake.ui.button(label="The NET Stable Funding Ratio", style=disnake.ButtonStyle.green,custom_id="net" )
    async def net( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Net Stable Funding Ratio, TITLE 12 CFR", description="```py\nFollowing the failure of many banks to adequately measure, manage and control their liquidity risk in 2007 and in subsequent years, the Basel Committee on Banking Supervision (BCBS) introduced two liquidity standards as part of the Basel III post-crisis reforms. The first of these is the Liquidity Coverage Ratio (LCR). It enhances banks' short-term resilience and is presented in another Executive Summary. The second standard - the Net Stable Funding Ratio (NSFR) - aims to promote resilience over a longer time horizon by creating incentives for banks to fund their activities with more stable sources of funding on an ongoing basis.```", color=disnake.Colour.dark_gold())
        embed.set_image(url="https://www.novantas.com/wp-content/uploads/2016/10/figure1.jpg")
        embed.add_field(name="The Net Stable Funding Ratio - Intro", value="https://youtu.be/LHKekbnr2lY \n Learn about the Title 12 Net Stable Funding Ratio", inline=False)
        embed.add_field(name="This video covers the newly added part - Bank Monitoring", value="https://youtu.be/Al-4tbspxfE", inline=False)
        embed.add_field(name="Banks Corrective Action", value="https://youtu.be/L2L0I_Oxbw0 \n Banks now face prompt corrective action under these scenarios.", inline=False)
        embed.add_field(name="Required Stable Funding", value="https://youtu.be/BoGNFJ25peY \n Learn about the RSF Factors that effect the NSFR.", inline=False)
        embed.add_field(name="Available Stable Funding", value="https://youtu.be/ZOk48dF_TBs \n Learn about the **ASF factors** that effect the NSFR. (Available Stable Funding)", inline=False)
        embed.add_field(name="Net Stable Funding Ratio Definitions" , value="https://youtu.be/VF5W6j-VSpI \nThis video goes over the newly adopted definitions for TITLE 12 NSFR.", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NSFRView())

    @disnake.ui.button(label="Options 101 Course", style=disnake.ButtonStyle.green, )
    async def Options( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction, custom_id="options101c2"):
        embed = disnake.Embed(title="Options 101 Course", description="```py\nThis in-depth options 101 course is provided by the Options Industry Council.```")
        embed.add_field(name="#1 Options Introduction", value="https://youtu.be/7jcqknbX99c \n", inline=False)
        embed.add_field(name="#2 Options Terminology", value="https://youtu.be/namg44EBFBs \n", inline=False)
        embed.add_field(name="#3 Call and Put Specifics", value="https://youtu.be/NpSQdICvNBk \n", inline=False)
        embed.add_field(name="#4 Buying Calls", value="https://youtu.be/Bc5gpsa7Z1M \n", inline=False)
        embed.add_field(name="#5 Buying Puts", value="https://youtu.be/jrYUzSibjzo \n", inline=False)
        embed.add_field(name="#6 Options Premium", value="https://youtu.be/22X3h_rwiEA \n", inline=False)
        embed.add_field(name="#7 Options and Exercising - Part 1", value="https://youtu.be/Dgc2fO4GlR8 \n", inline=False)
        embed.add_field(name="#8 Options and Exercising - Part 2", value="https://youtu.be/e_W_5jd-2v4 \n", inline=False)
        embed.add_field(name="#9 Risk versus Reward", value="https://youtu.be/p36Ovh8x89I \n", inline=False)
        embed.add_field(name="WEBINAR: Covered Calls / Poor Man's Covered Calls / Leaps", value="https://youtu.be/ySoXAKuNjxg", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=Opt101View())


    @disnake.ui.button(label="Chicago Board Options Exchange (CBOE)", style=disnake.ButtonStyle.green, custom_id="cboe")
    async def cboes( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Chicago Board Options Exchange (CBOE)", description="```py\nCBOE is the abbreviation for the Chicago Board Options Exchange. It is the world's largest options exchange, having served as an innovator of new option-based products since its first day of trading in 1973. The CBOE offers options contracts on hundreds of stocks and exchange-traded funds, as well as several of the most popular stock indexes. \n\n Among its proprietary products are stock index options on the **S&P 500 (^GSPC)**, which are the most active index options in the U.S. market. These and other financial products give investors the opportunity to manage risk in executing their investment strategies.```", url="https://www.cboe.com/us/equities/market_share/", color=disnake.Colour.dark_gold())
        embed.set_image(url="https://th.bing.com/th/id/OIP.D58Ciou2qdjSeY0tCcCVVwHaEH?pid=ImgDet&rs=1")
        embed.add_field(name="SR-CBOE-2021-02 | ETF Manipulation", value="```py\nCBOE Files and specifically refers to ETFs being bad for price discovery in markets.``` https://youtu.be/vQCH8teGyHQ", inline=False)
        embed.add_field(name="SR-CBOE-2021-039 - The Market Share Crisis", value="https://youtu.be/WlAlny63XD4", inline=False)
        embed.add_field(name="SR-CBOE-2021-040 | Automated Halts", value="```py\nLearn about automated trading halts.``` https://youtu.be/Z6UO5qwv8es", inline=False)
        embed.add_field(name="SR CboeBZX-2021-055 | Price Discovery and Liquidity", value="https://youtu.be/qVsKTX3Ui3o", inline=False)
        embed.add_field(name="SR-CboeBZX-2022-009 | Drill-Through Price Protection", value="```py\nLearn about drill-throgh price protection.``` https://youtu.be/fqSCRm8SoYI", inline=False)
        embed.add_field(name="CBOE-2021-045 | Rule Violation Plan" , value="```py\nLearn about CBOE's Rule Violation Plan``` https://youtu.be/RPGF-MjD62I", inline=False)
        embed.add_field(name="CBOE Options Start Trading at 2:30AM EST", value="```py\nCBOE Opens up trading to participants as early as 3:30 AM now - 1 hour and 30 minutes before the regular Pre-Market session begins.``` https://youtu.be/tSvsur3vSC0", inline=False)
        embed.add_field(name="SR-CboeBZX-2021-058 - Rebates for LIQUIDATED ETFs", value="https://youtu.be/eXFqVkAjvqY", inline=False)
        embed.add_field(name="Options Position Limits Increased on CBOE Exchanges", value="https://youtu.be/UrSUMAKWNBA", inline=False)
        embed.add_field(name="SR-Cboe-2021-026 - Extreme Duplicate Price Protection" , value="https://youtu.be/z9o4xb7gCmU", inline=False)
        embed.add_field(name="The CBOE Volatility Index (VIX)", value="```py\nYou've probably heard of the VIX index, and maybe have even traded it. This video goes into detail about the VIX and its' background.``` https://youtu.be/B1wIJ4duwzM", inline=False)
        embed.add_field(name="CBOE BZX | 086 - Amend the Opening Auction", value="```py\nCBOE Amends the opening auction for options.``` https://youtu.be/mgaiE3dCKd0", inline=False)
        embed.add_field(name="CBOE EdGX-2021-048 - Easy To Borrow Securities" , value="https://youtu.be/7PEe99ZRA5o", inline=False)
        embed.add_field(name="SR-2021-CBOE-071 | CBOE Adds The New Curb Trading Session", value="```py\nCBOE adds the new 'curb' trading session.``` https://youtu.be/M48zMHH57-Q", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=CBOEView())

    @disnake.ui.button(label="Intercontinental Exchange", style=disnake.ButtonStyle.red, )
    async def ice( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction, custom_id="ice"):
        embed = disnake.Embed(title="Intercontinental Exchange (ICE)", description="```py\nThe Intercontinental Exchange (ICE) is an American company formed in 2000 that operates global financial exchanges, clearing houses and provides mortgage technology, data and listing services. \n Listed on the Fortune 500, S&P 500, and Russell 1000, the company owns exchanges for financial and commodity markets, and operates 12 regulated exchanges and marketplaces. \n\n This includes ICE futures exchanges in the United States, Canada and Europe, the Liffe futures exchanges in Europe, the New York Stock Exchange, equity options exchanges and OTC energy, credit and equity markets. \n\n ICE also owns and operates six central clearing houses:``` ```py\nICE Clear U.S., ICE Clear Europe, ICE Clear Singapore, ICE Clear Credit, ICE Clear Netherlands and ICE NGX. ICE has offices in Atlanta, New York, London, Chicago, Bedford, Houston, Winnipeg, Amsterdam, Calgary, Washington, D.C., San Francisco, Tel Aviv, Rome, Hyderabad, Singapore and Melbourne.```", color=disnake.Color.random())
        embed.set_image(url="https://mms.businesswire.com/media/20181210005339/en/411456/23/ICE_R_colour.jpg")
        embed.add_field(name="SR ICC 2021 005 Wind Down and Recovery", value="https://youtu.be/C6I29AICIsg \n", inline=False)
        embed.add_field(name="SR-ICC-2021-009 Explained in 3:33", value="https://youtu.be/CKEIAcWtKi0 \n Yet another risk based filing out of ICE.", inline=False)
        embed.add_field(name="ICC Approved Filing to Enhance Price Discovery for Options / CDS" , value="https://youtu.be/ClYYDRl2FWY \n", inline=False)
        embed.add_field(name="SR-ICC-2022-005 SWAPS ! Russian / Emerging Market SWAPS", value="https://youtu.be/FgjhEIeYiaA \n", inline=False)
        embed.add_field(name="SR-ICC-2021-015 | Beefing Up before Defaults", value="https://youtu.be/a7eU-lW-eZc \n", inline=False)
        embed.add_field(name="SR-ICEEU-2021-010 More Default Preparations", value="https://youtu.be/IYl511Yb3_o \n", inline=False)
        embed.add_field(name="ICE EUROPE - Libor Transition = More Potential Margin Calls", value="https://youtu.be/y6hS8wh4nY8 \n", inline=False)
        embed.add_field(name="ICE Prepares for Market-Wide Volatility", value="https://youtu.be/98DcxEVwBak \n", inline=False)
        embed.add_field(name="ICEEU-2022-005 | Cash Margin & Liquidity Risk", value="https://youtu.be/qi5A6OFAYhs \n", inline=False)
        embed.add_field(name="ICE Clear Credit Fixes 30minute Delivery Loophole for Swaps", value="https://youtu.be/_I2znHus9tw \n", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=ICEView())

    @disnake.ui.button(label="Exchange Traded Funds", style=disnake.ButtonStyle.red, custom_id="etfs")
    async def etfs( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Exchange Traded Funds", description="```py\nAn exchange-traded fund (ETF) is a basket of securities that trades on an exchange just like a stock does. \n ETF share prices fluctuate all day as the ETF is bought and sold this is different from mutual funds, which only trade once a day after the market closes. \n ETFs can contain all types of investments, including stocks, commodities, or bonds; some offer U.S.-only holdings, while others are international. \n ETFs offer low expense ratios and fewer broker commissions than buying the stocks individually.```", color=disnake.Colour.random())
        embed.add_field(name= "ETF Mechanics 101", value="https://youtu.be/CgsFdfTavvk \n Learn the basics of ETFs and how they work as explained by BlackRock.", inline=False)
        embed.add_field(name="Why ETFs Are Shorted", value="https://youtu.be/aeW_ETxGumc \n **Shorting** provides price disovery and liquidity in markets.", inline=False)
        embed.add_field(name="The ETF Ecosystem Creation Process", value="https://youtu.be/-SCL8F-ovgA \n Learn about how ETF **creation** and **redemption** works in this video.", inline=False)
        embed.add_field(name="ETF Mechanics", value="https://youtu.be/CgsFdfTavvk \n Learn about the mechanics of **ETFs**.", inline=False)
        embed.add_field(name="BlackRock's ETF Ecosystem", value="https://youtu.be/2tvcXsCq-Dc \n **Learn about the **ETF Ecosystem** as described by BlackRock from their own underlying documentation.", inline=False)
        embed.add_field(name="HDG mimics Market Making", value="https://youtu.be/e47kqgU2zt4 \n Yes. An ETF that is designed to mimic the actions of a market maker - ergo - an ETF which makes markets. (algorithim)", inline=False)
        embed.add_field(name="EXEMPTIVE RELIEF | Custom ETF Baskets", value="https://youtu.be/JeFYmKHtQ5A", inline=False)
        embed.add_field(name="NYSE ARCA wants more LIQUIDITY from ETFs and OPTIONS", value="https://youtu.be/b4KdRT9uKmE", inline=False)
        embed.add_field(name="Confirmed Lending - END Game ETFs", value="https://youtu.be/3G8Jm3RkwQE", inline=False)
        embed.add_field(name="ETF Liquidity | The Primary and Secondary Markets", value="https://youtu.be/CTiNffK2z00", inline=False)
        embed.set_image(url="https://th.bing.com/th/id/OIP._P3ktPObbhWdc_PWhS4yqgHaDM?pid=ImgDet&rs=1")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=ETFView())

    @disnake.ui.button(label="The New York Stock Exchange", style=disnake.ButtonStyle.red, custom_id="nyse")
    async def nyse( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="The New York Stock Exchange", description="```py\nThe NYSE is by far the world's largest stock exchange by market capitalization of its listed companies.```", color=disnake.Colour.dark_blue())
        embed.add_field(name="The Designated Market Maker👷‍♂️", value="```py\nA designated market maker is one that has been selected by the exchange as the primary market maker for a given security. A DMM is responsible for maintaining quotes and facilitating buy and sell transactions. Market makers are sometimes making markets for several hundred of listed stocks at a time.```https://youtu.be/zFXZRspjOxY", inline=False)
        embed.add_field(name="Dark Pools, Dark Fibers, and the NYSE🧵", value="https://youtu.be/0073Jg8hY-4 \n Hello all," "So while this topic is being dismissed by a few people, I find it interesting that I keep finding more and more information that links the NYSE to some form of dark manipulation. Dark meaning undetected." "Here's a link to an investigation that was conducted from the National Securities Exchange of India that was found to be using dark fibers as a method of manipulating the markets by undercutting other members with a latency advantage.```https://www.moneylife.in/article/nse-dark-fibre-scam-sebi-alleges-manipulation-irregular-acts-poor-due-diligence-fraud-misrepresentation-and-false-statements/57058.html#:~:text=NSE%20has%20been%20directed%20to,whole%20%E2%80%9Cdark%20fibre%E2%80%9D%20episode. ```py\nAlso, the filing that we saw SUSPENDING THIRD PARTY DATA SYSTEMS, which dark pools require to operate, IN FACT ALLOW CONNECTIVITY THROUGH DARK FIBER. Coincidence? Change my mind.```", inline=False)
        embed.add_field(name="The NYSE Adopts the Retail Order Type🚬", value="https://youtu.be/PVFECoLEIpU \n", inline=False)
        embed.add_field(name="SR-NYSEARCA-2021-47 | The OX and Pillar Systems🐂", value="```py\n'OX' refers to the Exchange’s current electronic order delivery, execution, and reporting system for designated option issues through which orders and quotes of Users are consolidated for execution and/or display. \n 'OX Book' refers to the OX’s electronic file of orders and quotes, which contain all of the orders in each of the Display Order and Working Order processes and all of the Market Makers’ quotes in the Display Order Process. \n **NYSE Pillar** is the new integrated trading technology platform that will enable member firms to connect to all NYSE equities and options markets using a standard protocol.``` https://youtu.be/tZ4M0vDj37s", inline=False)
        embed.add_field(name="NYSE-ARCA-2021-58 || Options Fee Schedule Modifications (Liquidity)💦", value="```py\nWhenever you see a filing that's related to FEE SCHEDULES - it means they're filing for either: \n 1️⃣ Liqudity \n 2️⃣ More Market share \n 3️⃣ Price Discovery``` https://youtu.be/b4KdRT9uKmE ", inline=False)
        embed.add_field(name="SR-NYSEArca-2021-55 | Options Series⭕", value="```py\nNYSE Arca files for more efficient Option's Chain They say straight up in the filing that Market Makers are using their capital inefficiently to quote options. We all know why. \n Here's the link:``` https://public-inspection.federalregister.gov/2021-14792.pdf**https://youtu.be/hHz6QBoF5tE", inline=False)
        embed.add_field(name="SR-NYSE-2021-40 | Trading Halt Permeance🚫", value="```py\nLearn about trading halts on the NYSE.``` https://youtu.be/lLnCbYqf1W0", inline=False)
        embed.add_field(name="Retail Orders cannot be executed by Algorithims🤖", value="https://youtu.be/DjegbrqKnSY \n ", inline=False)
        embed.add_field(name="SR-NYSEArca-2021-63 | Risk / Hedging🌳", value="https://youtu.be/qH_gVxNWCcI \n ", inline=False)
        embed.add_field(name="SR-NYSEARCA-2021-66 Reformat the Basic Rates Section➿", value="https://youtu.be/epkyjA2y8Sk", inline=False)
        embed.add_field(name="SR-NYSE-2021-045 Acquisition Spinoffs📴", value="https://youtu.be/yiZwfLwySVM")
        embed.add_field(name="SR-NYSEARCA-2021-74 | A highly Competitive Market☠️", value="```py\nThe exchange alludes to the fact that the market is highly competetive - BUT is also highly fragmented due to the large concentration of off-exchange dark pool flow coming out of the **FINRA ADF** and FINRA TRF CARTERET facilities.``` https://youtu.be/VAjXpBv4O3o", inline=False)
        embed.add_field(name="SR-NYSEARCA-2021-84 | Proxy Portfolios🥠", value="```py\nLearn about proxy portfolios. It's absurd to say the least.``` https://youtu.be/kSrV-Td6d4A", inline=False)
        embed.add_field(name="NYSE CEO Can now Halt Trading for up to Two Days2️⃣", value="```py\nThe NYSE CEO can now halt trading for up to two days at his own discretion.``` https://youtu.be/1S7kzaT4FYo", inline=False)
        embed.add_field(name="SR-NYSEArca-2021-109 | Liquidity and Price Discovery🔎", value="```py\nNYSEARCA refers to the market share crisis happening in the markets.``` https://youtu.be/53ptYMUqudE", inline=False)
        embed.add_field(name="The NYSE Gives Special treatment to ADRs.💌", value="https://youtu.be/V8ZjerMaq58", inline=False)
        embed.add_field(name="SR-NYSENAT-2022-06 | Directed Orders Added on Exchange🎯", value="https://youtu.be/0q-QndhzuBU", inline=False)
        embed.add_field(name="SR-NYSE-2022-04 | Integrated Market Making🎊", value="```py\nSEC Adopts a new type of Market Making - Integrated Market Making``` https://youtu.be/8lr3Y0Xqp8w", inline=False)
        embed.set_image(url="https://imgs-akamai.mnstatic.com/68/ca/68cad86290980319cbdf0d967deac2ee.jpg")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NyseVIDView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def gohome( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=MainView2())




class VideoView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)


    @disnake.ui.button(label="China", style=disnake.ButtonStyle.blurple)
    async def China( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="China", description="```py\nChina experienced an earlier lockdown than other countries in the fight against the coronavirus, followed by an earlier easing of restrictions. Government policies in the initial crisis phase focused on containing the coronavirus via lockdowns, travel and immigration restrictions, and strict quarantine regulations. A second phase began in March as the policy focus shifted to a gradual easing of restrictions and the reopening of China’s economy. An important milestone was reached in early April. After 11 weeks, China announced the end of the lockdown in Wuhan, the epicenter of the initial outbreak, allowing stranded travelers and migrant workers to finally return home or to their place of work. Beijing’s successful strategy to contain the coronavirus is being reflected in household and business confidence, which are returning to more normal levels```", color=disnake.Colour.dark_gold())
        embed.add_field(name="2012-2022 | The Completed Puzzle", value="https://youtu.be/cyFyepDlAh8", inline=False)
        embed.add_field(name="Learn about China's Three Red Lines Policy", value="https://youtu.be/qk0zftFn5s8", inline=False)
        embed.add_field(name="Learn about China's Macroeconomic Transformation", value="https://youtu.be/b4KdRT9uKmE", inline=False)
        embed.add_field(name="China's Recovery is Imminent - Learn Why.", value="https://youtu.be/gk_mNOZTN64", inline=False)
        embed.add_field(name="What's coming, what it means, and how to navigate it.", value="https://youtu.be/6u9w8tgjaoI", inline=False)
        embed.add_field(name="China's Transformation Explained", value="https://youtu.be/Uy8cwQylfzM",)
        embed.add_field(name="China IS The Supply Chain Issue", value="https://youtu.be/xwUF4TdfXsM", inline=False)
        embed.set_author(name="FUDSTOP Trading")
        embed.set_image(url="https://th.bing.com/th/id/OIP.hiZ2Ba_VYKvXz0u_zxS3swHaD4?pid=ImgDet&rs=1")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=ChinaView())

    @disnake.ui.button(label="The DTCC / DTC", style=disnake.ButtonStyle.gray, )
    async def dtcc( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Depository Trust Clearing Corporation", description="```py\nThe Depository Trust and Clearing Corporation (DTCC) is an American financial services company founded in 1999 that provides clearing and settlement services for the financial markets. When the DTCC was established in 1999, it combined the functions of the Depository Trust Company (DTC) and the National Securities Clearing Corporation (NSCC).1 The NSCC is currently a subsidiary of the DTCC.```", color=disnake.Colour.dark_red())
        embed.set_image(url="https://stopnakedshortselling.org/wp-content/uploads/2020/05/DTCC.jpg")
        embed.add_field(name="DTC-2021-005 | A Closer Look", value="https://youtu.be/DZ4e1zl_LxM", inline=False)
        embed.add_field(name= "DTC-2021-011 - Cyber Attacks / System Failures", value="https://youtu.be/c54ifHkXyIs", inline=False)
        embed.add_field(name= "DTC-2021-014 | Settlement Services for the SFT", value="https://youtu.be/GyglhxT4qR4", inline=False)
        embed.add_field(name= "State Street and DTCC are PARTNERS IN THIS FREE MARKET", value="https://youtu="").be/3I9WfTpsnJQ", inline=False)
        embed.add_field(name= "DRS, Fast Agents, and the DTC | Final Cut", value="https://youtu.be/ioSgS-e58QM", inline=False)
        embed.add_field(name= "DEMAT | DTCC, DRS, and the Uninformed", value="```py\nShare dematerialization has been an ongoing goal of the DTCC for nearly a decade. Learn about DEMAT in this video.``` https://youtu.be/nLttk7nG9ms", inline=False)
        embed.add_field(name= "Overstock Partners with US Treasury and DTCC", value="https://youtu.be/4wuuCmnK7oU", inline=False)
        embed.add_field(name= "DTCC Notice - Changes to Collateralized Haircuts", value="https://youtu.be/Hh70tMs7TkE", inline=False)
        embed.add_field(name= "SEC Filing | DTC 2021 002 - Adjust DTC's Investment Policy", value="https://youtu.be/rntLFb09Kuo", inline=False)
        embed.add_field(name= "Meet the DRS Fast Agents", value="https://youtu.be/SgfJXBINPqY", inline=False)
        embed.add_field(name= "DTC-2021-016 | Governing Law", value="https://youtu.be/g1IbrIdN_2Y", inline=False)
        embed.add_field(name= "DTC/FICC/NSCC increase Capital Requirements", value="https://youtu.be/HkTIiDQYR7o", inline=False)
        embed.add_field(name= "The DRS Guide to Reality", value="https://youtu.be/6TGTvunz9Nw", inline=False)
        embed.add_field(name= "15 Years of Pain - CMKM Diamond", value="https://youtu.be/6TGTvunz9Nw", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=DTCCView())

    @disnake.ui.button(label="The OCC", style=disnake.ButtonStyle.gray, )
    async def occ( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Options Clearing Corporation", description="```py\nOptions Clearing Corporation is a United States clearing house based in Chicago. It specializes in equity derivatives clearing, providing central counterparty clearing and settlement services to 16 exchanges.```", color=disnake.Colour.dark_green())
        embed.add_field(name="OCC-2021-011 | Margin & Defaults", value="https://youtu.be/XJNTt2Yrf30 \n", inline=False)
        embed.add_field(name="SEC FILING OCC-2021-006", value="https://youtu.be/OkiPeHgDimk \n", inline=False)
        embed.add_field(name="SR-OCC-2021-004 Explained in 04:20", value="https://youtu.be/1MCVZH7QvAc \n", inline=False)
        embed.add_field(name="SR-OCC-2021-003 Explained", value="https://youtu.be/ChumKl1SWq8 \n", inline=False)
        embed.add_field(name="Shakeup at the OCC! Beat the news again!", value="https://youtu.be/tc1kn_au3Os \n", inline=False)
        embed.add_field(name="SR-OCC-2021-007 | Force Majeure / Bylaws / Act of God", value="https://youtu.be/BgBfSwFoQ1U \n", inline=False)
        embed.add_field(name="OCC Partial Tear-up Rule Approved", value="https://youtu.be/5s2ytMppZCg \n", inline=False)
        embed.add_field(name="SR-OCC-2021-803 | No Objection", value="https://youtu.be/H_4QuzqLDDc \n", inline=False)
        embed.add_field(name="The OCC Cloud | BIG Changes", value="https://youtu.be/sjCFhzoT6Mo \n", inline=False)
        embed.add_field(name="OCC-2021-013 | Equity Recovery / Operational Loss", value="https://youtu.be/CG6_X6LtwoQ \n", inline=False)
        embed.add_field(name="OCC-2021-014 | The Coming Slaughter", value="https://youtu.be/gT7Z25bnbnU \n", inline=False)
        embed.add_field(name="BREAKING: OCC-2022-801 | A New IV Model", value="https://youtu.be/oOZQCwk7gxc \n", inline=False)
        embed.add_field(name="The OCC Cloud | BIG Changes", value="https://youtu.be/sjCFhzoT6Mo \n", inline=False)
        embed.add_field(name="OCC to collect MARGIN DEFICITS On July 27th", value="https://youtu.be/hc3n2RsMG14 \n", inline=False)
        embed.set_image(url="https://res.cloudinary.com/crunchbase-production/image/upload/c_lpad,h_256,w_256,f_auto,q_auto:eco,dpr_1/ncc2rldzqyqqpk6aoobr")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OCCView())

    @disnake.ui.button(label="The NSCC", style=disnake.ButtonStyle.gray, )
    async def nscc( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="The NSCC", description="```py\nNational Securities Clearing Corporation (NSCC) founded in 1976 is a subsidiary of Depository Trust & Clearing Corporation (DTCC). \n The NSCC operates as a seller for every buyer, and buyer for every seller in the financial industry for trades that settle in U.S. markets.```", color=disnake.Colour.dark_gold())
        embed.set_image(url="https://mark.trademarkia.com/logo-images/national-securities-clearing-corporation/ns-cc-73150136.jpg")
        embed.add_field(name="SR-NSCC-2022-009 | The Volatility Charge", value="https://youtu.be/4GERvX7EzZI", inline=False)
        embed.add_field(name="SR-NSCC-2021-007 | System Failure & Market Disruption Events", value="https://youtu.be/-xfHt_8mntg", inline=False)
        embed.add_field(name="SR-NSCC-2021-009 | Tax Obligations", value="https://youtu.be/901q5eaRKEU", inline=False)
        embed.add_field(name="NSCC-2021-803 SFT | Fire Sale and Liquidity Risk Mitigation", value="https://youtu.be/E_hQT954ACM", inline=False)
        embed.add_field(name="NSCC-2021-803 SFT | Agency vs. Principal Model", value="https://youtu.be/WGGCEvOl2io", inline=False)
        embed.add_field(name="NSCC-2021-011 | Game Over", value="https://youtu.be/6-jXYUi4HDs", inline=False)
        embed.add_field(name="SR-NSCC-2021-005 NSCC increases Margin Requirements by 25x", value="https://youtu.be/hHeqaMnkGrk", inline=False)
        embed.add_field(name="NSCC Introduction to Interval Funds", value="https://youtu.be/MdkpF6K85vo")
        embed.add_field(name="NYSE No Longer an NSCC Participant", value="https://youtu.be/t-zi0UED-KQ")
        embed.add_field(name="NSCC - Forced Settlement", value="https://youtu.be/RY0kPXZHQyA", inline=False)
        embed.add_field(name="SR-2021-NSCC-015 | DOUBLE-DEFAULTS and Mutual Funds", value="https://youtu.be/I59a1fwLONA", inline=False)
        embed.add_field(name="The execution of small / medium players in the industry.", value="https://youtu.be/Q6yKY2gdURg", inline=False)
        embed.add_field(name="SR-NSCC-2022-002 | Interval Fund Repurchase Orders", value="https://youtu.be/SP7MekrNQcE", inline=False)
        embed.add_field(name="NSCC SFT Removes Haircut Component from Margin", value="https://youtu.be/3XwWBmq8ggs", inline=False)
        embed.add_field(name="DTC / FICC / NSCC increase capital requirements.", value="https://youtu.be/HkTIiDQYR7o", inline=False)
        embed.add_field(name="NSCC's Stock Borrow Program Loophole Sealed", value="https://youtu.be/9BMludHQAHs", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NSCCView())

    @disnake.ui.button(label="FINRA", style=disnake.ButtonStyle.gray, )
    async def finra( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Financial Industry Regulatory Authority (FINRA)", description="```py\nUnderstanding FINRA \n FINRA governs brokers and broker-dealer firms -- government lingo for financial institutions. Any institution that you use for a brokerage account or that a business uses to go public or sell securities is governed by FINRA.\n Although it acts as a governor of the industry, FINRA is a non-governmental organization. It is an independent regulatory body financial institutions must register with. The Securities and Exchange Commission (SEC) has given it the authority to discipline financial institutions with fines and other measures.\n " "FINRA exists to protect investors in the following ways:``` ```py\n 1️⃣ Makes sure all security products have been tested and qualified: FINRA-registered brokers can only sell investment products that have been reviewed and approved by the agency. \n2️⃣ Makes sure securities advertisements are truthful and not misleading: You may have noticed the seemingly endless fine print in all financial advertising. FINRA sets and enforces those guidelines.\n3️⃣ Makes sure securities products sold to investors are suitable for their needs: Brokers who sell volatile penny stocks to retirees or expensive annuities to college students will run afoul of FINRA.\n4️⃣ Makes sure investors receive complete disclosure for products before investing: Potential risk and a complete rundown of historical returns must be disclosed to investors.\n```", color=disnake.Colour.dark_orange())
        embed.set_image(url="https://th.bing.com/th/id/R.12686266421d26ae7414dd4e7da61055?rik=fzMjFgIMZj%2fh0w&pid=ImgRaw&r=0")
        embed.add_field(name="Alternate Display Facility - FINRAs Secondary Order Book", value="https://youtu.be/M_9Z4CayCx8", inline=False)
        embed.add_field(name="Alternate Display Facility History", value = "https://youtu.be/52m1cX9Mii8 \n Learn about SuperMontage, the NASD and how they eventually became FINRA - who now operates the two facilities that take up over 75% of market share on a daily basis. **The TRF Carteret Facility** and the **Alternate Display Facility**", inline=False)
        embed.add_field(name="SR FINRA 2021 009 Supplemental Liquidity", value = "https://youtu.be/HAs_aW2l1rI", inline=False)
        embed.add_field(name="FINRA RULE 6439 - New OTC Reporting Requirements", value = "https://youtu.be/GmA5LcaZyxM \n These new reporting requirements can be observed today at https://otce.finra.org/otce/home", inline=False)
        embed.add_field(name="SR-FINRA-2020-04 Restricted Firm Obligations", value = "https://youtu.be/K37TZiKD5gA", inline=False)
        embed.add_field(name="FINRA Partners with the FBI", value="https://youtu.be/oZctWlv3QUw", inline=False)
        embed.add_field(name="SR-FINRA-2021-011 | FINRA Approves Specified Risk Event", value="https://youtu.be/JYpwVZ6OqnY", inline=False)
        embed.add_field(name="SR-FINRA-2022-11 FINRA to Surveille Foreign Fixed Income Debt", value="https://youtu.be/1aUDZcCaopw", inline=False)
        embed.add_field(name="FINRA Treasury Portfolio Descrepancies", value="https://youtu.be/gy8DcK7rNgY", inline=False)
        embed.add_field(name="FINRA Rule 15c2-11", value="https://youtu.be/KKpYE9UJUHg \n **Some** refer to this phenomenon as **the zombie stock** effect. Learn how it works and the governing legislation behind it.", inline=False)
        embed.add_field(name="The Consolidated Audit Trail", value="https://youtu.be/QuMdFtg6ib4 \n Learn about the C.A.T. system that has taken nearly 14 years to complete. Bart of the Basel III reform post 2008 crisis - this is due for **PRODUCTION GO-LIVE** on July 27th.", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=FINRAView())

    @disnake.ui.button(label="The SFT Service", style=disnake.ButtonStyle.green, )
    async def sft( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Securities Financing Transaction Service", description="```py\nSFTs are transactions in which a securities lender loans securities to a securities borrower, for a fee. \n\n\n The borrowers typically use the borrowed securities to **cover short sales or fails to deliver that may result from either short or long sales. \n\n A lender typically lends securities to generate income through the fees that it charges. \n\n As a CCP (Central Clearing Counterparty), NSCC would interpose itself between the securities lender and borrower and become the counterparty to each entity. \n\n NSCC would then be obligated to complete the transaction, that is, to return loaned securities to the lender and collateral to the borrower, even if a lender or borrower in an SFT fails to satisfy its obligations, thereby assuming the risk of each entity’s failure to perform to each other.```", color=disnake.Color.random())
        embed.add_field(name="Basel III Regulations and Reforms", value="https://youtu.be/G_4qeFJqSdk \n Learn about the Basel III regulation regime.", inline=False)
        embed.add_field(name="Introduction to the NSCC SFT Service" , value="https://youtu.be/cGjsCr72hjU \n", inline=False)
        embed.add_field(name="SFT: Fire sale + Liquidity Drain Risk Mitigation", value="https://youtu.be/qLmSepmYnSo \n", inline=False)
        embed.add_field(name="Agency and Principal models for the SFT Service", value="https://youtu.be/AhTysJ7Rc2E \n", inline=False)
        embed.set_image(url="https://www.federalreserve.gov/econres/notes/feds-notes/figure-1-collateral.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=SFTView())

    @disnake.ui.button(label="The NET Stable Funding Ratio", style=disnake.ButtonStyle.green, )
    async def net( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Net Stable Funding Ratio, TITLE 12 CFR", description="```py\nFollowing the failure of many banks to adequately measure, manage and control their liquidity risk in 2007 and in subsequent years, the Basel Committee on Banking Supervision (BCBS) introduced two liquidity standards as part of the Basel III post-crisis reforms. The first of these is the Liquidity Coverage Ratio (LCR). It enhances banks' short-term resilience and is presented in another Executive Summary. The second standard - the Net Stable Funding Ratio (NSFR) - aims to promote resilience over a longer time horizon by creating incentives for banks to fund their activities with more stable sources of funding on an ongoing basis.```")
        embed.set_image(url="https://www.novantas.com/wp-content/uploads/2016/10/figure1.jpg")
        embed.add_field(name="The Net Stable Funding Ratio - Intro", value="https://youtu.be/LHKekbnr2lY \n Learn about the Title 12 Net Stable Funding Ratio", inline=False)
        embed.add_field(name="This video covers the newly added part - Bank Monitoring", value="https://youtu.be/Al-4tbspxfE", inline=False)
        embed.add_field(name="Banks Corrective Action", value="https://youtu.be/L2L0I_Oxbw0 \n Banks now face prompt corrective action under these scenarios.", inline=False)
        embed.add_field(name="Required Stable Funding", value="https://youtu.be/BoGNFJ25peY \n Learn about the RSF Factors that effect the NSFR.", inline=False)
        embed.add_field(name="Available Stable Funding", value="https://youtu.be/ZOk48dF_TBs, \n Learn about the **ASF factors** that effect the NSFR. (Available Stable Funding)", inline=False)
        embed.add_field(name="Net Stable Funding Ratio Definitions" , value="https://youtu.be/VF5W6j-VSpI \nThis video goes over the newly adopted definitions for TITLE 12 NSFR.", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NSFRView())

    @disnake.ui.button(label="Options 101 Course", style=disnake.ButtonStyle.green, )
    async def Options( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Options 101 Course", description="```py\nThis in-depth options 101 course is provided by the 'Options Industry Council.'```")
        embed.add_field(name="#1 Options Introduction", value="https://youtu.be/7jcqknbX99c \n", inline=False)
        embed.add_field(name="#2 Options Terminology", value="https://youtu.be/namg44EBFBs \n", inline=False)
        embed.add_field(name="#3 Call and Put Specifics", value="https://youtu.be/NpSQdICvNBk \n", inline=False)
        embed.add_field(name="#4 Buying Calls", value="https://youtu.be/Bc5gpsa7Z1M \n", inline=False)
        embed.add_field(name="#5 Buying Puts", value="https://youtu.be/jrYUzSibjzo \n", inline=False)
        embed.add_field(name="#6 Options Premium", value="https://youtu.be/22X3h_rwiEA \n", inline=False)
        embed.add_field(name="#7 Options and Exercising - Part 1", value="https://youtu.be/Dgc2fO4GlR8 \n", inline=False)
        embed.add_field(name="#8 Options and Exercising - Part 2", value="https://youtu.be/e_W_5jd-2v4 \n", inline=False)
        embed.add_field(name="#9 Risk versus Reward", value="https://youtu.be/p36Ovh8x89I \n", inline=False)
        embed.add_field(name="WEBINAR: Covered Calls / Poor Man's Covered Calls / Leaps", value="https://youtu.be/ySoXAKuNjxg", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=Opt101View())


    @disnake.ui.button(label="Chicago Board Options Exchange (CBOE)", style=disnake.ButtonStyle.green, )
    async def cboe( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Chicago Board Options Exchange (CBOE)", description="```py\nCBOE is the abbreviation for the Chicago Board Options Exchange. It is the world's largest options exchange, having served as an innovator of new option-based products since its first day of trading in 1973. The CBOE offers options contracts on hundreds of stocks and exchange-traded funds, as well as several of the most popular stock indexes. \n\n Among its proprietary products are stock index options on the **S&P 500 (^GSPC)**, which are the most active index options in the U.S. market. These and other financial products give investors the opportunity to manage risk in executing their investment strategies.```", url="https://www.cboe.com/us/equities/market_share/", color=disnake.Colour.dark_orange())
        embed.set_image(url="https://th.bing.com/th/id/OIP.D58Ciou2qdjSeY0tCcCVVwHaEH?pid=ImgDet&rs=1")
        embed.add_field(name="SR-CBOE-2021-02 | ETF Manipulation", value="https://youtu.be/vQCH8teGyHQ \n CBOE Files and specifically refers to ETFs being bad for price discovery in markets.", inline=False)
        embed.add_field(name="SR-CBOE-2021-039 - The Market Share Crisis", value="https://youtu.be/WlAlny63XD4", inline=False)
        embed.add_field(name="SR-CBOE-2021-040 | Automated Halts", value="https://youtu.be/Z6UO5qwv8es \n Learn about automated trading halts.", inline=False)
        embed.add_field(name="SR CboeBZX-2021-055 | Price Discovery and Liquidity", value="https://youtu.be/qVsKTX3Ui3o \n", inline=False)
        embed.add_field(name="SR-CboeBZX-2022-009 | Drill-Through Price Protection", value="https://youtu.be/fqSCRm8SoYI, \n Learn about drill-throgh price protection.", inline=False)
        embed.add_field(name="CBOE-2021-045 | Rule Violation Plan" , value="https://youtu.be/RPGF-MjD62I \n Learn about CBOE's Rule Violation Plan", inline=False)
        embed.add_field(name="CBOE Options Start Trading at 2:30AM EST", value="https://youtu.be/tSvsur3vSC0 \n CBOE Opens up trading to participants as early as **3:30 AM now - 1 hour and 30 minutes before the regular Pre-Market session begins.**", inline=False)
        embed.add_field(name="SR-CboeBZX-2021-058 - Rebates for LIQUIDATED ETFs", value="https://youtu.be/eXFqVkAjvqY \n", inline=False)
        embed.add_field(name="Options Position Limits Increased on CBOE Exchanges", value="https://youtu.be/UrSUMAKWNBA \n ", inline=False)
        embed.add_field(name="SR-Cboe-2021-026 - Extreme Duplicate Price Protection" , value="https://youtu.be/z9o4xb7gCmU \n", inline=False)
        embed.add_field(name="The CBOE Volatility Index (VIX)", value="https://youtu.be/B1wIJ4duwzM \n You've probably heard of the VIX index, and maybe have even traded it. This video goes into detail about the VIX and its' background.", inline=False)
        embed.add_field(name="CBOE BZX | 086 - Amend the Opening Auction", value="https://youtu.be/mgaiE3dCKd0 \n CBOE Amends the opening auction for options.", inline=False)
        embed.add_field(name="CBOE EdGX-2021-048 - Easy To Borrow Securities" , value="https://youtu.be/7PEe99ZRA5o \n", inline=False)
        embed.add_field(name="SR-2021-CBOE-071 | CBOE Adds The New Curb Trading Session", value="https://youtu.be/M48zMHH57-Q \n CBOE adds the new 'curb' trading session.", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=CBOEView())

    @disnake.ui.button(label="Intercontinental Exchange", style=disnake.ButtonStyle.red, )
    async def ice( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Intercontinental Exchange (ICE)", description="```py\nThe Intercontinental Exchange (ICE) is an American company formed in 2000 that operates global financial exchanges, clearing houses and provides mortgage technology, data and listing services. \n Listed on the **Fortune 500, S&P 500, and Russell 1000**, the company owns exchanges for financial and commodity markets, and operates 12 regulated exchanges and marketplaces. \n\n This includes ICE futures exchanges in the United States, Canada and Europe, the Liffe futures exchanges in Europe, the New York Stock Exchange, equity options exchanges and OTC energy, credit and equity markets. \n\nICE also owns and operates six central clearing houses:``` ```py\nICE Clear U.S., ICE Clear Europe, ICE Clear Singapore, ICE Clear Credit, ICE Clear Netherlands and ICE NGX. ICE has offices in Atlanta, New York, London, Chicago, Bedford, Houston, Winnipeg, Amsterdam, Calgary, Washington, D.C., San Francisco, Tel Aviv, Rome, Hyderabad, Singapore and Melbourne.```", color=disnake.Color.random())
        embed.set_image(url="https://mms.businesswire.com/media/20181210005339/en/411456/23/ICE_R_colour.jpg")
        embed.add_field(name="SR ICC 2021 005 Wind Down and Recovery", value="https://youtu.be/C6I29AICIsg \n", inline=False)
        embed.add_field(name="SR-ICC-2021-009 Explained in 3:33", value="https://youtu.be/CKEIAcWtKi0 \n Yet another risk based filing out of ICE.", inline=False)
        embed.add_field(name="ICC Approved Filing to Enhance Price Discovery for Options / CDS" , value="https://youtu.be/ClYYDRl2FWY \n", inline=False)
        embed.add_field(name="SR-ICC-2022-005 SWAPS ! Russian / Emerging Market SWAPS", value="https://youtu.be/FgjhEIeYiaA \n", inline=False)
        embed.add_field(name="SR-ICC-2021-015 | Beefing Up before Defaults", value="https://youtu.be/a7eU-lW-eZc \n", inline=False)
        embed.add_field(name="SR-ICEEU-2021-010 More Default Preparations", value="https://youtu.be/IYl511Yb3_o \n", inline=False)
        embed.add_field(name="ICE EUROPE - Libor Transition = More Potential Margin Calls", value="https://youtu.be/y6hS8wh4nY8 \n", inline=False)
        embed.add_field(name="ICE Prepares for Market-Wide Volatility", value="https://youtu.be/98DcxEVwBak \n", inline=False)
        embed.add_field(name="ICEEU-2022-005 | Cash Margin & Liquidity Risk", value="https://youtu.be/qi5A6OFAYhs \n", inline=False)
        embed.add_field(name="ICE Clear Credit Fixes 30minute Delivery Loophole for Swaps", value="https://youtu.be/_I2znHus9tw \n", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=ICEView())

    @disnake.ui.button(label="Exchange Traded Funds", style=disnake.ButtonStyle.red, )
    async def etfs( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Exchange Traded Funds", description="```py\nAn exchange-traded fund (ETF) is a basket of securities that trades on an exchange just like a stock does. \n ETF share prices fluctuate all day as the ETF is bought and sold this is different from mutual funds, which only trade once a day after the market closes. \n ETFs can contain all types of investments, including stocks, commodities, or bonds; some offer U.S.-only holdings, while others are international. \n ETFs offer low expense ratios and fewer broker commissions than buying the stocks individually.```", color=disnake.Colour.random())
        embed.add_field(name= "ETF Mechanics 101", value="https://youtu.be/CgsFdfTavvk \n Learn the basics of ETFs and how they work as explained by BlackRock.", inline=False)
        embed.add_field(name="Why ETFs Are Shorted", value="https://youtu.be/aeW_ETxGumc \n **Shorting** provides price disovery and liquidity in markets.", inline=False)
        embed.add_field(name="The ETF Ecosystem Creation Process", value="https://youtu.be/-SCL8F-ovgA \n Learn about how ETF **creation** and **redemption** works in this video.", inline=False)
        embed.add_field(name="ETF Mechanics", value="https://youtu.be/CgsFdfTavvk \n Learn about the mechanics of **ETFs**.", inline=False)
        embed.add_field(name="BlackRock's ETF Ecosystem", value="https://youtu.be/2tvcXsCq-Dc \n **Learn about the **ETF Ecosystem** as described by BlackRock from their own underlying documentation.", inline=False)
        embed.add_field(name="HDG mimics Market Making", value="https://youtu.be/e47kqgU2zt4 \n Yes. An ETF that is designed to mimic the actions of a market maker - ergo - an ETF which makes markets. (algorithim)", inline=False)
        embed.add_field(name="EXEMPTIVE RELIEF | Custom ETF Baskets", value="https://youtu.be/JeFYmKHtQ5A", inline=False)
        embed.add_field(name="NYSE ARCA wants more LIQUIDITY from ETFs and OPTIONS", value="https://youtu.be/b4KdRT9uKmE", inline=False)
        embed.add_field(name="Confirmed Lending - END Game ETFs", value="https://youtu.be/3G8Jm3RkwQE", inline=False)
        embed.add_field(name="ETF Liquidity | The Primary and Secondary Markets", value="https://youtu.be/CTiNffK2z00", inline=False)
        embed.set_image(url="https://th.bing.com/th/id/OIP._P3ktPObbhWdc_PWhS4yqgHaDM?pid=ImgDet&rs=1")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=ETFView())

    @disnake.ui.button(label="The New York Stock Exchange", style=disnake.ButtonStyle.red, )
    async def nyse( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="The New York Stock Exchange", description="```py\nThe NYSE is by far the world's largest stock exchange by market capitalization of its listed companies.")
        embed.add_field(name="The Designated Market Maker👷‍♂️", value="https://youtu.be/zFXZRspjOxY \n A designated market maker is one that has been selected by the exchange as the primary market maker for a given security. A DMM is responsible for maintaining quotes and facilitating buy and sell transactions. Market makers are sometimes making markets for several hundred of listed stocks at a time.```", inline=False)
        embed.add_field(name="Dark Pools, Dark Fibers, and the NYSE🧵", value="https://youtu.be/0073Jg8hY-4 \n Hello all," "So while this topic is being dismissed by a few people, I find it interesting that I keep finding more and more information that links the NYSE to some form of dark manipulation. Dark meaning undetected." "Here's a link to an investigation that was conducted from the National Securities Exchange of India that was found to be using dark fibers as a method of manipulating the markets by undercutting other members with a latency advantage." "https://www.moneylife.in/article/nse-dark-fibre-scam-sebi-alleges-manipulation-irregular-acts-poor-due-diligence-fraud-misrepresentation-and-false-statements/57058.html#:~:text=NSE%20has%20been%20directed%20to,whole%20%E2%80%9Cdark%20fibre%E2%80%9D%20episode." "Also, the filing that we saw SUSPENDING THIRD PARTY DATA SYSTEMS, which dark pools require to operate, **IN FACT ALLOW CONNECTIVITY THROUGH DARK FIBER.**" "Coincidence? Change my mind.", inline=False)
        embed.add_field(name="The NYSE Adopts the Retail Order Type🚬", value="https://youtu.be/PVFECoLEIpU \n", inline=False)
        embed.add_field(name="SR-NYSEARCA-2021-47 | The OX and Pillar Systems🐂", value="**https://youtu.be/tZ4M0vDj37s** \n “OX** refers to the Exchange’s current electronic order delivery, execution, and reporting system for designated option issues through which orders and quotes of Users are consolidated for execution and/or display.** \n **“OX Book** refers to the OX’s electronic file of orders and quotes, which contain all of the orders in each of the Display Order and Working Order processes and all of the Market Makers’ quotes in the Display Order Process. \n **NYSE Pillar** is the new integrated trading technology platform that will enable member firms to connect to all NYSE equities and options markets using a standard protocol. ", inline=False)
        embed.add_field(name="NYSE-ARCA-2021-58 || Options Fee Schedule Modifications (Liquidity)💦", value="https://youtu.be/b4KdRT9uKmE \n Whenever you see a filing that's related to FEE SCHEDULES - it means they're filing for either: \n 1️⃣ **Liqudity** \n 2️⃣ **More Market share** \n 3️⃣ **Price Discovery**", inline=False)
        embed.add_field(name="SR-NYSEArca-2021-55 | Options Series⭕", value="https://youtu.be/hHz6QBoF5tE \n **NYSE Arca files for more efficient Option's Chain They say straight up in the filing that Market Makers are using their capital inefficiently to quote options. We all know why. \n Here's the link: https://public-inspection.federalregister.gov/2021-14792.pdf**", inline=False)
        embed.add_field(name="SR-NYSE-2021-40 | Trading Halt Permeance🚫", value="https://youtu.be/lLnCbYqf1W0 \n **Learn about trading halts on the NYSE.", inline=False)
        embed.add_field(name="Retail Orders cannot be executed by Algorithims🤖", value="https://youtu.be/DjegbrqKnSY \n ", inline=False)
        embed.add_field(name="SR-NYSEArca-2021-63 | Risk / Hedging🌳", value="https://youtu.be/qH_gVxNWCcI \n ", inline=False)
        embed.add_field(name="SR-NYSEARCA-2021-66 Reformat the Basic Rates Section➿", value="https://youtu.be/epkyjA2y8Sk", inline=False)
        embed.add_field(name="SR-NYSE-2021-045 Acquisition Spinoffs📴", value="https://youtu.be/yiZwfLwySVM")
        embed.add_field(name="SR-NYSEARCA-2021-74 | A highly Competitive Market☠️", value="https://youtu.be/VAjXpBv4O3o \n The exchange alludes to the fact that the market is highly competetive - BUT is also **highly fragmented** due to the large concentration of off-exchange dark pool flow coming out of the **FINRA ADF** and **FINRA TRF CARTERET** facilities.", inline=False)
        embed.add_field(name="SR-NYSEARCA-2021-84 | Proxy Portfolios🥠", value="https://youtu.be/kSrV-Td6d4A \n Learn about proxy portfolios. It's absurd to say the least.", inline=False)
        embed.add_field(name="NYSE CEO Can now Halt Trading for up to Two Days2️⃣", value="https://youtu.be/1S7kzaT4FYo \n The NYSE CEO can now halt trading for up to two days at his own discretion.", inline=False)
        embed.add_field(name="SR-NYSEArca-2021-109 | Liquidity and Price Discovery🔎", value="https://youtu.be/53ptYMUqudE \n NYSEARCA refers to the market share crisis happening in the markets.", inline=False)
        embed.add_field(name="The NYSE Gives Special treatment to ADRs.💌", value="https://youtu.be/V8ZjerMaq58", inline=False)
        embed.add_field(name="SR-NYSENAT-2022-06 | Directed Orders Added on Exchange🎯", value="https://youtu.be/0q-QndhzuBU", inline=False)
        embed.add_field(name="SR-NYSE-2022-04 | Integrated Market Making🎊", value="https://youtu.be/8lr3Y0Xqp8w \n SEC Adopts a new type of Market Making - Integrated Market Making", inline=False)
        embed.set_image(url="https://imgs-akamai.mnstatic.com/68/ca/68cad86290980319cbdf0d967deac2ee.jpg")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NyseVIDView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def gohome( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message()

    @disnake.ui.button(label="📌", style=disnake.ButtonStyle.red, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=None)


class ChinaView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="2012-2022 | The Completed Puzzle", url="https://youtu.be/cyFyepDlAh8"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Learn about China's Three Red Lines Policy", url="https://youtu.be/qk0zftFn5s8"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Learn about China's Macroeconomic Transformation", url="https://youtu.be/b4KdRT9uKmE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="China's Recovery is Imminent - Learn Why.", url="https://youtu.be/gk_mNOZTN64"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="What's coming, what it means, and how to navigate it.", url="https://youtu.be/6u9w8tgjaoI"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="China's Transformation Explained", url="https://youtu.be/Uy8cwQylfzM"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="China IS The Supply Chain Issue", url="https://youtu.be/xwUF4TdfXsM"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message()

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=VideoView())



class NSFRView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="This video covers the newly added part - Bank Monitoring", url="https://youtu.be/Al-4tbspxfE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Banks Corrective Action", url="https://youtu.be/L2L0I_Oxbw0"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Required Stable Funding", url="https://youtu.be/BoGNFJ25peY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Available Stable Funding", url="https://youtu.be/ZOk48dF_TBs Stable Funding"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Net Stable Funding Ratio Definitions" , url="https://youtu.be/VF5W6j-VSpI"))

    @disnake.ui.button(label="NSFR LINKS", style=disnake.ButtonStyle.blurple )
    async def etfs( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=NSFRView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message()

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=VideoView())



class Opt101View(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#1 Options Introduction", url="https://youtu.be/7jcqknbX99c"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#2 Options Terminology", url="https://youtu.be/namg44EBFBs"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#3 Call and Put Specifics", url="https://youtu.be/NpSQdICvNBk"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#4 Buying Calls", url="https://youtu.be/Bc5gpsa7Z1M"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#5 Buying Puts", url="https://youtu.be/jrYUzSibjzo"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#6 Options Premium", url="https://youtu.be/22X3h_rwiEA"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#7 Options and Exercising - Part 1", url="https://youtu.be/Dgc2fO4GlR8"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#8 Options and Exercising - Part 2", url="https://youtu.be/e_W_5jd-2v4"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#9 Risk versus Reward", url="https://youtu.be/p36Ovh8x89I"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="WEBINAR: Covered Calls / Poor Man's Covered Calls / Leaps", url="https://youtu.be/ySoXAKuNjxg"))

    @disnake.ui.button(label="OPTION COURSE LINKS", style=disnake.ButtonStyle.blurple )
    async def etfs( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=Opt101View())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message()

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=VideoView())

class FINRAView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Alternate Display Facility - FINRAs Secondary Order Book", url="https://youtu.be/M_9Z4CayCx8"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Alternate Display Facility History", url= "https://youtu.be/52m1cX9Mii8"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR FINRA 2021 009 Supplemental Liquidity", url= "https://youtu.be/HAs_aW2l1rI"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="FINRA RULE 6439 - New OTC Reporting Requirements", url= "https://youtu.be/GmA5LcaZyxM"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-FINRA-2020-04 Restricted Firm Obligations", url= "https://youtu.be/K37TZiKD5gA"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="FINRA Partners with the FBI", url="https://youtu.be/oZctWlv3QUw"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-FINRA-2021-011 | FINRA Approves Specified Risk Event", url="https://youtu.be/JYpwVZ6OqnY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-FINRA-2022-11 FINRA to Surveille Foreign Fixed Income Debt", url="https://youtu.be/1aUDZcCaopw"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="FINRA Treasury Portfolio Descrepancies", url="https://youtu.be/gy8DcK7rNgY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="FINRA Rule 15c2-11", url="https://youtu.be/KKpYE9UJUHg"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The Consolidated Audit Trail", url="https://youtu.be/QuMdFtg6ib4"))

    @disnake.ui.button(label="FINRA LINKS", style=disnake.ButtonStyle.blurple )
    async def etfs( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=FINRAView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message()

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=VideoView())


class NyseVIDView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The Designated Market Maker👷‍♂️", url="https://youtu.be/zFXZRspjOxY" ))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Dark Pools, Dark Fibers, and the NYSE🧵", url="https://youtu.be/0073Jg8hY-4"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The NYSE Adopts the Retail Order Type🚬",url="https://youtu.be/PVFECoLEIpU"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-47 | The OX and Pillar Systems🐂", url="https://youtu.be/tZ4M0vDj37s"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NYSE-ARCA-2021-58 || Options Fee Schedule Modifications (Liquidity)💦", url="https://youtu.be/b4KdRT9uKmE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEArca-2021-55 | Options Series⭕", url="https://youtu.be/hHz6QBoF5tE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSE-2021-40 | Trading Halt Permeance🚫", url="https://youtu.be/lLnCbYqf1W0"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Retail Orders cannot be executed by Algorithims🤖", url="https://youtu.be/DjegbrqKnSY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEArca-2021-63 | Risk / Hedging🌳", url="https://youtu.be/qH_gVxNWCcI"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-66 Reformat the Basic Rates Section➿", url="https://youtu.be/epkyjA2y8Sk"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSE-2021-045 Acquisition Spinoffs📴", url="https://youtu.be/yiZwfLwySVM"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-74 | A highly Competitive Market☠️", url="https://youtu.be/VAjXpBv4O3o"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-84 | Proxy Portfolios🥠", url="https://youtu.be/kSrV-Td6d4A"))# \n Learn about proxy portfolios. It's absurd to say the least.", inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NYSE CEO Can now Halt Trading for up to Two Days2️⃣",url="https://youtu.be/1S7kzaT4FYo"))# \n The NYSE CEO can now halt trading for up to two days at his own discretion.", inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEArca-2021-109 | Liquidity and Price Discovery🔎", url="https://youtu.be/53ptYMUqudE"))# \n NYSEARCA refers to the market share crisis happening in the markets.", inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The NYSE Gives Special treatment to ADRs.💌", url="https://youtu.be/V8ZjerMaq58"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSENAT-2022-06 | Directed Orders Added on Exchange🎯", url="https://youtu.be/0q-QndhzuBU"))# inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSE-2022-04 | Integrated Market Making🎊",url="https://youtu.be/8lr3Y0Xqp8w")) #\n SEC Adopts a new type of Market Making - Integrated Market Making", inline=False)


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message()

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=VideoView())

    @disnake.ui.button(label="📌", style=disnake.ButtonStyle.red, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=None)



class OpportunitiesView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="SMILES😄", style=disnake.ButtonStyle.green, )
    async def smiles( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title="Option Smile Strategy", description="When you hear the term **option smile** all you need to do is realize that an option smile = the **lowest IV strike falling out of the money**. \n\n **THIS CAN HAPPEN FOR BOTH CALLS AND PUTS.** \n\n ", color=disnake.Colour.random())
        embed.set_image(url="https://media.discordapp.net/attachments/896207280117264434/955135923530629190/816.png?width=789&height=629")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=SmilesView())
    
    
    @disnake.ui.button(label="Core🧠", style=disnake.ButtonStyle.green, )
    async def avoid( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):         
        embed = disnake.Embed(title="Core🧠", color = disnake.Colour.random())
        embed.add_field(name="Note🧠", value="**The core logic is your **PRIMARY** gain builder. Any other category of plays here should only be considered IF YOU HAVE THE GAINS FROM CORE TO USE AS YOUR INVESTMENT.** \n\n If you are new - this is where to begin.", inline = True)
        embed.add_field(name="STEP 1", value="Our core logic revolves around the 14 day **RSI** indicator, as well as **GAPS** on daily charts. The best way to start is to **look for tickers with RSI that are lower than 25, or higher than 72.** \n\n The **alphaquery screener** button below can help with this task.**")
        embed.add_field(name="STEP 2", value="Once you've ran the screener and have found tickers with RSI below 25 or above 72, make sure: \n\n **NONE ARE HEALTHCARE** - Healthcare stocks tend to not work as well on the core logic. Also **AVOID ETFS**. \n\n **MAKE SURE NONE ARE WEEKLY OPTIONS** - Weekly options have more liquidity, and more room for the MMs to reallocate their positions. Stick to **monthly** expirations for the best success.")
        embed.set_image(url="https://i.ibb.co/ryBg8vy/rsioversoldoverbought.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CoreView())

    @disnake.ui.button(label="Spy🕵️", style=disnake.ButtonStyle.red, )
    async def spy( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):         
        embed = disnake.Embed(title="Spy🕵️", color = disnake.Colour.random())
        embed.add_field(name="Spy🕵️", value="**SPY** IS ONE OF THE MOST LIQUID TICKERS IN THE MARKET. \n\n **I HIGHLY RECOMMEND AVOIDING SPY UNTIL YOU GRASP CORE.** \n\n PLAY SPY WITH PROFITS ONLY IS MY RECOMMENDATION. TRADE AT YOUR OWN RISK.", inline = True)
        embed.add_field(name="Spy Relevance🕵️", value="**SPY** is best played around macro-economic events and especially around FOMC meetings. Other than that - the **CORE LOGIC** is the supreme logic and is what should be learned and practiced by anyone looking to scale gains consistently.", inline = True)
        embed.set_image(url="https://i.ibb.co/RpVdxH7/SPYNO.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=SpyView())

    @disnake.ui.button(label="China☯️", style=disnake.ButtonStyle.blurple, )
    async def china( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title="China's Economic transformation☯️", description="China is the other end of United States Monetary Policy. Coined the 'yin-yang' by some retard on the internet the documentation is clear: \n\n China is an upcoming superpower - and their markets are EMERGING, and their tech and educational space is a sound investment once you understand the economic revolution that's occured for the better part of two decades.", color=disnake.Colour.random())
        embed.set_image(url="https://media.discordapp.net/attachments/896207280117264434/955135923530629190/816.png?width=789&height=629")
        await interaction.response.edit_message(embed=embed, view=ChinaOptView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )




class CoresView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)


    @disnake.ui.button(label="OG Core🧠 Step 1", style=disnake.ButtonStyle.red, )
    async def step1( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ): 
        embed = disnake.Embed(title="OG Core🧠 Step 1", color = disnake.Colour.random())
        embed.add_field(name="STEP 1", value="Our core logic revolves around the 14 day **RSI** indicator, as well as **GAPS** on daily charts. The best way to start is to **look for tickers with RSI that are lower than 25, or higher than 72.** \n\n The **alphaquery screener** button below can help with this task.**")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CoresView())
    
    @disnake.ui.button(label="OG Core🧠 Step 2🧠", style=disnake.ButtonStyle.red, )
    async def step2( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):         
        embed = disnake.Embed(title="OG Core🧠 Step 2", color = disnake.Colour.random())
        embed.add_field(name="OG Core🧠 Step 2", value="Once you've ran the screener and have found tickers with RSI below 25 or above 72, make sure: \n\n **NONE ARE HEALTHCARE** - Healthcare stocks tend to not work as well on the core logic. Also **AVOID ETFS**. \n\n **MAKE SURE NONE ARE WEEKLY OPTIONS** - Weekly options have more liquidity, and more room for the MMs to reallocate their positions. Stick to **monthly** expirations for the best success.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CoresView())
        
    @disnake.ui.button(label="Core🧠 Step 3", style=disnake.ButtonStyle.red, )
    async def step3( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):            
        embed = disnake.Embed(title="OG Core🧠 Step 3", color = disnake.Colour.random())
        embed.add_field(name="Core🧠 Step 3", value="Once you confirm the RSI levels are overbought or oversold / confirm there are no HEALTHCARE /ETFs / corporate actions / or weekly options - look to purchase **IN THE MONEY** calls or puts.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CoresView())
    
    @disnake.ui.button(label="Core🧠 Step 4", style=disnake.ButtonStyle.red, )
    async def step4( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):            
        embed = disnake.Embed(title="OG Core🧠 Step 4", color = disnake.Colour.random())
        embed.add_field(name="Core🧠 Step 4", value="To help time your entry - you can use the 3-5 minute **MACD** indicator to help with timing. You'd want to time the entry around the MACD crosses as shown in the image.")
        embed.set_image(url="https://i.ibb.co/pPhC15K/MACD-CHART.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CoresView())
    
    @disnake.ui.button(label="Core🧠 Step 5", style=disnake.ButtonStyle.red, )
    async def step5( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ): 
        embed = disnake.Embed(title="Core🧠 Step 5", color = disnake.Colour.random())
        embed.add_field(name="Core🧠 Step 5", value="**Once you're in your position: HAVE PATIENCE. Your exit strategy: **IF IN PROFIT** or **IF PUSHED OUT OF THE MONEY**. It's as easy as that!**")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CoresView())


    @disnake.ui.button(label="What to Avoid❌", style=disnake.ButtonStyle.red, )
    async def avoid( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):         
        embed = disnake.Embed(title="What to Avoid❌", color = disnake.Colour.random())
        embed.add_field(name="Avoid Corporate Actions", value="**When you see a super over-bought RSI that gaps up on the **daily** and consolidates - look to the news to confirm a corporate action. **Buyouts, mergers, splits, reverse splits, etc. are corporate actions - and should be avoided. \n\n This image here is exactly what to avoid.", inline = True)
        embed.add_field(name="Avoid Weekly Expirations🗓️", value="**Weekly expirations have more liquidity, and are typically more popular. Avoid them for best results when utilizing the core logic.**", inline = True)
        embed.add_field(name="Never Buy The Ask🙅‍♂️", value="**NEVER BUY THE ASK!** \n\n When you buy the ask, you're paying a PREMIUM. With illiquid options - **always buy between the MID and the BID. \n\n If it helps - set-up your options chain where the ask price is not visible. Out of sight out of mind!**", inline = True)
        embed.set_image(url="https://i.ibb.co/gSM3S52/CORPACTION.png")
        embed.add_field(name="Stay IN THE MONEY🚮", value="**Get in the habit of buying IN THE MONEY** \n\n YES - In the money contracts are more expensive - because they hold more VALUE. \n\n When sitting out of the money - not only do you have zero intrinsic value - but theta will eat away at your cost average much faster. Play it safe and stick to what works - IN THE MONEY. \n\n **IN THE MONEY FOR PUTS:** Any strike **ABOVE** the current price. \n\n **IN THE MONEY FOR CALLS:** Any strike **BELOW** the current price.", inline = True)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=AvoidView())
        
    
    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def gohome( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )




class ChinaOptView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="China Screeners", style=disnake.ButtonStyle.blurple )
    async def chinascreeners( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title='China Screeners', url='https://www.alphaquery.com/saved-queries', description="Run these queries to return back tickers that meet certain characteristics. \n Easily find protective put opportunities against your current China positions by running these. \n **Updated automatically, daily.**", color=disnake.Colour.random())
        em.add_field(name='CHINESE ADRS WITH AN RSI <=30🟢', value='https://www.alphaquery.com/query/300010258?run=1 \n This screener returns any Chinese ADRs with an oversold RSI for thos who have not entered yet.')
        em.add_field(name="China Protective Put Screener || RSI >=70 🔴", value="https://www.alphaquery.com/query/300010259?run=1")
        em.add_field(name='CHINESE ADRS WITH AN RSI <=30🟢', value='https://www.alphaquery.com/query/300010258?run=1 \n This screener returns any Chinese ADRs with an oversold RSI for thos who have not entered yet.')
        em.add_field(name="China Protective Put Screener || RSI >=70 🔴", value="https://www.alphaquery.com/query/300010259?run=1")
        await interaction.response.edit_message(embed = em, view=ScreenerView())

    @disnake.ui.button(label="China Explanations", style=disnake.ButtonStyle.blurple )
    async def chinaexplanations( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="China Explanations", description = "Learn about why I'm bullish on China.")
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, view=ChinaView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def gohome( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="Opportunities Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, view=OpportunitiesView())



class ETFView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        embed= disnake.Embed(title="Exchange Traded Funds", description="👇", color=disnake.Colour.random())
        embed.add_field(name="CLICK THE BUTTON BELOW", value="👇")
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ETF Mechanics 101", url="https://youtu.be/CgsFdfTavvk"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Why ETFs Are Shorted", url="https://youtu.be/aeW_ETxGumc"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The ETF Ecosystem Creation Process", url="https://youtu.be/-SCL8F-ovgA"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="BlackRock's ETF Ecosystem", url="https://youtu.be/2tvcXsCq-Dc"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="HDG mimics Market Making", url="https://youtu.be/e47kqgU2zt4"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="EXEMPTIVE RELIEF | Custom ETF Baskets", url="https://youtu.be/JeFYmKHtQ5A"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NYSE ARCA wants more LIQUIDITY from ETFs and OPTIONS", url="https://youtu.be/b4KdRT9uKmE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Confirmed Lending - END Game ETFs", url="https://youtu.be/3G8Jm3RkwQE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ETF Liquidity | The Primary and Secondary Markets", url="https://youtu.be/CTiNffK2z00"))
        


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="eo Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, view=VideoView())




class ICEView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR ICC 2021 005 Wind Down and Recovery", url="https://youtu.be/C6I29AICIsg"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-ICC-2021-009 Explained in 3:33", url="https://youtu.be/CKEIAcWtKi0"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ICC Approved Filing to Enhance Price Discovery for Options / CDS" , url="https://youtu.be/ClYYDRl2FWY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-ICC-2022-005 SWAPS ! Russian / Emerging Market SWAPS", url="https://youtu.be/FgjhEIeYiaA"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-ICC-2021-015 | Beefing Up before Defaults", url="https://youtu.be/a7eU-lW-eZc"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-ICEEU-2021-010 More Default Preparations", url="https://youtu.be/IYl511Yb3_o"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ICE EUROPE - Libor Transition = More Potential Margin Calls", url="https://youtu.be/y6hS8wh4nY8"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ICE Prepares for Market-Wide Volatility", url="https://youtu.be/98DcxEVwBak"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ICEEU-2022-005 | Cash Margin & Liquidity Risk", url="https://youtu.be/qi5A6OFAYhs"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ICE Clear Credit Fixes 30minute Delivery Loophole for Swaps", url="https://youtu.be/_I2znHus9tw"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="eo Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, view=VideoView())


class DTCCView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DTC-2021-005 | A Closer Look", url="https://youtu.be/DZ4e1zl_LxM"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "DTC-2021-011 - Cyber Attacks / System Failures", url="https://youtu.be/c54ifHkXyIs"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "DTC-2021-014 | Settlement Services for the SFT", url="https://youtu.be/GyglhxT4qR4"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "State Street and DTCC are PARTNERS IN THIS FREE MARKET", url="https://youtu.be/3I9WfTpsnJQ"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "DRS, Fast Agents, and the DTC | Final Cut", url="https://youtu.be/ioSgS-e58QM"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "DEMAT | DTCC, DRS, and the Uninformed", url="https://youtu.be/nLttk7nG9ms"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "Overstock Partners with US Treasury and DTCC", url="https://youtu.be/4wuuCmnK7oU"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "DTCC Notice - Changes to Collateralized Haircuts", url="https://youtu.be/Hh70tMs7TkE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "SEC Filing | DTC 2021 002 - Adjust DTC's Investment Policy", url="https://youtu.be/rntLFb09Kuo"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "Meet the DRS Fast Agents", url="https://youtu.be/SgfJXBINPqY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "DTC-2021-016 | Governing Law", url="https://youtu.be/g1IbrIdN_2Y"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "DTC/FICC/NSCC increase Capital Requirements", url="https://youtu.be/HkTIiDQYR7o"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "The DRS Guide to Reality", url="https://youtu.be/6TGTvunz9Nw"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "15 Years of Pain - CMKM Diamond", url="https://youtu.be/6TGTvunz9Nw"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="eo Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, view=VideoView())



class CBOEView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-CBOE-2021-02 | ETF Manipulation", url="https://youtu.be/vQCH8teGyHQ"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-CBOE-2021-039 - The Market Share Crisis", url="https://youtu.be/WlAlny63XD4"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-CBOE-2021-040 | Automated Halts", url="https://youtu.be/Z6UO5qwv8es"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR CboeBZX-2021-055 | Price Discovery and Liquidity", url="https://youtu.be/qVsKTX3Ui3o"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-CboeBZX-2022-009 | Drill-Through Price Protection", url="https://youtu.be/fqSCRm8SoYI"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="CBOE-2021-045 | Rule Violation Plan" , url="https://youtu.be/RPGF-MjD62I"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="CBOE Options Start Trading at 2:30AM EST", url="https://youtu.be/tSvsur3vSC0"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-CboeBZX-2021-058 - Rebates for LIQUIDATED ETFs", url="https://youtu.be/eXFqVkAjvqY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Options Position Limits Increased on CBOE Exchanges", url="https://youtu.be/UrSUMAKWNBA"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-Cboe-2021-026 - Extreme Duplicate Price Protection" , url="https://youtu.be/z9o4xb7gCmU"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The CBOE Volatility Index (VIX)", url="https://youtu.be/B1wIJ4duwzMetail"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="CBOE BZX | 086 - Amend the Opening Auction", url="https://youtu.be/mgaiE3dCKd0"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="CBOE EdGX-2021-048 - Easy To Borrow Securities" , url="https://youtu.be/7PEe99ZRA5o"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-2021-CBOE-071 | CBOE Adds The New Curb Trading Session", url="https://youtu.be/M48zMHH57-Q"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Video Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=VidVideoView())





class OCCView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="OCC-2021-011 | Margin & Defaults", url="https://youtu.be/XJNTt2Yrf30"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SEC FILING OCC-2021-006", url="https://youtu.be/OkiPeHgDimk"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-OCC-2021-004 Explained in 04:20", url="https://youtu.be/1MCVZH7QvAc"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-OCC-2021-003 Explained", url="https://youtu.be/ChumKl1SWq8"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Shakeup at the OCC! Beat the news again!", url="https://youtu.be/tc1kn_au3Os"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-OCC-2021-007 | Force Majeure / Bylaws / Act of God", url="https://youtu.be/BgBfSwFoQ1U"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="OCC Partial Tear-up Rule Approved", url="https://youtu.be/5s2ytMppZCg"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-OCC-2021-803 | No Objection", url="https://youtu.be/H_4QuzqLDDc"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The OCC Cloud | BIG Changes", url="https://youtu.be/sjCFhzoT6Mo"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="OCC-2021-013 | Equity Recovery / Operational Loss", url="https://youtu.be/CG6_X6LtwoQ"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="OCC-2021-014 | The Coming Slaughter", url="https://youtu.be/gT7Z25bnbnU"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="BREAKING: OCC-2022-801 | A New IV Model", url="https://youtu.be/oOZQCwk7gxc"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The OCC Cloud | BIG Changes", url="https://youtu.be/sjCFhzoT6Mo"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="OCC to collect MARGIN DEFICITS On July 27th", url="https://youtu.be/hc3n2RsMG14"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Video Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=VidVideoView())



class NSCCView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NSCC-2022-009 | The Volatility Charge", url="https://youtu.be/4GERvX7EzZI"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NSCC-2021-007 | System Failure & Market Disruption Events", url="https://youtu.be/-xfHt_8mntg"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NSCC-2021-009 | Tax Obligations", url="https://youtu.be/901q5eaRKEU"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NSCC-2021-803 SFT | Fire Sale and Liquidity Risk Mitigation", url="https://youtu.be/E_hQT954ACM"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NSCC-2021-803 SFT | Agency vs. Principal Model", url="https://youtu.be/WGGCEvOl2io"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NSCC-2021-011 | Game Over", url="https://youtu.be/6-jXYUi4HDs"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NSCC-2021-005 NSCC increases Margin Requirements by 25x", url="https://youtu.be/hHeqaMnkGrk"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NSCC Introduction to Interval Funds", url="https://youtu.be/MdkpF6K85vo"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NYSE No Longer an NSCC Participant", url="https://youtu.be/t-zi0UED-KQ"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NSCC - Forced Settlement", url="https://youtu.be/RY0kPXZHQyA"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-2021-NSCC-015 | DOUBLE-DEFAULTS and Mutual Funds", url="https://youtu.be/I59a1fwLONA"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The execution of small / medium players in the industry.", url="https://youtu.be/Q6yKY2gdURg"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NSCC-2022-002 | Interval Fund Repurchase Orders", url="https://youtu.be/SP7MekrNQcE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NSCC SFT Removes Haircut Component from Margin", url="https://youtu.be/3XwWBmq8ggs"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DTC / FICC / NSCC increase capital requirements.", url="https://youtu.be/HkTIiDQYR7o"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NSCC's Stock Borrow Program Loophole Sealed", url="https://youtu.be/9BMludHQAHs"))

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Video Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=VidVideoView())





class MainView2(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(CommandsDropdown())
        self.add_item(TradingMainMenuDropdown())


    @disnake.ui.button(label="➡️", style=disnake.ButtonStyle.blurple, row=2)
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🔄",description=f"Rise above the narrative.", color = disnake.Colour.dark_gold())
        em.set_image(url="https://media.discordapp.net/attachments/896207280117264434/1018632105477013554/3235bb_fedadfcf38994349b7fa98fbf3f6f372_mv2.gif")


        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔄", style=disnake.ButtonStyle.red, row=2)
    async def homes( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🔄",description=f"You just switched from **LEARN** to **TRADE**.", color = disnake.Colour.dark_gold())
        em.add_field(name="Navigation", value="To naviate on the **TRADE SIDE** simply use the buttons below.")



        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="⬅️", style=disnake.ButtonStyle.blurple, row=2)
    async def homers( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="⬅️",description=f"Rise above the narrative.", color = disnake.Colour.dark_gold())
        em.set_image(url="https://media.discordapp.net/attachments/896207280117264434/1018632105477013554/3235bb_fedadfcf38994349b7fa98fbf3f6f372_mv2.gif")


        await interaction.response.edit_message(embed=em, view=MainView2())


    @disnake.ui.button(label="⭕", style=disnake.ButtonStyle.red, row=2)
    async def bye( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🔄",description=f"You just switched from **LEARN** to **TRADE**.", color = disnake.Colour.dark_gold())
        em.add_field(name="Navigation", value="To naviate on the **TRADE SIDE** simply use the buttons below.")



        await interaction.response.edit_message(embed=em, view=None)


class Dropdown3(disnake.ui.Select):
    def __init__(self):

        # Set the options that will be presented inside the dropdown
        options = [
            disnake.SelectOption(
                label="Use Ctrl + K ShortCut", description="https://media.giphy.com/media/ljoxwgpLK54RS4hz3Q/giphy.mp4"
            ),
            disnake.SelectOption(
                label="Messaging Keyboard Combos", description="https://i.ibb.co/MG2v03T/keyboardcombos.png"
            ),
            disnake.SelectOption(
                label="Navigation Keyboard Combos", description="https://i.ibb.co/1vM10mM/keyboardcombos2.png"
            ),

            disnake.SelectOption(
                label="DISCORD HELP - Turning on Developer Mode", description="https://youtu.be/b52p7V4QTaM"
            ),
            disnake.SelectOption(
                label="DISCORD HELP - Saving Messages as Threads", description="https://youtu.be/neWYeYpfpxY"
            ),
            disnake.SelectOption(
                label="DISCORD HELP - Utilizing Discord Search", description="https://youtu.be/3CkRmT2SMNk"
            ),
            disnake.SelectOption(
                label="Query Every Ticker in the Market by RSI", description="https://youtu.be/2_Jb42gtz7I"
            ),
            disnake.SelectOption(
                label="Alphaquery Tutorial", description="https://youtu.be/J-GfKWFSWuk"
            ),
            disnake.SelectOption(
                label="DISCORD HELP - The Hashtag Navigation System", description="https://youtu.be/scRK6rZ_HWY"
            ),
        ]
        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="🗣️ 🇩 🇮 🇸 🇨 🇴 🇷 🇩 🗣️",
            min_values=1,
            max_values=1,
            custom_id="MO",
            options= options,
        ),

    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.defer(with_message=True, ephemeral=True)
        if self.values[0] == "Use Ctrl + K ShortCut":
            em = disnake.Embed(title="Ctrl+K Shortcut", colour=disnake.Colour.random())
            em.set_image(url=f"https://media.giphy.com/media/ljoxwgpLK54RS4hz3Q/giphy.mp")

            em.set_footer( text="Implemented by Fudstop Trading")
            await interaction.edit_original_message(embed=em)
        elif self.values[0] == "Messaging Keyboard Combos":
            em = disnake.Embed(title="Messaging Keyboard Combos for Discord", colour=disnake.Colour.random())
            em.set_image(url=f"https://i.ibb.co/MG2v03T/keyboardcombos.png")

            em.set_footer( text="Implemented by Fudstop Trading")
            await interaction.edit_original_message(embed=em)
        elif self.values[0] == "Navigation Keyboard Combos for Discord":
            em = disnake.Embed(title="Navigation Keyboard Combos for Discord", colour=disnake.Colour.random())
            em.set_image(url=f"https://youtu.be/3CkRmT2SMNk")

            em.set_footer( text="Implemented by Fudstop Trading")
            await interaction.edit_original_message(embed=em)
        elif self.values[0] == "DISCORD HELP - Turning on Developer Mode":
            await interaction.edit_original_message(f"https://youtu.be/b52p7V4QTaM")
        elif self.values[0] == "DISCORD HELP - Saving Messages as Threads":
            await interaction.edit_original_message(f"https://youtu.be/neWYeYpfpxY")
        elif self.values[0] == "DISCORD HELP - Utilizing Discord Search":
            await interaction.edit_original_message(f"https://youtu.be/3CkRmT2SMNk")
        elif self.values[0] == "Query Every Ticker in the Market by RSI":
            await interaction.edit_original_message(f"https://youtu.be/2_Jb42gtz7I")
        elif self.values[0] == "Alphaquery Tutorial":
            await interaction.edit_original_message(f"https://youtu.be/J-GfKWFSWuk")
        elif self.values[0] == "DISCORD HELP - The Hashtag Navigation System":
            await interaction.edit_original_message(f"https://youtu.be/scRK6rZ_HWY")





class LearningMainMenuDropdown(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(
            label="Discord Tutorials⚔️",
            description="⚔️",
            ),
            disnake.SelectOption(
            label="Educational Videos📽️",
            description="📽️",
            ),
            disnake.SelectOption(
            label="Data🔢",
            description="🔢",
            ),
            disnake.SelectOption(
            label="Important Notes📖✒️",
            description="📖✒️",
            ),
            disnake.SelectOption(
            label="Tools🛠️", description="🛠️",
            ),
            disnake.SelectOption(
            label="Webull & Market School🏫",
            description="🏫",
            ),
            disnake.SelectOption(
            label="Bot Commands🤖",
            description="🤖",
            ),


        ]
        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="👇 🇲  🇪  🇳  🇺  👇".center(20, "."),
            min_values=1,
            max_values=1,
            custom_id="menu2",
            options=options,
        )


    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.defer(with_message=False, ephemeral=True)
        if self.values[0] == "Discord Tutorials⚔️":
            embed = disnake.Embed(title="Discord Tutorials⚔️", color=disnake.Colour.dark_blue())
            embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
            embed.set_footer(text="Implemented by FUDSTOP Trading")

            await interaction.edit_original_message(embed=embed, view=HelpView())
        elif self.values[0] == "Educational Videos📽️":
            embed = disnake.Embed(title="Educational Videos📽️", color=disnake.Colour.dark_blue())
            view = disnake.ui.View()
            view.add_item(VideoSelect())
            embed.set_footer(text="Implemented by FUDSTOP Trading")
            await interaction.edit_original_message(embed=embed, view=view)
        elif self.values[0] == "Data🔢":
            embed = disnake.Embed(title="Data🔢", color=disnake.Colour.dark_blue())
            embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
            embed.set_footer(text="Implemented by FUDSTOP Trading")

            await interaction.edit_original_message(embed=embed, view=dataView())
        elif self.values[0] == "Important Notes📖✒️":
            embed = disnake.Embed(title="Important Notes📖✒️", color=disnake.Colour.dark_blue())

            embed.set_footer(text="Implemented by FUDSTOP Trading")
            await interaction.edit_original_message(embed=embed, view=NotesView())
        elif self.values[0] == "Tools🛠️":
            embed = disnake.Embed(title="Important Notes📖✒️", color=disnake.Colour.dark_blue())
            embed = disnake.Embed(title="Tools🛠️", color=disnake.Colour.dark_green())
            embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
            embed.set_footer(text="Implemented by FUDSTOP Trading")

            await interaction.edit_original_message(embed=embed, view=ToolsView())
        elif self.values[0] == "Webull & Market School🏫":
            await interaction.response.defer(with_message=False, ephemeral=True)
            embed = disnake.Embed(title="Webull & Market School🏫", color=disnake.Colour.dark_green())
            embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
            embed.set_footer(text="Implemented by FUDSTOP Trading")

            await interaction.edit_original_message(embed=embed, view = LearnView())
        elif self.values[0] == "Bot Commands🤖":
            await interaction.response.defer(with_message=False, ephemeral=True)
            embed = disnake.Embed(title="Bot Commands🤖", color=disnake.Colour.dark_blue())

            embed.set_footer(text="Implemented by FUDSTOP Trading")
            await interaction.edit_original_message(embed=embed, view=BotsView())



class OptionStratsDropdown(disnake.ui.Select):
    def __init__(self):
        options = [
            disnake.SelectOption(
            label="🐻Short Call", description="♟️ Learn about different Options Strategies",
            ),
                disnake.SelectOption(
            label="🐂Short Put", description="🏹 Learn about the Greeks - Delta, Theta, Rho, Vega, and Gamma.",
            ),
                disnake.SelectOption(
            label="🐂Long Call", description="Get edjumicated on Options!",
            ),
                disnake.SelectOption(
            label="🐻Long Put", description="Learn about the top Options List in Webull!",
            ),
        ]

        super().__init__(
            placeholder="👇 🇸  🇹  🇷  🇦  🇹  🇸 👇",
            min_values=1,
            max_values=1,
            custom_id="feeds2",
            options=options,
        )

    
    
class QuickView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)
        self.add_item(OptionStratsDropdown())
    
    
    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.defer(with_message=True, ephemeral=True)
        if self.values[0] == "🐂Long Call":
            embed = disnake.Embed(title="🐂Long Call", color=disnake.Colour.green())
            embed.add_field(name="Strategy", value=
            "```py\nLong Call```")
            embed.add_field(name="Alternative Name", value=
            "n/a")
            embed.add_field(name="Pre-Requisite Strategy Knowledge", value=
            "```py\nLong Stock```")
            embed.add_field(name="Legs of Trade", value=
            "```py\n1 leg"
            "Buy 1 XYZ call```")
            embed.add_field(name="Sentiment", value=
            "```py\nBullish 🐂```")
            embed.add_field(name="Example", value=
            "```py\nLong 10 XYZ January 50 calls for $1.25, plus fees and commissions```")
            embed.add_field(name="Rule to Remember", value=
            "n/a")
            embed.add_field(name="Max Potential Profit (GAIN)", value=
            "```py\nUnlimited```")
            embed.add_field(name="Break-Even Point", value=
            "```py\nThe breakeven point occurs when XYZ stock price is trading equal to the strike price plus the net premium paid.```")
            embed.add_field(name="Max Potential Risk (LOSS)", value=
            "Net Premium Paid (debit)")
            embed.add_field(name="Ideal Outcome", value=
            "```py\nXYZ price rises significantly above the strike price plus net premium paid```")
            embed.add_field(name="Margin Requirement", value=
            "No")
            embed.add_field(name="Early Assignment Risk", value=
            "```py\nEarly assignment risk applies to short options positions only.\n\n"
            "Long options have no risk of early assignment.```")
            embed.set_image(url="https://social-media.webullfintech.com/social/d4659b1e5e0b41b4aed07684320ac3ae.png")

            await interaction.edit_original_message(embed=embed, view=QuickView())

        elif self.values[0] == "🐻Long Put":
            embed = disnake.Embed(title="🐻Long Put", color=disnake.Colour.dark_red())
            embed.add_field(name="Strategy", value=
            "```py\nLong Put```")
            embed.add_field(name="Alternative Name", value=
            "n/a")
            embed.add_field(name="Pre-Requisite Strategy Knowledge", value=
            "```py\nShort Stock (link to strategy)```")
            embed.add_field(name="Legs of Trade", value=
            "```py\n1 leg"
            "Buy 1 XYZ put```")
            embed.add_field(name="Sentiment", value=
            "Bearish🐻")
            embed.add_field(name="Example", value=
            "```py\nLong 10 XYZ January 50 puts for $1.30, plus fees and commissions```")
            embed.add_field(name="Rule to Remember", value=
            "n/a")
            embed.add_field(name="Max Potential Profit (GAIN)", value=
            "```py\nSignificant, but limited```")
            embed.add_field(name="Break-Even Point", value=
            "```py\nThe breakeven point occurs when XYZ stock price is trading equal to the strike price less the net premium paid.```")
            embed.add_field(name="Max Potential Risk (LOSS)", value=
            "```py\nNet Premium Paid (debit)```")
            embed.add_field(name="Ideal Outcome", value=
            "```py\nXYZ price declines significantly below the strike price less net premium paid```")
            embed.add_field(name="Margin Requirement", value=
            "No")
            embed.add_field(name="Early Assignment Risk", value=
            "```py\nEarly assignment risk applies to short options positions only.\n"
            "Long options have no risk of early assignment.```")
            embed.set_image(url="https://u1sweb.webullfinance.com/social/0b154d24b5fc420f939284a97924045a.png")

            await interaction.edit_original_message(embed=embed, view=QuickView())
        elif self.values[0] == "🐻Short Call":
            embed = disnake.Embed(title="🐻Short Call", color=disnake.Colour.green())
            embed.add_field(name="Strategy", value=
            "```py\nShort Call```")
            embed.add_field(name="Alternative Name", value=
            "```py\nNaked Call\n"
            "Uncovered Call```")
            embed.add_field(name="Pre-Requisite Strategy Knowledge", value=
            "```py\nLong Stock\n"
            "Short Stock\n"
            "Long Call\n```")
            embed.add_field(name="Legs of Trade", value=
            "```py\n1 leg\n"
            "Sell 1 XYZ call```")
            embed.add_field(name="Sentiment", value=
            "```py\nBearish🐻```")
            embed.add_field(name="Example", value=
            "```py\nShort 10 XYZ January 50 calls for $1.45, less fees and commissions```")
            embed.add_field(name="Rule to Remember", value=
            "n/a")
            embed.add_field(name="Max Potential Profit (GAIN)", value=
            "```py\nNet Premium Collected```")
            embed.add_field(name="Break-Even Point", value=
            "```py\nThe breakeven point occurs when XYZ stock price is trading equal to the strike price plus the net premium collected.```")
            embed.add_field(name="Max Potential Risk (LOSS)", value=
            "```py\nUnlimited```")
            embed.add_field(name="Ideal Outcome", value=
            "```py\nXYZ price rises significantly above the strike price plus net premium paid.```")
            embed.add_field(name="Margin Requirement", value=
            "```py\nYes```")
            embed.add_field(name="Early Assignment Risk", value=
            "```py\nEquity options in the United States can be exercised on any business day, and the holder of a short options position has no control over when they will be required to fulfill the obligation. Therefore, the risk of early assignment must be considered when entering positions involving short options. Early assignment of options is generally related to dividends, and short calls that are assigned early are generally assigned on the day before the ex-dividend date. In-the-money calls whose time value is less than the dividend have a high likelihood of being assigned.\n\n"
            "The short call strategy has early assignment risk.\n\n"
            "If the stock price is above the strike price of the short call, a decision must be made if early assignment is likely. If you believe assignment is likely and you do not want a short stock position, then appropriate action must be taken. Before assignment occurs, the risk of assignment can be eliminated by: (1) Purchasing the call option to close out your short call position.\n\n"
            "If early assignment of a short call does occur, stock is sold.```")
            embed.add_field(name="-",value="```py\nIf you do not own the stock that is to be delivered, then a short stock position is created. If you do not want a short stock position, you can close it out by buying stock in the marketplace. Important consideration: Assignment of a short call might also trigger a margin call if there is not sufficient account equity to support the short stock position.\n\n"
            "Also, if a short option is assigned it creates a short position which may result in hard to borrow securities lending fees.```")
            embed.set_image(url="https://www.webull.com/learn/KhJuyb/yRVK6e/Short-Call-At-a-Glance")

            await interaction.edit_original_message(embed=embed, view=QuickView())
        elif self.values[0] == "🐂Short Put":
            embed = disnake.Embed(title="🐂Short Put", color=disnake.Colour.dark_green())
            embed.add_field(name="Strategy", value=
            "```py\nShort Put```")
            embed.add_field(name="Alternative Name", value=
            "```py\nNaked Put \n"
            "Uncovered Put```")
            embed.add_field(name="Pre-Requisite Strategy Knowledge", value=
            "```py\nLong Stock \n"
            "Short Stock \n"
            "Long Put```")
            embed.add_field(name="Legs of Trade", value=
            "```py\n1 leg\n"
            "Sell 1 XYZ put```")
            embed.add_field(name="Sentiment", value=
            "```py\nBullish🐂```")
            embed.add_field(name="Example", value=
            "```py\nShort 10 XYZ January 50 puts for $1.63, less fees and commissions```")
            embed.add_field(name="Rule to Remember", value=
            "n/a")
            embed.add_field(name="Max Potential Profit (GAIN)", value=
            "```py\nNet Premium Collected```")
            embed.add_field(name="Break-Even Point", value=
            "```py\nThe breakeven point occurs when XYZ stock price is trading equal to the strike price less the net premium collected.```")
            embed.add_field(name="Max Potential Risk (LOSS)", value=
            "```py\nSignificant but capped.```")
            embed.add_field(name="Ideal Outcome", value=
            "```py\nXYZ price declines significantly below the strike price less net premium collected.```")
            embed.add_field(name="Margin Requirement", value=
            "```py\nYes```")
            embed.add_field(name="Early Assignment Risk", value=
            "```py\nEquity options in the United States can be exercised on any business day, and the holder of a short stock options position has no control over when they will be required to fulfill the obligation. Therefore, the risk of early assignment must be considered when entering positions involving short options. Early assignment of stock options is generally related to dividends. However, for puts, early exercise is generally favorable when the interest on the short stock is worth more than the value of the corresponding call option. \n\n"

            "The short put strategy has early assignment risk.\n\n"

            "If the stock price is below the strike price of the short put, a decision must be made if early assignment is likely. If you believe assignment is likely and you do not want a long stock position, then appropriate action must be taken. Before assignment occurs, the risk of assignment can be eliminated by: (1) Purchasing the put option to close out your short put position. \n\n"
            "If early assignment of a short put does occur, stock is bought. If you do not want a long stock position, you can close it out by selling the stock in the marketplace. Important consideration: Assignment of a short put might also trigger a margin call if there is not sufficient account equity to support the short stock position.```")
            embed.set_image(url="https://u1sweb.webullfinance.com/social/d678f0abdda54cb9ab9925432472527b.png")

            await interaction.response.edit_message(embed=embed, view=QuickView())



class TradingMainMenuDropdown(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(
            label="Top 10 Daily Gainers 📈",
            description="📈 The top 10 Daily Gainers - Updates Intraday",
            ),
            disnake.SelectOption(
            label="Top 10 Daily Losers 📉",
            description="📉 The top 10 Daily Losers - Updates Intraday",
            ),
            disnake.SelectOption(
            label="High FTD Tickers with t+35 Dates",
            description="These tickers have the highest Fails count with their respective T+35 dates.",
            ),
            disnake.SelectOption(
            label="Top 10 Most Active 🏃",
            description="🏃 Returns the most active stocks on the day - updates Intraday.",
            ),
            disnake.SelectOption(
            label="Sector Performance 🔍", description="🔍 Returns Sector performace on the day - updates Intraday.",
            ),
            disnake.SelectOption(
            label="Top Shorted By Float% 🔥",
            description="🔥 Returns the heaviest shorted tickers by % of float shorted.",
            ),
            disnake.SelectOption(
            label="Top 15 Lowest Float Tickers 🔥",
            description="🔥Returns the tickers with the lowest floats.",
            ),
            disnake.SelectOption(
            label="Real Time Play Alerts 💰",
            description="View the real time play alerts channels and setup notifications.",
            ),


        ]
        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="🎯 🇩  🇦  🇹  🇦 🎯",
            min_values=1,
            max_values=1,
            custom_id="Menu22",
            options=options,
        )


    async def callback(self, inter: disnake.MessageInteraction):
        await inter.response.defer(with_message=True)
        if self.values[0] == "High FTD Tickers with t+35 Dates":
            em = disnake.Embed(title=f"High FTDs with T+35 dates", description=f"```py\nFTDs are a good way to find play opportunities. FTDs that have t+35 dates during short settlement windows = a good outlook!```")

            em.set_footer( text="Implemented by Fudstop Trading")
            await inter.response.edit_message(embed= em, view=FTDStocks())

        elif self.values[0] == "Top 15 Lowest Float Tickers 🔥":
            em = disnake.Embed(title="Top 15 Lowest Float TIckers 🔥", color = disnake.Colour.dark_gold())

            em.set_footer( text="Implemented by Fudstop Trading")
            await inter.response.edit_message(embed = em, view=LowFloatView())

        elif self.values[0] == "Real Time Play Alerts💰":
            em = disnake.Embed(title="Top 15 Lowest Float TIckers 🔥", color = disnake.Colour.dark_gold())

            em.set_footer( text="Implemented by Fudstop Trading")
            await inter.response.edit_message(embed = em, view=AlertsView())



class DropdownView(disnake.ui.View):
    def __init__(self):
        super().__init__()
        # Adds the dropdown to our view object.
        button4 = disnake.ui.Button(style=disnake.ButtonStyle.grey, label="Tools")
        button5 = disnake.ui.Button(style=disnake.ButtonStyle.gray, label="Datasets")
        button6 = disnake.ui.Button(style=disnake.ButtonStyle.grey, label="Stocks with High Short Interest")
        button7 = disnake.ui.Button(style=disnake.ButtonStyle.green, label="Most Active Stocks")
        button9 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="Low Float Stocks")
        button9.callback = lambda interaction: interaction.response.edit_message(view=LowFloatView())
        self.add_item(button4)
        self.add_item(button5)
        self.add_item(button6)
        self.add_item(button7)
        self.add_item(button9)
        self.add_item(Dropdown2())
        self.add_item(Dropdown3())





class Dict1View(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="Balance Sheet", style=disnake.ButtonStyle.blurple)
    async def videos1( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Balance Sheet", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/cb0b336aceb54e3ab7801d166e47dbf6.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Equity", style=disnake.ButtonStyle.blurple)
    async def videos2( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Equity", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/0dcf6897d7554d8a821f321474f0edfc.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Bad Debt", style=disnake.ButtonStyle.blurple)
    async def videos4( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Bad Debt", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/21b7e5bbc5f74b65a248d44e7acc0c9b.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Over the Counter", style=disnake.ButtonStyle.blurple)
    async def videos5( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Over the Counter (OTC)", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/ad765ff83e7740c3a50d6cb3f814ec4c.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Inflation", style=disnake.ButtonStyle.red)
    async def videos6( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Inflation", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/7742b3bdf5f94e9ea7a6efce6f2166f6.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Benchmark", style=disnake.ButtonStyle.grey)
    async def videos7( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Benchmark", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/338ff886778440d39fbe94fbc8605289.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Crypto Currency", style=disnake.ButtonStyle.grey)
    async def videos8( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Crypto Currency", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/a12e14d65e754e8e9af52932fe30406b.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Private Market Value (PMV)", style=disnake.ButtonStyle.blurple)
    async def videos9( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Private Market Value (PMV)", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/479a482c5b8f467096ff11da53f39b24.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Secondary Offering", style=disnake.ButtonStyle.red)
    async def videos10( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Secondary Offering", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/05f6bc2c0fd04bab8c151dc0700f19d8.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Dividend Income", style=disnake.ButtonStyle.grey)
    async def videos11( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Dividend Income", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/30e642fe8406446795704954317dff7d.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Credit Rating", style=disnake.ButtonStyle.grey)
    async def videos12( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Credit Rating", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/05d747a253514ad2a0e30f4d9c921363.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Exchange Traded Funds", style=disnake.ButtonStyle.blurple)
    async def videos13( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Exchange Traded Funds", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/4853bdbe1792421fa5e0add1dbd7f200.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Blue Chip Stocks", style=disnake.ButtonStyle.red)
    async def videos14( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Blue Chip Stocks", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/9d45cdeaee5641b6a286ea62b8718eb1.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Index", style=disnake.ButtonStyle.grey)
    async def videos15( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Index", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/ff4343bcd93c4ea2a4b6ab1dd0de9b1a.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Index Fund", style=disnake.ButtonStyle.grey)
    async def videos16( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Index Fund", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/570306f54a754d3e850bb186b4f39f39.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Securities", style=disnake.ButtonStyle.blurple)
    async def videos17( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Securities", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/dd1591b978ad42ad93c5a24461004bfb.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Arbitrage", style=disnake.ButtonStyle.red)
    async def videos18( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Arbitrage", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/54f93bf7b37344f5828c8f284bf22ddf.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Passive Investing", style=disnake.ButtonStyle.grey)
    async def videos19( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Passive Investing", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/674ae806443e4c1a962b0a28a93e3356.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Float", style=disnake.ButtonStyle.red)
    async def videos22( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Float", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/f513fbb43ba34e06bb821aac2b313cd1.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Initial Public Offering (IPO)", style=disnake.ButtonStyle.grey)
    async def videos23( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Initial Public Offering (IPO)", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/7c167510267e4ac4aab1248244673906.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())


    @disnake.ui.button(label="Penny Stocks", style=disnake.ButtonStyle.blurple)
    async def videos25( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Penny Stocks", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/0e5e18bd53a24af2b09ebe145d7d3264.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Earnings Per Share (EPS)", style=disnake.ButtonStyle.grey)
    async def videos26( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Earnings Per Share (EPS)", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/55155d7f6ac84e7e89bdf493cd0260ed.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Leveraged Buyout", style=disnake.ButtonStyle.grey)
    async def videos27( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Leveraged Buyout", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/616686ca87604a35b965ffe3a015c199.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())

    @disnake.ui.button(label="Small Cap", style=disnake.ButtonStyle.blurple)
    async def videos28( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Small Cap Definition", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/93defdddbe234d0c9b01a8ca29576909.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=Dict1View())


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        await interaction.response.edit_message(embed=em, )



class DictView2(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="Broker-Dealer", style=disnake.ButtonStyle.blurple)
    async def bd( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Broker-Dealer", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/29e103a908bf4cb4abcd85ed239cadf4.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())

    @disnake.ui.button(label="Agent", style=disnake.ButtonStyle.blurple)
    async def ag( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Agent", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/8fa201d026db4aaf8be288858e710846.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Gray Knight", style=disnake.ButtonStyle.blurple)
    async def gk( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Gray Knight", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/c46fbb9970d64458bd06220f751c4ca5.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Activist Investor", style=disnake.ButtonStyle.blurple)
    async def ai( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Activist Investor", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/74ed2d33fabc41e0a6f6ae930b556322.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Window and Orphan Stock", style=disnake.ButtonStyle.blurple)
    async def waos( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Window and Orphan Stock", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/4ecfb03a71ba4ba3955966726f4b2d48.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Lady MacBeth Strategy", style=disnake.ButtonStyle.blurple)
    async def ldymcb( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Lady MacBeth Strategy", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/d96e7eab77c44d92a46be7f9f1b01078.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Sharpe Ratio", style=disnake.ButtonStyle.blurple)
    async def sharpe( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Sharpe Ratio", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/47a1b9d4a03c43bc85dd2a6f231dc309.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="White Knight", style=disnake.ButtonStyle.blurple)
    async def wk( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="White Knight", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/a97357bbf7d94cae814b727c7b9e19db.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Zombies", style=disnake.ButtonStyle.blurple)
    async def zom( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Zombies", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/aec8299d1e844dcfb7ae738d252f4b02.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Block Trader", style=disnake.ButtonStyle.blurple)
    async def blk( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Block Trader", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/c41e816635384a728ea382ef78f3ab5f.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Angel Investor", style=disnake.ButtonStyle.blurple)
    async def angel( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Angel Investor", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/abc17cd82df04fba998593d556709d49.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Kicker", style=disnake.ButtonStyle.blurple)
    async def kicker( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Kicker", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/4e3111eb2a0445f89be166b03ecbf22c.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Bond Holder", style=disnake.ButtonStyle.blurple)
    async def bh( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Bond Holder", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/cd8cdff284f347d5b56a8df8afd6f6f1.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Unicorn", style=disnake.ButtonStyle.blurple)
    async def unic( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Unicorn", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/433190b13fff44c198c10cb307aa45c7.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Spaceman", style=disnake.ButtonStyle.blurple)
    async def space( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Spaceman", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/78650e10ea5a48f09fca80c83b483441.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())

    @disnake.ui.button(label="Santa Claus Rally", style=disnake.ButtonStyle.blurple)
    async def santa( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Santa Claus Rally", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/117b2b83a72d441896b38756b53ca1d9.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Buy-Side Analyst", style=disnake.ButtonStyle.blurple)
    async def bsa( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Buy-Side Analyst", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/8698c9208d6d4bd6b64a745430bb34d4.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Winner's Curse", style=disnake.ButtonStyle.blurple)
    async def wc( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Winner's Curse", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/a6df188c38694ac4a7915bc0aa18e827.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())
    @disnake.ui.button(label="Analyst", style=disnake.ButtonStyle.blurple)
    async def anal( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Analyst", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


        await interaction.response.edit_message(embed=embed, view=DictView2())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You just went BACK from the Dictionary.", color=disnake.Colour.dark_blue())
        await interaction.response.edit_message(view=None)



class LearnView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(LearningMainMenuDropdown())




    @disnake.ui.button(label="US Markets", style=disnake.ButtonStyle.green)
    async def usmarketse( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="US Markets - Provided by Webull", description="```py\nLearn about the United States markets - how they behave during 🐂bull and  🐻bear markets, and much more.```", color=disnake.Colour.red())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


        await interaction.response.edit_message(embed=embed, view=USMarketsView())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.grey, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message()
        embed = disnake.Embed(title="You just went 🔙 from the Learning Menu",color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


        await interaction.response.edit_message(embed=embed, )


        await interaction.response.edit_message(view=None)

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())


        await interaction.response.edit_message(embed=em, )




###CITED WORKS###
class CitedView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="History", style=disnake.ButtonStyle.blurple, )
    async def history( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="History", description="```py\nView cited works based on history pertaining to several market topics.```")
        embed.add_field(name="OECD Resposne to the 2008 Crisis", value="https://www.oecd.org/sti/42983414.pdf", inline=True)
        embed.add_field(name="Final Rule - Money Market Reform Post Crisis", value="https://www.sec.gov/rules/final/2010/ic-29132.pdf", inline=True)
        embed.add_field(name="The global financial crisis: Causes impacts & policy responses", value="```py\nThe global financial crisis: Causes impacts & policy responses:``` https://www.oecd.org/finance/financial-markets/42549690.pdf", inline=True)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=CitedView())

    @disnake.ui.button(label="Market Mechanics", style=disnake.ButtonStyle.red, )
    async def marketmechanics( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Market Mechanics", description="```py\nLearn about how different things work in several areas of the Markets.```")
        embed.add_field(name="Failure is an Option - Short Selling", value="https://www.sec.gov/comments/4-520/4520-6.pdf", inline=True)
        embed.add_field(name="ETFs - Creation and Redemption", value="https://www.ici.org/doc-server/pdf%3Aper20-05.pdf ", inline=True)
        embed.add_field(name="The Arbitrage Theory", value="https://www.top1000funds.com/wp-content/uploads/2014/05/The-Arbitrage-Theory-of-Capital-Asset-Pricing.pdf", inline=True)
        embed.add_field(name="The Economics of Naked Short Selling", value="https://www.cato.org/sites/cato.org/files/serials/files/regulation/2008/2/v31n1-6.pdf", inline=True)
        embed.add_field(name="Price Gap Anomaly in the US Financial Markets", value="https://www.up.ac.za/media/shared/61/WP/wp_2019_63.zp178869.pdf", inline=True)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=CitedView())

    @disnake.ui.button(label="Fed Reserve / Macro Economics", style=disnake.ButtonStyle.red, )
    async def fedmacro( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Macro Economics", description="```py\nView cited works based on macro-economics / monetary policy / and the Federal Reserve```")
        embed.add_field(name="The Three Red Line Policy", value="https://www.ubs.com/global/en/assetmanagement/insights/thematic-viewpoints/apac-and-emerging/articles/china-three-red-lines/_jcr_content/mainpar/toplevelgrid/col1/actionbutton.2083861291.file/PS9jb250ZW50L2RhbS9hc3NldHMvYW0vY24vZG9jL2NoaW5hLXRocmVlLXJlZC1saW5lcy5wZGY=/china-three-red-lines.pdf", inline=True)
        embed.add_field(name="The INs and Outs of Collateral Reuse", value="https://www.federalreserve.gov/econres/notes/feds-notes/ins-and-outs-of-collateral-re-use-20181221.htm", inline=True)
        embed.add_field(name="The Chinese Economic Transformation", value="https://library.oapen.org/bitstream/id/bb1ddd53-7ea7-48fe-a07f-7282853bf896/chineseeconomic.pdf ", inline=True)
        embed.add_field(name="THE GLOBAL VALUE CHAINS AND THE EVOLUTION OF CHINESE ECONOMIC MODEL", value="https://www.repository.utl.pt/bitstream/10400.5/19964/1/wp178.pdf", inline=True)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=CitedView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=MainView2())




import disnake
from disnake.ext import commands
from api_master.cfg import YOUR_NASDAQ_KEY
from  disnake import ApplicationCommandInteraction


class dataView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    # Creates a row of buttons and when one of them is pressed, it will send a message with the number of the button.

    @disnake.ui.button(label="BIGMAC Datasets", style=disnake.ButtonStyle.blurple, )
    async def bigmac( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="🍕BIG MAC 🍕", description="🍕BIG MAC🍕 is used to determine valuations of various countries around the globe.", color=disnake.Colour.random())
        embed.add_field(name="The BIG MAC", value="The Big Mac Index is an informal measure of currency exchange rates at ppp. It measures their value against a similar basket of goods and services, in this case a Big Mac. Differing prices at market exchange rates would imply that one currency is under or overvalued.")
        embed.add_field(name="🇺🇸 United States of America 🇺🇸", value=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_USA.csv?&api_key={YOUR_NASDAQ_KEY}", inline=False)
        embed.add_field(name="🇺🇦 Ukraine 🇺🇦", value=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_UKR.csv?&api_key={YOUR_NASDAQ_KEY} \n\n", inline=False)
        embed.add_field(name="🇹🇼 Taiwan 🇹🇼", value=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_ROC.csv?&api_key={YOUR_NASDAQ_KEY} \n\n" , inline=False)
        embed.add_field(name="🇨🇭 Switzerland 🇨🇭", value=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_CHE.csv?&api_key={YOUR_NASDAQ_KEY} \n\n", inline=False)
        embed.add_field(name="🇸🇪 Sweden 🇸🇪", value=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_SWE.csv?&api_key={YOUR_NASDAQ_KEY} \n\n ", inline=False)
        embed.add_field(name="🇰🇷 South Korea 🇰🇷", value=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_KOR.csv?&api_key={YOUR_NASDAQ_KEY} \n\n ", inline=False)
        embed.add_field(name="🇸🇬 Singapore 🇸🇬", value=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_SIN.csv?&api_key={YOUR_NASDAQ_KEY} \n\n", inline=False)
        embed.add_field(name="🇸🇦 Saudi Arabia 🇸🇦", value=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_SAU.csv?&api_key={YOUR_NASDAQ_KEY} \n\n  ", inline=False)
        embed.add_field(name="🇷🇺 Russia 🇷🇺", value=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_RUS.csv?&api_key={YOUR_NASDAQ_KEY} \n", inline=False)
        embed.add_field(name="🇯🇵 Japan 🇯🇵", value=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_JPN.csv?&api_key={YOUR_NASDAQ_KEY} \n", inline=False)
        embed.add_field(name="🇮🇳 India 🇮🇳", value=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_IND.csv?&api_key={YOUR_NASDAQ_KEY} \n\n ",inline=False)
        embed.add_field(name="🇭🇰 Hong Kong 🇭🇰", value=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_HKG.csv?&api_key={YOUR_NASDAQ_KEY} \n\n", inline=False)
        embed.add_field(name="🇨🇳 China 🇨🇳", value=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_CHN.csv?&api_key={YOUR_NASDAQ_KEY} \n\n")
        embed.set_image(url="https://s7d1.scene7.com/is/image/mcdonalds/t-mcdonalds-Big-Mac-1:1-3-product-tile-desktop?wid=830&hei=516&dpr=off")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view = BigMacView())


    @disnake.ui.button(label="Inflation Data From Around the Globe", style=disnake.ButtonStyle.blurple, )
    async def inflation( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="🎈Inflation Data🎈", description="🎈Inflation Data🎈 from around the world. (CPI) Click a link to download the dataset. **Updated automatically**", color=disnake.Colour.random())
        embed.add_field(name="🇺🇸 United States of America 🇺🇸", value=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_USA.csv?&api_key={YOUR_NASDAQ_KEY} \n\n **CPI For USA**", inline=False)
        embed.add_field(name="🇯🇵 Japan 🇯🇵", value=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_JPN.csv?&api_key={YOUR_NASDAQ_KEY} \n\n **CPI For Japan**", inline=False)
        embed.add_field(name="🇷🇺 Russia 🇷🇺", value=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_RUS.csv?&api_key={YOUR_NASDAQ_KEY} \n\n **CPI For Russia**", inline=False)
        embed.add_field(name="🇦🇷 Argentina 🇦🇷", value=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_ARG.csv?&api_key={YOUR_NASDAQ_KEY} \n\n **CPI For Argentina**", inline=False)
        embed.add_field(name="🇮🇹 Italy 🇮🇹", value=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_ITA.csv?&api_key={YOUR_NASDAQ_KEY} \n\n **CPI For Italy**", inline=False)
        embed.add_field(name="🇦🇺 Austrailia 🇦🇺", value=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_AUS.csv?&api_key={YOUR_NASDAQ_KEY} \n\n **CPI For Austrailia**", inline=False)
        embed.add_field(name="🇳🇿 New Zealand 🇳🇿", value=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_NZL.csv?&api_key={YOUR_NASDAQ_KEY} \n\n **CPI For New Zealand**", inline=False)
        embed.add_field(name="🇨🇦 Canada 🇨🇦", value=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_CAN.csv?&api_key={YOUR_NASDAQ_KEY} \n\n **CPI For Canada**", inline=False)
        embed.add_field(name="🇪🇺 Euro Area 🇪🇺", value=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_EUR.csv?&api_key={YOUR_NASDAQ_KEY} \n\n **CPI For the Euro Area**", inline=False)
        embed.add_field(name="🇩🇪 Germany 🇩🇪", value=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_DEU.csv?&api_key={YOUR_NASDAQ_KEY} \n\n **CPI For Germany**", inline=False)
        embed.add_field(name="🇫🇷 France 🇫🇷", value=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_FRA.csv?&api_key={YOUR_NASDAQ_KEY} \n\n **CPI For France**", inline=False)
        embed.add_field(name="🇬🇧 United Kingdom 🇬🇧", value=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_UNK.csv?&api_key={YOUR_NASDAQ_KEY} \n\n **CPI For the UK**", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=InflationView())

    @disnake.ui.button(label="Repo Datasets", style=disnake.ButtonStyle.green, )
    async def repos( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Repo Data from the Federal Reserve", description="This data is from NASDAQ Datalink, and is automatically refreshed daily.", color=disnake.Colour.random())
        embed.add_field(name="⛓️Treasury Securities Purchased by the Federal Reserve", value='https://data.nasdaq.com/api/v3/datasets/FRED/RPTSYD.csv?&api_key={YOUR_NASDAQ_KEY} \n\n Treasury Securities Purchased by the Federal Reserve in the Temporary Open Market Operations')
        embed.add_field(name="⛓️Total Securities Purchased by the Federal Reserve", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/RPTTLD.csv?&api_key={YOUR_NASDAQ_KEY} \n\n Total Securities Purchased by the Federal Reserve in the Temporary Open Market Operations")
        embed.add_field(name="⛓️Overnight Repurchase Agreements: Mortgage Backed Securities Sold", value='https://data.nasdaq.com/api/v3/datasets/FRED/RPONMBSD.csv?&api_key={YOUR_NASDAQ_KEY} \n\n Overnight Repurchase Agreements: Mortgage Backed Securities')
        embed.add_field(name="⛓️Overnight Repurchase Agreements: Mortgage-Backed Securities Purchased ", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/RPONTSYD.csv?&api_key={YOUR_NASDAQ_KEY} \n\n Overnight Repurchase Agreements: Mortgage-Backed Securities Purchased by the Federal Reserve in the Temporary Open Market Operations")
        embed.add_field(name="⛓️Overnight Repurchase Agreements: Treasury Securities Purchased", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/RPONAGYD.csv?&api_key={YOUR_NASDAQ_KEY} \n\n Overnight Repurchase Agreements: Treasury Securities Purchased by the Federal Reserve in the Temporary Open Market Operations")
        embed.add_field(name="⛓️Overnight Repurchase Agreements: Federal Agency Securities Purchased", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/RPMBSD.csv?&api_key={YOUR_NASDAQ_KEY} \n\n Overnight Repurchase Agreements: Federal Agency Securities Purchased by the Federal Reserve in the Temporary Open Market Operations")
        embed.add_field(name="⛓️Repurchase Agreements: Mortgage-Backed Securities Purchased", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/RPAGYD.csv?&api_key={YOUR_NASDAQ_KEY}  \n\n Repurchase Agreements: Mortgage-Backed Securities Purchased by the Federal Reserve in the Temporary Open Market Operations")
        embed.add_field(name="⛓️Repurchase Agreements: Federal Agency Securities Purchased", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/RRPTTLD.csv?&api_key={YOUR_NASDAQ_KEY} \n\n Repurchase Agreements: Federal Agency Securities Purchased by the Federal Reserve in the Temporary Open Market Operations")
        embed.add_field(name="⛓️Reverse Repurchase Agreements: Total Securities Sold", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/RRPONTTLD.csv?&api_key={YOUR_NASDAQ_KEY} \n\n Reverse Repurchase Agreements: Total Securities Sold by the Federal Reserve in the Temporary Open Market Operations")
        embed.add_field(name="⛓️Treasury Securities Sold by the Federal Reserve", value= f"https://data.nasdaq.com/api/v3/datasets/FRED/RRPTSYD.csv?&api_key={YOUR_NASDAQ_KEY} \n\n Treasury Securities Sold by the Federal Reserve in the Temporary Open Market Operations")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=RepoView())

    @disnake.ui.button(label="SP500 Datasets", style=disnake.ButtonStyle.red, )
    async def sp500s( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="S&P500 Datasets", description="These Datasets refresh automatically and can be downloded by clicking the links below.", color=disnake.Colour.random())
        embed.add_field(name="SP500_DIV_YIELD_MONTH | S&P 500 Dividend Yield by Month", value=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_DIV_YIELD_MONTH.csv?&api_key={YOUR_NASDAQ_KEY} \n S&P 500 Dividend Yield by Month \n **S&P 500 dividend yield (12 month dividend per share)/price. Yields following March 2022 (including the current yield) are estimated based on 12 month dividends through March 2022, as reported by S&P. Sources: Standard & Poor's for current S&P 500 Dividend Yield. Robert Shiller and his book Irrational Exuberance for historic S&P 500 Dividend Yields.**", inline=False)
        embed.add_field(name="SP500_PE_RATIO_MONTH | Monthly P/E Ratio", value=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_PE_RATIO_MONTH.csv?&api_key={YOUR_NASDAQ_KEY} \n **Monthly P/E Ratio for the SP500. \n\n **Price to earnings ratio, based on trailing twelve month as reported earnings. Current PE is estimated from latest reported earnings and current market price. Source: Robert Shiller and his book Irrational Exuberance for historic S&P 500 PE Ratio.**", inline=False)
        embed.add_field(name="SHILLER_PE_RATIO_YEAR | Shiller PE Ratio by Year", value=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SHILLER_PE_RATIO_YEAR.csv?&api_key={YOUR_NASDAQ_KEY} \n Shiller PE ratio for the S&P 500. **Price earnings ratio is based on average inflation-adjusted earnings from the previous 10 years, known as the Cyclically Adjusted PE Ratio (CAPE Ratio), Shiller PE Ratio, or PE 10 FAQ. Data courtesy of Robert Shiller from his book, Irrational Exuberance.**", inline=False)
        embed.add_field(name="S&P 500 Price to Book Value by Quarter", value=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_PBV_RATIO_QUARTER.csv?&api_key={YOUR_NASDAQ_KEY} \n **S&P 500 price to book value ratio. Current price to book ratio is estimated based on current market price and S&P 500 book value as of December, 2021 the latest reported by S&P. Source: Standard & Poor's**", inline=False)
        embed.add_field(name="S&P 500 Real Price by Month",value=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_REAL_PRICE_MONTH.csv?&api_key={YOUR_NASDAQ_KEY} \n **S&P 500 historical prices. Prices are not inflation-adjusted. For inflation-adjusted comparison, see Inflation Adjusted S&P 500. Other than the current price, all prices are monthly average closing prices. Sources: Standard & Poor's Robert Shiller and his book Irrational Exuberance for historic S&P 500 prices, and historic CPIs.**", inline=False)
        embed.add_field(name="S&P 500 Inflation Adjusted by Month", value=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_INFLADJ_MONTH.csv?&api_key={YOUR_NASDAQ_KEY} \n **Inflation adjusted, constant April, 2022 dollars. Other than the current price, all prices are monthly average closing prices. Sources: Standard & Poor's Robert Shiller and his book Irrational Exuberance for historic S&P 500 prices, and historic CPIs.**", inline=False)
        embed.add_field(name="S&P 500 Inflation Adjusted by Year", value=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_INFLADJ_YEAR.csv?&api_key={YOUR_NASDAQ_KEY} \n **Inflation adjusted, constant April, 2022 dollars. Other than the current price, all prices are monthly average closing prices. Sources: Standard & Poor's Robert Shiller and his book Irrational Exuberance for historic S&P 500 prices, and historic CPIs.**", inline=False)
        embed.add_field(name="S&P 500 Book Value Per Share by Quarter", value=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_BVPS_QUARTER.csv?&api_key={YOUR_NASDAQ_KEY}  \n **S&P 500 book value per share non-inflation adjusted current dollars. Source: Standard & Poor's**")
        embed.add_field(name="S&P 500 Earnings Growth Rate by Quarter", value=" https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_EARNINGS_GROWTH_QUARTER.csv?&api_key={YOUR_NASDAQ_KEY} \n S&P 500 Earnings Growth Rate by Quarter \n **S&P 500 earnings growth rate per year. Annual current dollars percentage change in 12 month earnings per share, (not inflation adjusted). Source: Standard & Poor's**", inline=False)
        embed.add_field(name="S&P 500 Sales by Quarter", value=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_SALES_QUARTER.csv?&api_key={YOUR_NASDAQ_KEY} \n **Trailing twelve month S&P 500 Sales Per Share (S&P 500 Revenue Per Share) non-inflation adjusted current dollars. Source: Standard & Poor's**", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=SP500View())

    @disnake.ui.button(label="Income Expenditures", style=disnake.ButtonStyle.red, )
    async def incomeexpend( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Income Expenditures Data", description="This data automatically refreshes and can be downloaded by simply clicking the link.", color=disnake.Colour.random())
        embed.add_field(name="MEHOINUSA672N | Real Median Household Income in the United States", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/MEHOINUSA672N.csv?&api_key={YOUR_NASDAQ_KEY} \n Real Median Household Income in the United States", inline=False)
        embed.add_field(name="DSPIC96 | Real Disposable Personal Income", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/DSPIC96.csv?&api_key={YOUR_NASDAQ_KEY} \n Real Disposable Personal Income", inline=False)
        embed.add_field(name="PCE | Personal Consumption Expenditures", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/PCE.csv?&api_key={YOUR_NASDAQ_KEY} \n Personal Consumption Expenditures", inline=False)
        embed.add_field(name="PCEDG | Personal Consumption Expenditures: Durable Goods", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/PCEDG.csv?&api_key={YOUR_NASDAQ_KEY} \n Personal Consumption Expenditures: Durable Goods", inline=False)
        embed.add_field(name="PSAVERT | Personal Saving Rate", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/PSAVERT.csv?&api_key={YOUR_NASDAQ_KEY} \n  Personal Saving Rate", inline=False)
        embed.add_field(name="RRSFS | Real Retail and Food Services Sales", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/RRSFS.csv?&api_key={YOUR_NASDAQ_KEY} \n Real Retail and Food Services Sales", inline=False)
        embed.add_field(name="DSPI | Disposable personal income", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/DSPI.csv?&api_key={YOUR_NASDAQ_KEY} \n Disposable personal income", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=IncomeExpendituresView())

    @disnake.ui.button(label="Debt Datasets", style=disnake.ButtonStyle.red, )
    async def debt( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Economic Datasets - Debt", description="These datasets regard DEBT, and are updated automatically.", color=disnake.Colour.random())
        embed.add_field(name="TOTCI | Commercial and Industrial Loans, All Commercial Banks", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/TOTCI.csv?&api_key={YOUR_NASDAQ_KEY}")
        embed.add_field(name="EXCSRESNW | Excess Reserves of Depository Institutions", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/EXCSRESNW.csv?&api_key={YOUR_NASDAQ_KEY}")
        embed.add_field(name="GFDEGDQ188S | Federal Debt: Total Public Debt as percent of GDP", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/GFDEGDQ1885.csv?&api_key={YOUR_NASDAQ_KEY}", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=DebtView())


    @disnake.ui.button(label="Economic Indicators", style=disnake.ButtonStyle.blurple, )
    async def economicindicator( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Economic Indicator Datasets", description="This data is automatically refreshed and can be downloaded by clicking the links below.", color=disnake.Colour.random())
        embed.add_field(name="INDPRO | Industrial Production Index", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/INDPRO.csv?&api_key={YOUR_NASDAQ_KEY} \n Industrial Production Index", inline=False)
        embed.add_field(name="TCU | Capacity Utilization: Total Industry", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/TCU.csv?&api_key={YOUR_NASDAQ_KEY} \n Capacity Utilization: Total Industry", inline=False)
        embed.add_field(name="HOUST | Housing Starts: Total: New Privately Owned Housing Units Started", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/HOUST.csv?&api_key={YOUR_NASDAQ_KEY} \n Housing Starts: Total: New Privately Owned Housing Units Started", inline=False)
        embed.add_field(name="GPDI | Gross Private Domestic Investment", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/GDPI.csv?&api_key={YOUR_NASDAQ_KEY} \n Gross Private Domestic Investment", inline=False)
        embed.add_field(name="CP | Corporate Profits After Tax (without IVA and CCAdj)", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/CP.csv?&api_key={YOUR_NASDAQ_KEY} \n Corporate Profits After Tax (without IVA and CCAdj)", inline=False)
        embed.add_field(name="STLFSI | St. Louis Fed Financial Stress Index", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/STLFSI.csv?&api_key={YOUR_NASDAQ_KEY} \n STLFSI | St. Louis Fed Financial Stress Index", inline=False)
        embed.add_field(name="DCOILWTICO | Crude Oil Prices: West Texas Intermediate (WTI)", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/DCOILWTICO.csv?&api_key={YOUR_NASDAQ_KEY} \n Crude Oil Prices: West Texas Intermediate (WTI)", inline=False)
        embed.add_field(name="USSLIND | Leading Index for the United States", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/USSLIND.csv?&api_key={YOUR_NASDAQ_KEY} \n Leading Index for the United States", inline=False)
        embed.add_field(name="DTWEXM | Trade Weighted U.S. Dollar Index: Major Currencies", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/DTWEXM.csv?&api_key={YOUR_NASDAQ_KEY} \n Trade Weighted U.S. Dollar Index: Major Currencies", inline=False)
        embed.add_field(name="DTWEXB | Trade Weighted U.S. Dollar Index: Broad", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/DTWEXB.csv?&api_key={YOUR_NASDAQ_KEY} \n Trade Weighted U.S. Dollar Index: Broad", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=EconomicIndicatorsView())

    @disnake.ui.button(label="Money Supply Datasets", style=disnake.ButtonStyle.blurple, )
    async def moneysupply( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Money Supply Datasets", description="These datasets refresh automatically and can be downloaded by clicking the links.", color=disnake.Colour.random())
        embed.add_field(name="BASE | St. Louis Adjusted Monetary Base", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/BASE.csv?&api_key={YOUR_NASDAQ_KEY} \n St. Louis Adjusted Monetary Base", inline=False)
        embed.add_field(name="M1 | M1 Money Stock", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/M1.csv?&api_key={YOUR_NASDAQ_KEY} \n M1 Money Stock", inline=False)
        embed.add_field(name="M2 | M2 Money Stock", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/M2.csv?&api_key={YOUR_NASDAQ_KEY} \n M2 Money Stock", inline=False)
        embed.add_field(name="M1V | Velocity of M1 Money Stock", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/M1V.csv?&api_key={YOUR_NASDAQ_KEY} \n Velocity of M1 Money Stock", inline=False)
        embed.add_field(name="M2V | Velocity of M2 Money Stock", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/M2V.csv?&api_key={YOUR_NASDAQ_KEY} \n Velocity of M2 Money Stock", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=MoneySupplyView())

    @disnake.ui.button(label="Growth Datasets", style=disnake.ButtonStyle.gray, )
    async def growth( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Growth Datasets", description="This data is refreshed automatically and can be downloaded by selecting the links below.", color=disnake.Colour.random())
        embed.add_field(name="GDP | Gross Domestic Product", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/GDP.csv?&api_key={YOUR_NASDAQ_KEY} \n Gross Domestic Product", inline=False)
        embed.add_field(name="GDPC1 | Real Gross Domestic Product", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/GDPC1.csv?&api_key={YOUR_NASDAQ_KEY} \n Real Gross Domestic Product", inline=False)
        embed.add_field(name="GDPPOT | Real Potential Gross Domestic Product", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/GDPPOT.csv?&api_key={YOUR_NASDAQ_KEY} \n Real Potential Gross Domestic Product", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=GrowthView())

    @disnake.ui.button(label="Interest Rate Data", style=disnake.ButtonStyle.blurple, )
    async def interestdata( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Economic Interest Rate Data", description="This data is refreshed automatically and can be downloaded by selecting the links below.", color=disnake.Colour.random())
        embed.add_field(name="DFF | Effective Federal Funds Rate", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/DFF.csv?&api_key={YOUR_NASDAQ_KEY} \n Effective Federal Funds Rate", inline=False)
        embed.add_field(name="DTB3 | 3-Month Treasury Bill: Secondary Market Rate", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/DTB3.csv?&api_key={YOUR_NASDAQ_KEY} \n 3-Month Treasury Bill: Secondary Market Rate", inline=False)
        embed.add_field(name="DGS5 | 5-Year Treasury Constant Maturity Rate", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/DGS5.csv?&api_key={YOUR_NASDAQ_KEY} \n 5-Year Treasury Constant Maturity Rate", inline=False)
        embed.add_field(name="DGS10 | 10-Year Treasury Constant Maturity Rate", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/DGS10.csv?&api_key={YOUR_NASDAQ_KEY} \n 10-Year Treasury Constant Maturity Rate", inline=False)
        embed.add_field(name="DGS30 | 30-Year Treasury Constant Maturity Rate", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/DGS30.csv?&api_key={YOUR_NASDAQ_KEY} \n 30-Year Treasury Constant Maturity Rate", inline=False)
        embed.add_field(name="T5YIE | 5-year Breakeven Inflation Rate", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/T5YIE.csv?&api_key={YOUR_NASDAQ_KEY} \n 5-year Breakeven Inflation Rate", inline=False)
        embed.add_field(name="T10YIE | 10-year Breakeven Inflation Rate", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/T10YIE.csv?&api_key={YOUR_NASDAQ_KEY} \n 10-year Breakeven Inflation Rate", inline=False)
        embed.add_field(name="T5YIFR | 5-Year, 5-Year Forward Inflation Expectation Rate", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/T5YIFR.csv?&api_key={YOUR_NASDAQ_KEY} \n 5-Year, 5-Year Forward Inflation Expectation Rate", inline=False)
        embed.add_field(name="TEDRATE | TED Spread", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/TEDRATE.csv?&api_key={YOUR_NASDAQ_KEY} \n TED Spread", inline=False)
        embed.add_field(name="DPRIME | Bank Prime Loan Rate", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/DPRIME.csv?&api_key={YOUR_NASDAQ_KEY} \n Bank Prime Loan Rate", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=InterestRateView())

    @disnake.ui.button(label="Unemployment Datasets", style=disnake.ButtonStyle.blurple, )
    async def employment( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Unemployment Economic Data", description="These datasets update automatically and can be downloaded by simply clicking the lings below.", color=disnake.Colour.random())
        embed.add_field(name="UNRATE | Civilian Unemployment Rate", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/UNRATE.csv?&api_key={YOUR_NASDAQ_KEY} \n Civilian Unemployment Rate", inline=False)
        embed.add_field(name="NROU | Natural Rate of Unemployment (Long-Term)", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/NROU.csv?&api_key={YOUR_NASDAQ_KEY} \n Natural Rate of Unemployment (Long-Term)", inline=False)
        embed.add_field(name="NROUST | Natural Rate of Unemployment (Short-Term)", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/NROUST.csv?&api_key={YOUR_NASDAQ_KEY} \n NROUST | Natural Rate of Unemployment (Short-Term)", inline=False)
        embed.add_field(name="CIVPART | Civilian Labor Force Participation Rate", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/CIVPART.csv?&api_key={YOUR_NASDAQ_KEY} \n Civilian Labor Force Participation Rate", inline=False)
        embed.add_field(name="EMRATIO | Civilian Employment-Population Ratio", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/EMRATIO.csv?&api_key={YOUR_NASDAQ_KEY} \n Civilian Employment-Population Ratio", inline=False)
        embed.add_field(name="UNEMPLOY | Unemployed", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/UNEMPLOY.csv?&api_key={YOUR_NASDAQ_KEY} \n  Unemployed", inline=False)
        embed.add_field(name="PAYEMS | All Employees: Total nonfarm",value=f"https://data.nasdaq.com/api/v3/datasets/FRED/PAYEMS.csv?&api_key={YOUR_NASDAQ_KEY} \n All Employees: Total nonfarmm", inline=False)
        embed.add_field(name="MANEMP | All Employees: Manufacturing",value=f"https://data.nasdaq.com/api/v3/datasets/FRED/MANEMP.csv?&api_key={YOUR_NASDAQ_KEY} \n All Employees: Manufacturing", inline=False)
        embed.add_field(name="ICSA | Initial Claims",value=f"https://data.nasdaq.com/api/v3/datasets/FRED/ICSA.csv?&api_key={YOUR_NASDAQ_KEY} \n Initial Unemployment Claims", inline=False)
        embed.add_field(name="IC4WSA |4-Week Moving Average of Initial Claims", value=f"https://data.nasdaq.com/api/v3/datasets/FRED/IC4WSA.csv?&api_key={YOUR_NASDAQ_KEY} \n 4-Week Moving Average of Initial Claims", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=UnemploymentView())


    @disnake.ui.button(label="Futures Datasets", style=disnake.ButtonStyle.red, )
    async def futures( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Futures Datasets", description="These datasets are refreshed automatically and can be downloaded by clicking the links below.")
        embed.add_field(name="MWZ2022 | Minneapolis Hard Red Spring Wheat Futures, December 2022", value=f"https://data.nasdaq.com/api/v3/datasets/MGEX/MWZ2022.csv?&api_key={YOUR_NASDAQ_KEY} \n Minneapolis Hard Red Spring Wheat Futures, December 2022 \n **Hard red spring wheat is one of the highest protein wheats grown and is sought by millers because of its high quality.**")
        embed.add_field(name="MWU2022 | Minneapolis Hard Red Spring Wheat Futures, September 2022", value=f"https://data.nasdaq.com/api/v3/datasets/MGEX/MWU2022.csv?&api_key={YOUR_NASDAQ_KEY} \n Minneapolis Hard Red Spring Wheat Futures, September 2022 \n **Hard red spring wheat is one of the highest protein wheats grown and is sought by millers because of its high quality. It is found in bagels, high quality breads and cereals. Contract Unit: 5,000 bushels. Deliverable Grades: No. 2 or better Northern Spring Wheat with a protein content of 13.5% or higher, with 13% protein deliverable at a discount.**")
        embed.add_field(name="MWN2022 | Minneapolis Hard Red Spring Wheat Futures, July 2022", value=f"https://data.nasdaq.com/api/v3/datasets/MGEX/MWN2022.csv?&api_key={YOUR_NASDAQ_KEY} \n Minneapolis Hard Red Spring Wheat Futures, July 2022 \n **Hard red spring wheat is one of the highest protein wheats grown and is sought by millers because of its high quality. It is found in bagels, high quality breads and cereals. Contract Unit: 5,000 bushels. Deliverable Grades: No. 2 or better Northern Spring Wheat with a protein content of 13.5% or higher, with 13% protein deliverable at a discount.**")
        embed.add_field(name="Shanghai Stannum Futures, August 2022", value=f"https://data.nasdaq.com/api/v3/datasets/SHFE/SNQ2022.csv?&api_key={YOUR_NASDAQ_KEY} \n **Historical Shanghai Futures Prices: Stannum Futures, August 2022 (SNQ2022)\n For further contract details, please see http://www.shfe.com.cn/en/products/Tin/contract/911322443.html**", inline=False)
        embed.add_field(name="Shanghai Nickel Futures, August 2022", value=f"https://data.nasdaq.com/api/v3/datasets/SHFE/NIQ2022.csv?&api_key={YOUR_NASDAQ_KEY} \n **Historical Shanghai Futures Prices: Nickel Futures, August 2022 (NIQ2022)\n For further contract details, please see http://www.shfe.com.cn/en/products/Nickel/contract/911322439.html**", inline=False)
        embed.add_field(name="Shanghai Silver Futures, August 2022", value=f"https://data.nasdaq.com/api/v3/datasets/SHFE/AGQ2022.csv?&api_key={YOUR_NASDAQ_KEY} \n **Historical Shanghai Futures Prices: Silver Futures, August 2022 (AGQ2022) \n For further contract details, please see http://www.shfe.com.cn/docview/docview_2482542.html.**", inline=False)
        embed.add_field(name="Shanghai Lead Futures, August 2022", value=f"https://data.nasdaq.com/api/v3/datasets/SHFE/PBQ2022.csv?&api_key={YOUR_NASDAQ_KEY} \n **Historical Shanghai Futures Prices: Lead Futures, August 2022  \n For further contract details, please see http://www.shfe.com.cn/docview/docview_12227013.html**.", inline=False)
        embed.add_field(name="Shanghai Zinc Futures, August 2022", value=f"https://data.nasdaq.com/api/v3/datasets/SHFE/ZNQ2022.csv?&api_key={YOUR_NASDAQ_KEY} \n **Historical Shanghai Futures Prices: Zinc Futures, August 2022 \n For further contract details, please see http://www.shfe.com.cn/docview/docview_12227013.html**.", inline=False)
        embed.add_field(name="Shanghai Aluminium Futures, August 2022", value=f"https://data.nasdaq.com/api/v3/datasets/SHFE/ALQ2022.csv?&api_key={YOUR_NASDAQ_KEY} \n **Historical Shanghai Futures Prices: Aluminum Futures, August 2022 \n For further contract details, please see http://www.shfe.com.cn/docview/docview_12227013.html**.", inline=False)
        embed.add_field(name="Shanghai Copper Futures, August 2022", value=f"https://data.nasdaq.com/api/v3/datasets/SHFE/CUQ2022.csv?&api_key={YOUR_NASDAQ_KEY} \n **Historical Shanghai Futures Prices: Copper Futures, August 2022  \n For further contract details, please see http://www.shfe.com.cn/docview/docview_12227013.html**.", inline=False)
        embed.add_field(name="Shanghai Crude Oil Futures, August 2022", value=f"https://data.nasdaq.com/api/v3/datasets/SHFE/SCQ2022.csv?&api_key={YOUR_NASDAQ_KEY} \n **Historical Shanghai Futures Prices: Crude Oil Futures, August 2022 (SCQ2022) \n For further contract details, please see http://www.shfe.com.cn/en/products/CrudeOil/**", inline=False)
        embed.add_field(name="Shanghai Fuel Oil Futures, August 2022", value=f"https://data.nasdaq.com/api/v3/datasets/SHFE/FUQ2022.csv?&api_key={YOUR_NASDAQ_KEY} \n **For further contract details, please see http://www.shfe.com.cn/docview/docview_4113504.htm**.", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=FuturesView())

    @disnake.ui.button(label="Bitcoin Datasets", style=disnake.ButtonStyle.green, )
    async def bitcoin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Bitcoin Datasets", description="Get various datasets that are automatically updated regarding Bitcoin. Several Datasets are available.")
        embed.add_field(name="MKPRU | Bitcoin Market Price USD",value=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/MKPRU.csv?&api_key={YOUR_NASDAQ_KEY} \n Bitcoin Market Price USD")
        embed.add_field(name="DIFF | Bitcoin Difficulty", value=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/DIFF.csv?&api_key={YOUR_NASDAQ_KEY} \n **A relative measure of how difficult it is to find a new block. The difficulty is adjusted periodically as a function of how much hashing power has been deployed by the network of miners.**", inline=False)
        embed.add_field(name="MWNUS | Bitcoin My Wallet Number of Users", value=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/MWNUS.csv?&api_key={YOUR_NASDAQ_KEY} \n Bitcoin My Wallet Number of Users", inline=False)
        embed.add_field(name="NADDU | Bitcoin Number of Unique Bitcoin Addresses Used", value=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/NADDU.csv?&api_key={YOUR_NASDAQ_KEY} \n Bitcoin Number of Unique Bitcoin Addresses Used", inline=False)
        embed.add_field(name="TOTBC | The total number of bitcoins that have already been mined", value=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/TOTBC.csv?&api_key={YOUR_NASDAQ_KEY} \n The total number of bitcoins that have already been mined", inline=False)
        embed.add_field(name="MIOPM | Bitcoin Mining Operating Margin", value=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/MIOPM.csv?&api_key={YOUR_NASDAQ_KEY} \n Bitcoin Mining Operating Margin", inline=False)
        embed.add_field(name="NETDF | Bitcoin Network Deficit", value=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/NETDF.csv?&api_key={YOUR_NASDAQ_KEY} \n Bitcoin Network Deficit - **Data showing difference between transaction fees and cost of bitcoin mining.**", inline=False)
        embed.add_field(name="BCDDC | Bitcoin Days Destroyed Cumulative", value=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/TOTCI.csv?&api_key={YOUR_NASDAQ_KEY} \n Bitcoin Days Destroyed is a measure of the transaction volume of Bitcoin. If someone has 100 BTC that they received a week ago and they spend it then 700 bitcoin days have been destroyed. If they take those 100BTC and send them to several addresses and then spend them then although the total transaction volume could be arbitrarily large the number of bitcoin days destroyed is still 700.", inline=False)
        embed.add_field(name="MWNTD | Bitcoin My Wallet Number of Transaction Per Day", value=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/NADDU.csv?&api_key={YOUR_NASDAQ_KEY} \n Bitcoin My Wallet Number of Transaction Per Day", inline=False)
        embed.add_field(name="TOUTV | Bitcoin Total Output Volume", value=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/TOTBC.csv?&api_key={YOUR_NASDAQ_KEY} \n The total value of all transaction outputs per day (includes coins returned to the sender as change).", inline=False)
        embed.add_field(name="AVBLS | Bitcoin Average Block Size", value=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/AVBLS.csv?&api_key={YOUR_NASDAQ_KEY} \n Bitcoin Average Block Size", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=BitcoinView())


    @disnake.ui.button(label="SEC Datasets", style=disnake.ButtonStyle.green, )
    async def secdata( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Securities and Exchange Commission Datasets", description="These datasets are from the SEC and hold some valuable information. Click the link to be taken to the dataset / download the datasets.")
        embed.add_field(name="Mutual Fund Prospectus Risk/Return", value="https://www.sec.gov/dera/data/mutual-fund-prospectus-risk-return-summary-data-sets The Mutual Fund Prospectus Risk/Return Summary Data Sets provides text and numeric information extracted from the risk/return summary section of mutual fund prospectuses. The data is extracted from exhibits to mutual fund prospectuses tagged in eXtensible Business Reporting Language (XBRL). The information is presented without change from the as filed submissions by each registrant as of the date of the submission. The data is presented in a flattened format to help users analyze and compare corporate disclosure information over time and across registrants.\n\n"
        "The data sets will be updated quarterly. Data contained in documents filed after 5:30PM Eastern on the last business day of a quarter will be included in the subsequent quarterly posting.", inline=False)
        embed.add_field(name= "Transfer Agent Data Sets", value="https://www.sec.gov/dera/data/transfer-agent-data-sets The Transfer Agent Data Sets below provide the structured data from transfer agent registration and annual activities reporting filed with the Commission.  The data is extracted from the eXtensible Markup Language (XML) submissions to the Commission in Form TA-1, Form TA-2, and Form TA-W.  The data is presented without change from the as-filed submissions.  The data is presented in a flattened format to provide the public with readily available data about transfer agents and their activities. \n "
        "The data sets will be updated quarterly.  Data contained in documents filed after 5:30PM Eastern on the last business day of a quarter will be included in the subsequent quarterly posting.", inline=False)
        embed.add_field(name= "SEC Data - JSON", value="https://www.sec.gov/data.json", inline=False)
        embed.add_field(name= "Financial Statement Data Sets", value="https://www.sec.gov/dera/data/financial-statement-data-sets.html he Financial Statement Data Sets below provide numeric information from the face financials of all financial statements.  This data is extracted from exhibits to corporate financial reports filed with the Commission using eXtensible Business Reporting Language (XBRL).  As compared to the more extensive Financial Statement and Notes Data Sets, which provide the numeric and narrative disclosures from all financial statements and their notes, the Financial Statement Data Sets are more compact. \n"
        "The information is presented without change from the as filed financial reports submitted by each registrant. The data is presented in a flattened format to help users analyze and compare corporate disclosure information over time and across registrants. The data sets also contain additional fields including a company's Standard Industrial Classification to facilitate the data's use. \n "
        "Data sets will be updated quarterly. Data contained in documents filed after 5:30PM Eastern on the last business day of a quarter will be included in the subsequent quarterly posting.", inline=False)
        embed.add_field(name= "SEC Historical Feeds", value="https://www.sec.gov/Archives/edgar/Feed/ Returns a comprehensive collection of EDGAR Feeds dated back since 1995. ", inline=False)
        embed.add_field(name= "FULL INDEX OF SEC FILINGS AND FORMS", value="https://www.sec.gov/Archives/edgar/full-index/2022/ The FULL 2022 INDEX of SEC related documents - broken down by quarter and filing type. Amazing stuff.", inline=False)
        embed.add_field(name= "FOIA Frequently Requested Documents", value="https://www.sec.gov/foia-frequently-requested-documents Freedom of Information Act recently requested documents. THIS SECTION IS GOLD AS IF APPROVED - THIS INFO WILL BE NEVER BEFORE ACCESSED.", inline=False)
        embed.add_field(name= "FORM D - Exempt Offerings", value="https://www.sec.gov/dera/data/form-d The Form D Data Sets below provide the structured data from Notices of Exempt Offerings of Securities filed with the Commission by issuers relying on Rule 504, Rule 506(b), or Rule 506(c) of Regulation D or on Section 4(a)(5) of Securities Act. The data is extracted from the eXtensible Markup Language (XML) based fillable portion of Form D. The data is presented without change from the as-filed submissions and in a flattened format to provide the public with readily available data about these exempt offerings. \n "
        "The data sets will be updated quarterly. Data contained in documents filed after 5:30PM Eastern on the last business day of a quarter will be included in the subsequent quarterly posting.", inline=False)
        embed.add_field(name= "Regulation A - Offerings", value="https://www.sec.gov/dera/data/reg-a The Regulation A Data Sets below provide the structured data from securities offerings pursuant to Regulation A filed with the Commission. The data is extracted from the eXtensible Markup Language (XML) based fillable portion of Forms 1-A, 1-K, and 1-Z. The data is presented without change from the “as-filed submissions and in a flattened format to provide the public with readily available data about Regulation A exempt offerings. \n "
    "The data sets will be updated quarterly. Data contained in documents filed after 5:30PM Eastern on the last business day of a quarter will be included in the subsequent quarterly posting.", inline=False)
        embed.add_field(name= "SEC Total Filings by Form Number", value="https://www.sec.gov/files/dera/data/number-edgar-filings-form-type/filings_type_year_0322.csv SEC Total Filings by Form Number spreadsheet.", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=SECView())

    @disnake.ui.button(label="CFTC Data", style=disnake.ButtonStyle.blurple, )
    async def cftc( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="CFTC Datasets", color=disnake.Colour.dark_red())
        await interaction.response.edit_message(view=CFTCView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=MainView2())


class InflationView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_USA.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇺🇲 United States 🇺🇲"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_JPN.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇯🇵 Japan 🇯🇵"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_RUS.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇷🇺 Russia 🇷🇺"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_ARG.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇦🇷 Argentina 🇦🇷"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_ITA.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇮🇹 Italy 🇮🇹"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_AUS.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇦🇺 Austrailia 🇦🇺"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_NZL.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇳🇿 New Zealand 🇳🇿"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_CAN.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇨🇦 Canada 🇨🇦"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_EUR.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇪🇺 Euro Area 🇪🇺"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_DEU.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇩🇪 Germany 🇩🇪"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_FRA.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇫🇷 France 🇫🇷"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/RATEINF/CPI_UNK.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇬🇧 France 🇬🇧"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def gohome( self, interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self, interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="data menu.", color=disnake.Colour.dark_gold())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, view=dataView())




class SP500View(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SP500_DIV_YIELD_MONTH | S&P 500 Dividend Yield by Month", url=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_DIV_YIELD_MONTH.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SP500_PE_RATIO_MONTH | Monthly P/E Ratio", url=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_PE_RATIO_MONTH.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SHILLER_PE_RATIO_YEAR | Shiller PE Ratio by Year", url=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SHILLER_PE_RATIO_YEAR.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="S&P 500 Price to Book Value by Quarter", url=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_PBV_RATIO_QUARTER.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="S&P 500 Real Price by Month",url=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_REAL_PRICE_MONTH.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="S&P 500 Inflation Adjusted by Month", url=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_INFLADJ_MONTH.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="S&P 500 Inflation Adjusted by Year", url=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_INFLADJ_YEAR.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="S&P 500 Book Value Per Share by Quarter", url=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_BVPS_QUARTER.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="S&P 500 Earnings Growth Rate by Quarter", url=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_EARNINGS_GROWTH_QUARTER.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="S&P 500 Sales by Quarter", url=f"https://data.nasdaq.com/api/v3/datasets/MULTPL/SP500_SALES_QUARTER.csv?&api_key={YOUR_NASDAQ_KEY}"))







    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Data Menu", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=dataView())



class IncomeExpendituresView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="MEHOINUSA672N | Real Median Household Income in the United States", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/MEHOINUSA672N.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DSPIC96 | Real Disposable Personal Income", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/DSPIC96.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="PCE | Personal Consumption Expenditures", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/PCE.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="PCEDG | Personal Consumption Expenditures: Durable Goods", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/PCEDG.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="PSAVERT | Personal Saving Rate", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/PSAVERT.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="RRSFS | Real Retail and Food Services Sales", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/RRSFS.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DSPI | Disposable personal income", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/DSPI.csv?&api_key={YOUR_NASDAQ_KEY}"))

    @disnake.ui.button(label="🖱️ ⏬", style=disnake.ButtonStyle.blurple )
    async def dl( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=IncomeExpendituresView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Data Menu", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=dataView())


class DebtView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="TOTCI | Commercial and Industrial Loans, All Commercial Banks", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/TOTCI.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="EXCSRESNW | Excess Reserves of Depository Institutions", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/EXCSRESNW.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="GFDEGDQ188S | Federal Debt: Total Public Debt as percent of GDP", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/GFDEGDQ1885.csv?&api_key={YOUR_NASDAQ_KEY}"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Data Menu", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=dataView())


class EconomicIndicatorsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="INDPRO | Industrial Production Index", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/INDPRO.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="TCU | Capacity Utilization: Total Industry", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/TCU.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="HOUST | Housing Starts: Total: New Privately Owned Housing Units Started", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/HOUST.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="GPDI | Gross Private Domestic Investment", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/GDPI.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="CP | Corporate Profits After Tax (without IVA and CCAdj)", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/CP.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="STLFSI | St. Louis Fed Financial Stress Index", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/STLFSI.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DCOILWTICO | Crude Oil Prices: West Texas Intermediate (WTI)", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/DCOILWTICO.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="USSLIND | Leading Index for the United States", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/USSLIND.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DTWEXM | Trade Weighted U.S. Dollar Index: Major Currencies", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/DTWEXM.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DTWEXB | Trade Weighted U.S. Dollar Index: Broad", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/DTWEXB.csv?&api_key={YOUR_NASDAQ_KEY}"))

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Data Menu", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=dataView())


class MoneySupplyView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="BASE | St. Louis Adjusted Monetary Base", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/BASE.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="M1 | M1 Money Stock", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/M1.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="M2 | M2 Money Stock", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/M2.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="M1V | Velocity of M1 Money Stock", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/M1V.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="M2V | Velocity of M2 Money Stock", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/M2V.csv?&api_key={YOUR_NASDAQ_KEY}"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Data Menu", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=dataView())



class GrowthView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="GDP | Gross Domestic Product", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/GDP.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="GDPC1 | Real Gross Domestic Product", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/GDPC1.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="GDPPOT | Real Potential Gross Domestic Product", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/GDPPOT.csv?&api_key={YOUR_NASDAQ_KEY}"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Data Menu", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=dataView())



class InterestRateView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DFF | Effective Federal Funds Rate", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/DFF.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DTB3 | 3-Month Treasury Bill: Secondary Market Rate", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/DTB3.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DGS5 | 5-Year Treasury Constant Maturity Rate", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/DGS5.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DGS10 | 10-Year Treasury Constant Maturity Rate", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/DGS10.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DGS30 | 30-Year Treasury Constant Maturity Rate", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/DGS30.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="T5YIE | 5-year Breakeven Inflation Rate", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/T5YIE.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="T10YIE | 10-year Breakeven Inflation Rate", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/T10YIE.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="T5YIFR | 5-Year, 5-Year Forward Inflation Expectation Rate", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/T5YIFR.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="TEDRATE | TED Spread", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/TEDRATE.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DPRIME | Bank Prime Loan Rate", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/DPRIME.csv?&api_key={YOUR_NASDAQ_KEY}"))

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Data Menu", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=dataView())




class UnemploymentView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="UNRATE | Civilian Unemployment Rate", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/UNRATE.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NROU | Natural Rate of Unemployment (Long-Term)", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/NROU.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NROUST | Natural Rate of Unemployment (Short-Term)", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/NROUST.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="CIVPART | Civilian Labor Force Participation Rate", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/CIVPART.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="EMRATIO | Civilian Employment-Population Ratio", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/EMRATIO.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="UNEMPLOY | Unemployed", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/UNEMPLOY.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="PAYEMS | All Employees: Total nonfarm",url=f"https://data.nasdaq.com/api/v3/datasets/FRED/PAYEMS.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="MANEMP | All Employees: Manufacturing",url=f"https://data.nasdaq.com/api/v3/datasets/FRED/MANEMP.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ICSA | Initial Claims",url=f"https://data.nasdaq.com/api/v3/datasets/FRED/ICSA.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="IC4WSA |4-Week Moving Average of Initial Claims", url=f"https://data.nasdaq.com/api/v3/datasets/FRED/IC4WSA.csv?&api_key={YOUR_NASDAQ_KEY}"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Data Menu", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=dataView())



class FuturesView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="MWZ2022 | Minneapolis Hard Red Spring Wheat Futures, December 2022", url=f"https://data.nasdaq.com/api/v3/datasets/MGEX/MWZ2022.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="MWU2022 | Minneapolis Hard Red Spring Wheat Futures, September 2022", url=f"https://data.nasdaq.com/api/v3/datasets/MGEX/MWU2022.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="MWN2022 | Minneapolis Hard Red Spring Wheat Futures, July 2022", url=f"https://data.nasdaq.com/api/v3/datasets/MGEX/MWN2022.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Shanghai Stannum Futures, August 2022", url=f"https://data.nasdaq.com/api/v3/datasets/SHFE/SNQ2022.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Shanghai Silver Futures, August 2022", url=f"https://data.nasdaq.com/api/v3/datasets/SHFE/AGQ2022.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Shanghai Lead Futures, August 2022", url=f"https://data.nasdaq.com/api/v3/datasets/SHFE/PBQ2022.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Shanghai Zinc Futures, August 2022", url=f"https://data.nasdaq.com/api/v3/datasets/SHFE/ZNQ2022.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Shanghai Aluminium Futures, August 2022", url=f"https://data.nasdaq.com/api/v3/datasets/SHFE/ALQ2022.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Shanghai Copper Futures, August 2022", url=f"https://data.nasdaq.com/api/v3/datasets/SHFE/CUQ2022.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Shanghai Crude Oil Futures, August 2022", url=f"https://data.nasdaq.com/api/v3/datasets/SHFE/SCQ2022.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Shanghai Fuel Oil Futures, August 2022", url=f"https://data.nasdaq.com/api/v3/datasets/SHFE/FUQ2022.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.danger, label="CLICK HERE FOR MORE INFORMATION", url="http://www.shfe.com.cn/en/products/Tin/contract/911322443.html"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Data Menu", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=dataView())



class BitcoinView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="MKPRU | Bitcoin Market Price USD",url=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/MKPRU.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DIFF | Bitcoin Difficulty", url=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/DIFF.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="MWNUS | Bitcoin My Wallet Number of Users", url=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/MWNUS.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NADDU | Bitcoin Number of Unique Bitcoin Addresses Used", url=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/NADDU.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="TOTBC | The total number of bitcoins that have already been mined", url=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/TOTBC.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="MIOPM | Bitcoin Mining Operating Margin", url=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/MIOPM.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NETDF | Bitcoin Network Deficit", url=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/NETDF.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="BCDDC | Bitcoin Days Destroyed Cumulative", url=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/TOTCI.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="MWNTD | Bitcoin My Wallet Number of Transaction Per Day", url=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/NADDU.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="TOUTV | Bitcoin Total Output Volume", url=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/TOTBC.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="AVBLS | Bitcoin Average Block Size", url=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/AVBLS.csv?&api_key={YOUR_NASDAQ_KEY}"))

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Data Menu", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=dataView())


class SECView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Mutual Fund Prospectus Risk/Return", url="https://www.sec.gov/dera/data/mutual-fund-prospectus-risk-return-summary-data-sets"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "Transfer Agent Data Sets", url="https://www.sec.gov/dera/data/transfer-agent-data-sets"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "SEC Data - JSON", url="https://www.sec.gov/data.json"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "Financial Statement Data Sets", url="https://www.sec.gov/dera/data/financial-statement-data-sets.html"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "SEC Historical Feeds", url="https://www.sec.gov/Archives/edgar/Feed/"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "FULL INDEX OF SEC FILINGS AND FORMS", url="https://www.sec.gov/Archives/edgar/full-index/2022/"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "FOIA Frequently Requested Documents", url="https://www.sec.gov/foia-frequently-requested-documents"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "FORM D - Exempt Offerings", url="https://www.sec.gov/dera/data/form-d"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "Regulation A - Offerings", url="https://www.sec.gov/dera/data/reg-a"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "SEC Total Filings by Form Number", url="https://www.sec.gov/files/dera/data/number-edgar-filings-form-type/filings_type_year_0322.csv"))

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Data Menu", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=dataView())


class CFTCView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Services PMI Employment Index", url=f"https://data.nasdaq.com/api/v3/datasets/ISM/NONMAN_EMPL.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Services PMI New Orders Index", url=f"https://data.nasdaq.com/api/v3/datasets/ISM/NONMAN_NEWORD.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Services PMI Business Activity Index", url=f"https://data.nasdaq.com/api/v3/datasets/ISM/NONMAN_BUSACT.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Services PMI Index (Formerly Non-Manufacturing)", url=f"https://data.nasdaq.com/api/v3/datasets/MISM/NONMAN_NMI.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Manufacturing Imports Index",url=f"https://data.nasdaq.com/api/v3/datasets/ISM/MAN_IMPORTS.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Manufacturing Inventories Index", url=f"https://data.nasdaq.com/api/v3/datasets/ISM/MAN_INVENT.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Manufacturing New Export Orders Index", url=f"https://data.nasdaq.com/api/v3/datasets/ISM/MAN_EXPORTS.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Manufacturing Production Index", url=f"https://data.nasdaq.com/api/v3/datasets/ISM/MAN_PROD.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Manufacturing Backlog of Orders Index", url=f"https://data.nasdaq.com/api/v3/datasets/ISM/MAN_BACKLOG.csv?&api_key={YOUR_NASDAQ_KEY}"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Manufacturing New Orders Index", url=f"https://data.nasdaq.com/api/v3/datasets/ISM/MAN_NEWORDERS.csv?&api_key={YOUR_NASDAQ_KEY}"))


    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Data Menu", color=disnake.Colour.dark_blue())
        em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")

        await interaction.response.edit_message(embed = em, view=dataView())




class BigMacView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_USA.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇺🇸 United States of America 🇺🇸"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_CHN.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇨🇳 China 🇨🇳"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_HKG.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇭🇰 Hong Kong 🇭🇰"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_IND.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇮🇳 India 🇮🇳"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_JPN.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇯🇵 Japan 🇯🇵"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_RUS.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇷🇺 Russia 🇷🇺"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_SAU.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇸🇦 Saudi Arabia 🇸🇦"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_SIN.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇸🇬 Singapore 🇸🇬"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_KOR.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇰🇷 South Korea 🇰🇷"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_SWE.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇸🇪 Sweden 🇸🇪"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_CHE.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇨🇭 Switzerland 🇨🇭"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_ROC.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇹🇼 Taiwan 🇹🇼"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url=f"https://data.nasdaq.com/api/v3/datasets/ECONOMIST/BIGMAC_UKR.csv?&api_key={YOUR_NASDAQ_KEY}", label="🇺🇦 Ukraine 🇺🇦"))

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Data Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=dataView())




class UsefulLinksView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.finra.org/finra-data/browse-catalog/short-sale-volume-data/daily-short-sale-volume-files/", label="Finra Off Exchange Shorts"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://fintel.io/so/us/gme/", label="13Fs for Institutional Ownership"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.federalregister.gov/dodd-frank-wall-steet-reform/", label="The Federal Register"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.dtcc.com/legal/sec-rule-filings/", label="DTCC / DTC Filings"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.dtcc.com/legal/important-notices", label="DTCC Important Notices"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.sec.gov/rules/sro/occ.htm", label="Options Clearing Corporation Filings"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.fiscaldata.treasury.gov/datasets/daily-treasury-statement/operating-cash-balance", label="US Treasury Balance"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.newyorkfed.org/markets/data-hub", label="FED Reverse Repo"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.financialresearch.gov/money-market-funds/", label="Money Market Fund Data(repo)"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.cboe.com/us/equities/market_statistics/venue/", label="CBOE Market Share Graph"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.otctransparency.finra.org/otctransparency/AtsIssueData", label="FINRA OTC/ATS Data"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.esma.europa.eu/data-systematic-internaliser-calculations", label="Systematic Internaliser Data"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://www.sec.gov/data/foiadocsfailsdatahtm", label="SEC Failure to Deliver Data"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, url="https://ftp.nyxdata.com/ShortData/NYSEshvol/NYSEshvol2021/", label="NYSE Master Data Index"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Home Menu 🏡", description= "Welcome to the FUDSTOP Trading Market Application. \n\n Simply use the buttons below to Navigate.", color=disnake.Colour.dark_teal())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Tools 🛠️", description="You just went 🔙 from the **Useful Links Menu** and are now viewing the Tools 🛠️")
        embed.add_field(name="🏡", value="Main Menu", inline=True)
        embed.add_field(name="🔙", value="Previous", inline=True)
        embed.set_image(url="https://media.giphy.com/media/3umq6srnOzloPRsrgj/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=ToolsView())



import disnake
from time import sleep

class CommandExplanationsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="/flow command", style=disnake.ButtonStyle.red)
    async def commands( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/flow command", description="```py\nThe flow command helps you visualize real-time options flow by looking at Call versus Put premiums.```", color=disnake.Colour.random())
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())

    @disnake.ui.button(label="/flow sumday command", style=disnake.ButtonStyle.red)
    async def flowsum( self,button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/flow sumday command", description="```py\nThe /flow sumday is another important command. This helps you visualize options orderflow summary for a given week for a specific ticker. The command: ```py\n/flowsum <ticker```. ```py\n See the image above to learn how to read it.```", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/3fbt0FZ/FLOWSUM.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())

    @disnake.ui.button(label="/op oi command", style=disnake.ButtonStyle.red)
    async def oi( self,button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/op oi command", description="```py\nThe OI command is one of the most important. \n\n To use it - type:``` ```py\n/op oi 'ticker'``` ** OR ** ```py\n/oi 'ticker' 'date'``` ```py\n to search by expiration. \n\n Open Interest is important - and helps us identify 'SUPPORT' and 'RESISTANCE' when looking at an options chain. The open interest command uses real-time data to make this data easily accessible from Discord.```", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/v447D3P/openinterestcommand.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())

    @disnake.ui.button(label="/fib command", style=disnake.ButtonStyle.red)
    async def fib( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/fib command", description="'```py\nThe /fib command is super important - as it helps us identify where the stock is trading respective to its yearly high or low. If the target is near the 52week high - it fits put criteria. \n\n If the target is near the 52week low, it matches call criteria.``` ```py\n You can use /fib 'ticker' 'year', /fib 'ticker' 'month', /fib 'ticker' 'week', /fib 'ticker' 'quarter', /fib 'ticker' 'hour', etc.```", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/BPHbsjN/fib.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):

        await interaction.response.edit_message()

class HelpViewDropdown1(disnake.ui.Select):
    def __init__(self):


        options = [
        disnake.SelectOption(label="FUDSTOP and Discord Help Videos"),
        disnake.SelectOption(label="DISCORD HELP - Saving Messages as Threads", description="```py\nLearn how to quickly save messages as Threads to make notes, remember something, or store important information.``` https://youtu.be/neWYeYpfpxY "),
        disnake.SelectOption(label="DISCORD HELP - Utilizing Discord Search"),
        disnake.SelectOption(label="DISCORD HELP - Turning on Developer Mode"),
        disnake.SelectOption(label="DISCORD HELP - The Hashtag Navigation System"),
        disnake.SelectOption(label="DISCORD HELP - Alphaquery and Play Screeners"),
        disnake.SelectOption(label="DISCORD HELP - Optimizing Your Discord Layout"),
        disnake.SelectOption(label="DISCORD HELP - How to Query Every Ticker in the Market"),
        disnake.SelectOption(label="DISCORD HELP - Navigation and Researching"),
        disnake.SelectOption(label="DISCORD HELP - How to Read Open Interest & Volume"),
        disnake.SelectOption(label="FUDSTOP Shorts - Spy Charting"),
        disnake.SelectOption(label="FUDSTOP Shorts - Alphaquery Tutorial"),
        disnake.SelectOption(label="FUDSTOP Shorts - Desktop Notifications Example"),
        disnake.SelectOption(label="FUDSTOP Shorts - Query Every Ticker in the Market by RSI")]
        super().__init__(
            placeholder="⚙️ 🇩 🇮 🇸 🇨 🇴 🇷 🇩 ⚙️",
            min_values=1,
            max_values=1,
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.defer(with_message=True)
        if self.values[0] == "DISCORD HELP - Saving Messages as Threads":
            await interaction.edit_original_message(f"```py\n{self.values[0]}``` https://youtu.be/neWYeYpfpxY")
        elif self.values[0] == "DISCORD HELP - Utilizing Discord Search":
            await interaction.edit_original_message(f"```py\nOur discord search feature is one of the most useful tools in this entire Discord. Not only can you **search for specific information from specific users but you can also search for 'dark pool data', 'golden sweep data', 'unusual options', and any other data you can think of.``` **EXAMPLE: \n ```py\nIn the search bar - you can filter results with the following methods:``` ```py\nfrom:<user>``` ```py\nhas:<embed> / <image> / <pin> / <video> / <mentions>``` ```py\nduring: <date>``` ```py\nbetween: <date 1> <date 2>``` ```py\nin: <channel>``` ```py\nbefore: <date> / after: <date>``` https://youtu.be/3CkRmT2SMNk")
        elif self.values[0] == "DISCORD HELP - Turning on Developer Mode":
            await interaction.edit_original_message(f"```py\nIt is absolutely essential that you turn on developer mode.** This will allow for the hashtag navigation system - the next video in this series.``` https://youtu.be/b52p7V4QTaM")
        elif self.values[0] == "DISCORD HELP - The Hashtag Navigation System":
            await interaction.edit_original_message(f"```py\nTyping '#' with developer mode on unlocks the hashtag navigation system.``` https://youtu.be/scRK6rZ_HWY")
        elif self.values[0] == "DISCORD HELP - Alphaquery Screeners":
            await interaction.edit_original_message(f"```py\n```py\n /fudstop``` ```py\ncommand It's that simple!```")
        elif self.values[0] == "DISCORD HELP - Optimizing Your Discord Layout":
            await interaction.edit_original_message(f"```py\nIn discord - you can mute the channels you don't want to hear info from, and then set-up notifications for the rest. Utilize the discord setup that bets fits your personal interests!``` https://youtu.be/xvlTy_GG10Y")
        elif self.values[0] == "DISCORD HELP - How to Query Every Ticker in the Market":
            await interaction.edit_original_message(f"```py\nA tutorial on how to query all tickers with Alphaquery.``` https://youtu.be/HLG-ol7bAkA")
        elif self.values[0] == "DISCORD HELP - Navigation and Researching":
            await interaction.edit_original_message(f"https://youtu.be/sHthg4RKMRY")
        elif self.values[0] == "DISCORD HELP - How to Read Open Interest & Volume":
            await interaction.edit_original_message(f"https://youtu.be/7laLsbo3-K8")
        elif self.values[0] == "FUDSTOP Shorts - Spy Charting":
            await interaction.edit_original_message(f"```py\nLearn how to chart for SUPPORT and RESISTANCE by using 'gaps'.``` https://youtu.be/Gucc9fkphbo")
        elif self.values[0] == "FUDSTOP Shorts - Alphaquery Tutorial":
            await interaction.edit_original_message(f"https://youtu.be/J-GfKWFSWuk")
        elif self.values[0] == "FUDSTOP Shorts - Desktop Notifications Example":
            await interaction.edit_original_message(f"https://youtu.be/zPG_hoQXAto")
        elif self.values[0] == "FUDSTOP Shorts - Query Every Ticker in the Market by RSI":
            await interaction.edit_original_message(f"https://youtu.be/2_Jb42gtz7I")





class HelpView1(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="FUDSTOP and Discord Help Videos", style=disnake.ButtonStyle.green, )
    async def discordhelpers( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        HelpView1.add_item(HelpViewDropdown1())
        await interaction.response.edit_message(view=self)

    @disnake.ui.button(label="Command Explanations🤖", style=disnake.ButtonStyle.blurple, )
    async def commands( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Command Explanations🤖", description="```py\nYou are now viewing Command Explanations🤖```", color=disnake.Colour.dark_green())
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())

    @disnake.ui.button(label="Sectors In Discord🌐", style=disnake.ButtonStyle.blurple, )
    async def sectors( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Sectors In Discord🌐", description="```py\nYou are now viewing 'Sectors in Discord'```", color=disnake.Colour.dark_green())
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= SectorView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def gohome( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="🏡️ Home Menu", description="```py\nYou just went 🏡 from the 'Help Menu'```", color=disnake.Colour.dark_green())
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=HelpView())



class LearnView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(LearningMainMenuDropdown())




    @disnake.ui.button(label="US Markets", style=disnake.ButtonStyle.green)
    async def usmarketse( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="US Markets - Provided by Webull", description="```py\nLearn about the United States markets - how they behave during 🐂bull and  🐻bear markets, and much more.```", color=disnake.Colour.red())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


        await interaction.response.edit_message(embed=embed, view=USMarketsView())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.grey, )
    async def goback( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message()
        embed = disnake.Embed(title="You just went 🔙 from the Learning Menu",color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


        await interaction.response.edit_message(embed=embed, )


        await interaction.response.edit_message(view=None)

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())


        await interaction.response.edit_message(embed=em, )

class USMarketsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="Things About A Bearish Market 🐻", style=disnake.ButtonStyle.red)
    async def analysis( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title=f"Things About A Bearish Market:", description="```py\nOn 6/16/2022, The Nasdaq index plunged to '10,646', losing over 20% from its recent peak. ```py\n When a major stock index loses value at such a significant level, this is considered a sign of a 'bear market'.```"
        "```py\nThere is no way to determine when exactly a bear market will end, but, this doesn't mean you can't protect your investments. \n While it's natural to feel concerned when you see your position in red, there are a few strategies you can take advantage of to survive a bearish market.```", color=disnake.Colour.dark_red())
        em.set_image(url="https://static01.nyt.com/images/2022/06/16/business/16stocks-promo/16stocks-promo-mediumSquareAt3X.png")


        await interaction.response.edit_message(embed=em, view=BearMarketView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color = disnake.Colour.dark_green())

        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="📌 Pin It", style=disnake.ButtonStyle.red, )
    async def pin( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You Just Pinned A Message! 📌",description=f"```py\nNow you can search for it with Discord search if needed!```", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(view=None)



class BearMarketView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80)

    @disnake.ui.button(label="What Is a Bearish Market? 🐻", style=disnake.ButtonStyle.red)
    async def whatis( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="What is a Bear Market?",description=f"```py\nWhen a stock index, for example, S&P 500, DJIA, or Nasdaq, sinks over 20% from its recent high, we enter a bear market. It gets its name from how a bear attacks its prey by swiping its paws down to express the downturn trend of the stock price. It should be noted that the 20% drop is merely a hypothetical measure; as of yet, there is no official definition of a bear market.``` ```py\nIf an index loses approximately 10%, or has been declining in the short-term (around 1-3 months), this is called 'a correction' instead of a 'bear market'.```", color=disnake.Colour.dark_red())


        await interaction.response.edit_message(embed=em)

    @disnake.ui.button(label="How long will a Bear Market last? 🐻", style=disnake.ButtonStyle.grey)
    async def howlong( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="How long will a Bear Market last? 🐻",description=f"```py\nSince there is no way to tell exactly when a bear market will end, **we can look at previous market patterns to learn more about how bearish markets have behaved in the past.```"
    "```py\nDo you know how many bearish and bullish markets have US market has seen in the past 70 years? \n\n Check the picture below:```")
        em.set_image(url="https://u1sweb.webullfinance.com/social/21c8c3b24cc546b1a468bda566908da0.png")
        em.add_field(name="The Last 70 Years", value="‌```py\nIn the past 70 years, we have witnessed 12 bull markets and 11 bear markets. \n\n We can tell a bear market lasts for different periods— one can last as long as 2.8 years, as it did in 1930, or can be as short as 3 months, as in 1988.``` ```py\n A bear market usually follows a bull market. History tells us the upward return in a bull tends to be higher than the downward loss in a bear. \n\n Think collectively and prospectively.```")


        await interaction.response.edit_message(embed=em)


    @disnake.ui.button(label="A Sign of Recovery 🧑", style=disnake.ButtonStyle.green)
    async def recovery( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="A Sign of Recovery🧑",description=f"```py\nThe economy follows a cycle. \n Economy growth is closely related to inflation (interest rate).``` ```py\nWhen the interest rate is up and companies pay higher borrowing costs to expand their business, economic growth slows down.** \n\n **When the interest rate is back to normal, consumer spending and investment increase, and the economy starts to boost. \n\n See the picture below for more information:```", color=disnake.Colour.dark_red())
        em.set_image(url="https://u1sweb.webullfinance.com/social/1aad712090a84b7883e5f87b8b0ee184.png")


        await interaction.response.edit_message(embed=em)


    @disnake.ui.button(label="Possible Causes of A Bear Market?", style=disnake.ButtonStyle.blurple)
    async def causes( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        embeds =[

        disnake.Embed(title="Possible Causes of A Bear Market?",description=f"```py\nThere are too many factors to consider when we want to explain the reason for the bearish downturn. A few key points include:```"),
        disnake.Embed(title="1️⃣ Economic Slowdown:", description="```py\nFeds increased the interest rate by 0.75% points on 6/15/2022 with a strong mind to fight against high inflation. \n\n Interest rate increases and high inflation hurt stock market confidence.```"),
        disnake.Embed(title="2️⃣ Pandemic Illness:", description="```py\nCovid-19 outbreaks across the globe harm the economy by restraining consumer demand and increasing the healthcare system burden.```"),
        disnake.Embed(title="3️⃣ Geographic Wars:", description="```py\nThe Russian-Ukraine war in March caused oil prices to soar to a recent high.```"),
        disnake.Embed(title="4️⃣ Negative Sentiment: ", description="```py\nWhen investors, usually retail, see stock prices falling, they tend to worry and are more inclined to sell off their positions to stop losses. \n\n This will, in turn, push the market to fall further.```"),]
        options = [
        disnake.SelectOption(label="Home",  value=0, emoji="🏡"),
        disnake.SelectOption(label="Economic Slowdown:", value=1, emoji="1️⃣"),
        disnake.SelectOption(label="Pandemic Illness:", value=2, emoji="2️⃣"),
        disnake.SelectOption(label="Geographic Wars:", value=4, emoji="3️⃣"),
        disnake.SelectOption(label="Negative Sentiment:", value=5,emoji="4️⃣"),
            ]


    @disnake.ui.button(label="Bearish Market VS Recession", style=disnake.ButtonStyle.blurple)
    async def bearvsrecession( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Bearish Market VS Recession",description=f"```py\nWhile a bearish market is defined by a steep dip in the stock market, a recession is used to describe when the economy of a country reveals a slowdown of performance in terms of their GDP over two consecutive quarters. An economic slowdown is broader than a stock market slowdown.``` ```py\n```Not every bear market is accompanied by a recession, but typically they go hand in hand. \n Below are some possible strategies:```", color=disnake.Colour.dark_red()),
        disnake.Embed(title="1️⃣ Do Nothing", description="```py\nIf you aren't interested in taking large risks with your investments, it may be best for you to wait out the bear market. Likely, your investments may recover with the bullish market.```", color=disnake.Colour.dark_red()),
        disnake.Embed(title="2️⃣ Do Nothing", description="```py\nThis is a strategy commonly used by investors who buy certain securities at a fixed amount over consistent periods. For example, instead of buying a certain stock at $800 at one time, split the investment into 8, investing $100 each month. This can help to reduce the desire to time the mark lows.``` ```py\nThis strategy is commonly used by long-term investors.``` ```py\n \n\n By engaging this strategy, investors may need to give up higher returns in a bullish market. \n\n See the image below:```", color=disnake.Colour.dark_red()),
        disnake.Embed(title="3️⃣ Diversified Investing", description="```py\nThe golden rule of investing: don't put all your eggs into one basket. When the market isn't performing well, this is true tenfold. Diversifying your portfolio can potentially reduce loss, especially in a bearish market. With your investments spread out through various products and industries, you're less likely to feel as heavy an impact in such situations.```", color=disnake.Colour.dark_red()),
        disnake.Embed(title="4️⃣ Short", description="```py\nWhen an investor sells stocks they don't own by borrowing from security lenders, this is called short selling. Short sellers believe a stock price will fall or desire to hedge against potential downward price volatility in their securities. If a stock price drops, short sellers can buy at a lower price and turn a profit. \n\n If the price rises, they incur a loss. This loss can be unlimited.```", color=disnake.Colour.dark_red()),
        disnake.Embed(title="5️⃣ Inverse ETFs",description="```py\nFunds that use financial derivatives to reach returns opposite of a benchmark index are inverse ETFs. For example, if an index is down 5% today, the profit of its inverse ETF can be 5%.``` ```py\n If the index is up 5%, the loss will be 5%. This is usually used for short-term speculation or hedging in a vitality market. If you are holding a long position, inverse ETFs may not be the right investment for you.```", color=disnake.Colour.dark_red()),
        em.set_image(url="https://u1sweb.webullfinance.com/social/93e9d260ae9f4d4586a450995bbb913f.png"),


        await interaction.response.edit_message(embed=em, view=BearMarketView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color = disnake.Colour.dark_green())


        await interaction.response.edit_message( embed = em,)

    @disnake.ui.button(label="📌 Pin It", style=disnake.ButtonStyle.red, )
    async def pin( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You Just Pinned A Message! 📌", description=f"```py\nNow you can search for it with Discord search if needed!```", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(view=None)


class TopOptionsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self, interaction: disnake.ApplicationCommandInteraction, button: disnake.ui.Button):
        em = disnake.Embed(title="🏡 Home Menu", description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more.``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())
        em.add_field(name="Navigation Tooltip:", value="```py\nYou just went 🏡 'Home'```")

        await interaction.response.edit_message(embed=em, view=MainView2())
    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self, interaction: disnake.ApplicationCommandInteraction, button: disnake.ui.Button):
        em= disnake.Embed(title="You just went **BACK** from **Top Options Explanation**", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(embed = em, view = LearnView())

class TopOptionDropdown(disnake.ui.Select):
    def __init__(self):
        options = [
            disnake.SelectOption(
            label="The Eight Conditions of the List🌟", description="Learn About the 8 Conditions of the List",
            ),
                disnake.SelectOption(
            label="How to access and use the options list on Webull", description="Learn about this tool from the Webull App.",
            ),
        ]

        super().__init__(
            placeholder="🔎🇹 🇴 🇵  🇴 🇵 🇹 🇮 🇴 🇳 🇸🔍",
            min_values=1,
            max_values=1,
            custom_id="XX",
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
            await interaction.response.defer(with_message=True, ephemeral=True)
            if self.values[0] == "The Eight Conditions of the List🌟":
                embed = disnake.Embed(title="The Eight Conditions of the Top Options List🌟", color=disnake.Colour.random())
                embed.add_field(name="-", value="**Total Volume**")
                embed.add_field(name="-", value="**Total Position**")
                embed.add_field(name="-", value="**Volume**")
                embed.add_field(name="-", value="**Turnover**")
                embed.add_field(name="-", value="**Position**")
                embed.add_field(name="-", value="**Position Increase**")
                embed.add_field(name="-", value="**Position Decrease**")
                embed.add_field(name="-", value="**Implied Volatility**")
                embed.set_footer(text="Implemented by FUDSTOP Trading", )

                await interaction.edit_original_message(embed=embed, view=TopOptionsView())
            else:
                if self.values[0] == "How to access and use the options list on Webull":
                    embed = disnake.Embed(title="How to access and use the options list on Webull", description="```py\nPlease apply for options trading if you want to check the options list on Webull. ``` ```py\nYou need to subscribe OPRA real-time options quotes to view the top options list. The list updates every 30s.```",color=disnake.Colour.random())
                    embed.set_image(url="https://u1sweb.webullfinance.com/social/724dca743bcb47aca557a3bce6a9f6f8.gif")
                    embed.set_footer(text="Implemented by FUDSTOP Trading", )

                    await interaction.edit_original_message(embed=embed, view=TopOptionsView())




class Weballs(disnake.ui.Select):
    async def callback(self, ticker):
        pass

class Weballs2(disnake.ui.Select):
    async def callback(self, ticker):
        pass

class Weballs3(disnake.ui.Select):
    async def callback(self, ticker):
        pass


class Weballs4(disnake.ui.Select):
    async def callback(self, ticker):
        pass

class Weballs5(disnake.ui.Select):
    async def callback(self, ticker):
        pass

class Dividend(disnake.ui.Select):
    async def callback(self):
        pass

class OptionsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(OptionsDropdown())
        self.add_item(LearningDropdown())



    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="You just went **🏡 Home** from the **Options Menu**")

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="📌 Pin It", style=disnake.ButtonStyle.red, )
    async def pin( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You Just Pinned A Message! 📌 Now you can search for it with Discord search if needed!", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(view=None)



class OStratsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="🐂 Long Call 1️⃣", style=disnake.ButtonStyle.green)
    async def opts( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        embeds=[
        disnake.Embed(title="Introduction", description="You believe that the stock you have been researching is going to increase in price during a given time frame regardless of general market conditions. You are familiar with long stock positions but are wondering if there is a more efficient trade to use your available money to express this investment idea.\n\n"

"Options, a type of derivatives contract, are one possible solution for efficiently gaining exposure to stock performance. They are classified as derivatives because the value of the options contract is derived or based on the price of something else (in this case, a stock). Remember that with all choices there are risks and benefits that we need to fully understand. This allows us to make informed decisions before using products to express investment opinions. \n\n"

"Call options give the holder the right, but not obligation, to purchase a security (like a stock) at a predetermined price known as the strike price on a future date in time. Let’s explore this building block of financial choice in greater detail together. \n\n **Fun fact: Why is it called a “call? Quite simply because the purchaser of a call option has the right to “call stock away from the seller of the call option.**"),
        disnake.Embed(title="What is a Long Call?", description="First, let’s learn options contract language to understand what we are buying when we purchase, or are “long, a call option. \n\n Each standardized listed options contract has a minimum set of specifications that sets the terms of the agreement between the buyer and the seller:"),
        disnake.Embed(title="Quantity – The number of contracts you are purchasing."),
        disnake.Embed(title="Underlying", description=" – The security (stock, index, etc.) that the option’s value is derived from."),
        disnake.Embed(title="Expiration", description=" – The specific date and time an options contract expires."),
        disnake.Embed(title="Strike Price", description=" – The price at which an option can be exercised -or converted to the underlying."),
        disnake.Embed(title="Type", description=" – Call or Put"),
        disnake.Embed(title="Price", description=" – The price that the option is bought (or sold) for"),
        disnake.Embed(title="Style", description=" – American (can exercise your right on or before expiration) or European (can only exercise your right on expiration"),
        disnake.Embed(title="Settlement Style", description=" – Physical (the underlying security is delivered) or Cash"),
        disnake.Embed(title="Contract Multiplier", description=" – The number of underlying shares or units represented by one contract; for our examples we will assume a 100 multiplier, meaning each contract represents 100 shares or units of the underlying"),
        disnake.Embed(title="🐂", description="With that in mind, we can now explore what it means to purchase a call or have a long call position. A long call is the right, but not the obligation, to purchase stock at the strike price on a future date in time. \n\n"
"When you purchase long call contracts, it will cost you money to establish this position. Let’s refer to this initial cost as the premium paid. The net premium paid also includes the price of the option plus fees and commissions."),
        disnake.Embed(title="🐂", description="As a strategy, the long call is considered a “single-leg strategy because it utilizes only one options contract. As we build on our understanding, we will explore two-leg and multi-leg strategies as well."),
        disnake.Embed(title="🐂", description="Call options, by design, are capital-efficient ways to express a bullish opinion on a stock or the market; we anticipate value increasing and price rising. This is one benefit of long call options. The trade-off is that it costs money to purchase this access (right) to the unlimited upside potential of the underlying. Additionally, if your forecast is not right you can lose your investment very quickly and by expiration date. Another benefit of long call options is they limit your risk (or loss) exposure to declines in the underlying price, should the value of the stock decrease."),
        disnake.Embed(title="Example:", description=
"**Buy 10 XYZ January 50 calls for $1.25.** "

"**Assume the current XYZ stock price is $50**\n\n"
"**Quantity – 10 contracts**\n"
"**Underlying – XYZ stock**\n"
"**Expiration – January**\n"
"**Strike Price – 50**\n"
"**Type – Call**\n"
"**Price – $1.25 per contract**\n"
"**Style – American**\n"
"**Settlement Style – Physical shares**\n"
"**Contract Multiplier – 100)**\n"),
        disnake.Embed(title="🐂", description="How do we purchase the right to buy 1000 shares of XYZ stock for $50 in January?"),
        disnake.Embed(title="🐂", description="*Note: Total shares represented = quantity of options contracts x options contract multiplier = 10 x 100 = 1000)*"),
        disnake.Embed(title="🐂", description="You must first complete your transaction by paying $1,250 plus fees and commissions. This amount ($1,250) is considerably less than the $50,000 plus fees and commission that it would cost you to purchase 1000 shares of XYZ today."),
        disnake.Embed(title="🐂", description="Before we choose to complete the transaction to purchase long calls, let’s look a bit further at the decisions we face before and on the contract’s expiration date:"),]
        await interaction.response.send_message(embed=embeds[0], view=Menu(embeds))
    @disnake.ui.button(label="🤡Losng Call: Losing", style=disnake.ButtonStyle.red, )
    async def losingcall( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        embed=disnake.Embed(title="Outcome 2: Loss🤡", description="With a long call position, you have paid money (net premium) to establish an options position that gives you access to the stock’s unlimited upside profit potential. \n\n  This means that your potential losses (or downside risk exposure if the stock declines in price) are known and limited to the net premium paid.")
        embed.add_field(name="Max Loss = Net Premium Paid", value="Example: \n\n\n *Stock XYZ is trading at $50 and you purchase 10 XYZ Jan 50 calls for $1.25.*\n **At expiration, stock XYZ is trading lower at $43.**")
        embed.set_image(url="https://social-media.webullfintech.com/social/3123a4b332da4ee2b28aa162bab3544f.png")


        await interaction.response.send_message(view=OStratsView(), embed=embed)
    @disnake.ui.button(label="🚀 Long Call: Profiting", style=disnake.ButtonStyle.green, )
    async def winningcall( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        embed=disnake.Embed(title="Outcome 1: Profit🚀", description="value and rise in price. There is unlimited profit potential. Let’s now assume we are correct in our sentiment and the stock price rises.\n\n"

"**To calculate our profit on the position when we purchased our contracts without borrowing funds, we use the following formula:**")
        embed.add_field(name="Profit = Current Stock Price – Strike Price – Net Premium Paid",value="**Example:** \n\n\n *Stock XYZ is trading at $50 and you purchase 10 XYZ Jan 50 calls for $1.25.\n"

"A week later, stock XYZ is trading higher at $58.*.")
        embed.add_field(name="Note:", value="‌*Unrealized profits are those that potentially exist; realized profits occur when you close out or trade out of the position.\n\n"

"**Our maximum profit is unlimited. Remember, the price of XYZ can keep increasing in value.**")
        embed.set_image(url="https://social-media.webullfintech.com/social/6c6923e19b9144308cb66886a6729766.png")


        await interaction.response.send_message(view=OStratsView(), embed=embed)


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="You just went **🏡 Home** from the **Options Menu**")

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙 Go Back", style=disnake.ButtonStyle.blurple, )
    async def pin( self, button: disnake.ui.Button, interaction: disnake.ApplicationCommandInteraction ):
        em= disnake.Embed(title="You just went **BACK** from **Bear Market Menu**", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(view=LearnView())
class OptionsDropdown(disnake.ui.Select):
    def __init__(self):
        options = [
            disnake.SelectOption(
            label="Options Strategies♟️", description="♟️ Learn about different Options Strategies",
            ),
                disnake.SelectOption(
            label="Options Greeks🏹", description="🏹 Learn about the Greeks - Delta, Theta, Rho, Vega, and Gamma.",
            ),
                disnake.SelectOption(
            label="Options Education 🧠", description="Get edjumicated on Options!",
            ),
                disnake.SelectOption(
            label="🌟Top Options List🌟", description="Learn about the top Options List in Webull!",
            ),
        ]

        super().__init__(
            placeholder="👇 🇴 🅿 🇹 🇮 🇴 🇳 🇸 👇",
            min_values=1,
            max_values=1,
            custom_id="feeds92",
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.defer(with_message=True, ephemeral=True)
        if self.values[0] == "Options Strategies♟️":
            embed = disnake.Embed(title="Options Strategies♟️", description=f"```py\nThis menu provides educational content around different Options Strategies you can utilize in the market. Information is provided by Webull```", color=disnake.Colour.dark_blue())


            await interaction.edit_original_message(view=OStratsView())
        elif self.values[0] == "Options Greeks🏹":
            embed = disnake.Embed(title="What are Option Greeks and How Do I use them?", description="```py\nThose new to stock investing and options trading might wonder about what more savvy financial market operators usually refer to as **“The Greeks** and why these computed numbers might matter to them. \n\n For options traders, these Greeks refer to a set of risk management parameters commonly used to assess the risk of either a particular option position or a portfolio of option positions collectively.``` ```py\n These stock option Greeks are mainly computed as the sensitivity of an option position or portfolio given an incremental change in stock price, time, interest rates, or implied volatility. \n\n Greeks can be examined on an individual option or in a “portfolio additive manner. \n\n This means that the Greeks of individual option positions can be summed up and weighted by the individual option position size to compute the overall sensitivities of an entire portfolio of options.``` ```py\nYou can learn about each of the option Greeks in greater detail and will explain how traders, investors and/or option portfolio managers might use each of the Greeks to their benefit by clicking a button below.```", color=disnake.Colour.random())
            embed.add_field(name="Option Greeks", value="```py\nThe option Greeks consist of a set of first and second-order derivatives that relate to the option pricing model used in a particular market.``` ```py\nFor stock options, the five Greeks are named delta, gamma, rho, theta and vega.```")
            embed.add_field(name="The Options Table", value="```py\nThe derivatives shown in the table above are expressed using the following variables: \n\n V= the option value \n\n S = the underlying asset’s price \n\n r = the risk-free interest rate \n\n t*= time\n\n 𝜎 = the option’s implied volatility```")
            embed.set_image(url="https://i.ibb.co/7KR3RYS/greeks.png")

            await interaction.edit_original_message(embed=embed, view=GreeksView())
        elif self.values[0] == "Options Education 🧠":
            embed = disnake.Embed(title="Options Education 🧠", description="```py\nThose new to stock investing and options trading might wonder about what more savvy financial market operators usually refer to as The Greeks and why these computed numbers might matter to them.``` ```py\nFor options traders, these Greeks refer to **a set of risk management parameters commonly used to assess the risk of either a particular option position or a portfolio of option positions collectively.** \n\n These stock option Greeks are mainly computed as **the sensitivity of an option position or portfolio given an incremental change in stock price, time, interest rates, or implied volatility.``` ```py\n Greeks can be examined on an individual option or in a “portfolio additive manner. \n\n This means that the Greeks of individual option positions can be summed up and weighted by the individual option position size to compute the overall sensitivities of an entire portfolio of options. \n\n You can learn about each of the option Greeks in greater detail and will explain how traders, investors and/or option portfolio managers might use each of the Greeks to their benefit by clicking a button below.```", color=disnake.Colour.random())

            await interaction.edit_original_message(embed=embed, view=OptionsEducationView())
        elif self.values[0] == "🌟Top Options List🌟":
            embed = disnake.Embed(title="What is the top options list?", description="```py\nThe Top Option list is a ranking of options contracts based on different filtered conditions. The list can help the investor identify and filter options contracts out of the thousands offered and can also be used to monitor the changes of options market.```", color=disnake.Colour.random())
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.edit_original_message(embed=embed, view=TopOptionsView())
class WeballsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(Weballs3())
        self.add_item(Weballs2())
        self.add_item(TechDropdown())

class LevelOneView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="What is a stock❓ ", style = disnake.ButtonStyle.grey)
    async def whatisstock(self, button, inter: disnake.AppCmdInter):
        em = disnake.Embed(title="Definition of a stock:", description="Simply put, **stock represents ownership of a company, which entitles the stockholders to a part of the companys assets and earnings.** \n\n"

"The stock market plays a major role in the financial world. Corporations can raise funds by issuing equity shares to expand business or support operations. When the company gets listed with an initial public offering (IPO), its shares can be traded on exchanges among investors."

"More specifically, equity securities comprise common stocks and preferred stocks. \n\n All the shares available on Webull are common stocks; so, **whats the difference between the two?**"

"\n Common shareholders have voting rights and receive dividends at the companys discretion. \n **However, even if the company is profiting during the current year, it is not mandatory to declare a dividend distribution.**"

"Preferred shareholders receive fixed dividends and are entitled to a preferential dividend distribution before common shareholders. \n ** Unlike common shareholders, they usually do not have voting rights but do have a superior claim on company assets.** \n\n If liquidation occurs, preferred shareholders have a higher payment priority than common shareholders behind the companys creditors.", colour=disnake.Colour.dark_gold())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await inter.response.edit_message(embed = em, view=LevelOneView())

    @disnake.ui.button(label="Reasons for Investing 🖼️", style = disnake.ButtonStyle.blurple)
    async def reasons(self, button, inter: disnake.AppCmdInter):
        em = disnake.Embed(title="Reasons for Investing in Stocks", description="People hold or trade stocks for different reasons, as they are the most commonly used investment tool. These can include but are not limited to:\n"

"**Harvesting the capital gains as price appreciating.**"
"\n\n**Receiving the dividend distribution from the company's earnings as income.**\n"
"\n**Exercising the voting right to influence the company as an owner.**", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        em.set_image(url="https://u1sweb.webullfinance.com/social/9be8bc007a034ebc999b5d166409f9d4.png")
        await inter.response.edit_message(embed = em, view=LevelOneView())

    @disnake.ui.button(label="❌ Risks of Stocks", style = disnake.ButtonStyle.red)
    async def risks(self, button, inter: disnake.AppCmdInter):
        em = disnake.Embed(title="❌Risks of Stocks", description="There is no guarantee that you will make a profit when investing in stocks. Prices are always fluctuating, which creates risk that can cause investors to lose money.", color=disnake.Colour.dark_red())
        em.add_field(name="❌Systematic Risk", value="Systematic risk, also known as **market risk or non-diversifiable**, refers to the risk affecting the entire market. Systematic risk factors include **inflation, interest rates, business cycles, natural disasters, and political turbulence.** \n\n These factors affect the entire financial market and cannot be avoided through diversification.")
        em.add_field(name="❌Nonsystematic Risk", value="Nonsystematic risk is the risk that affects a specific sector or company.\n **It is also known as industry-specific, company-specific, or diversifiable risk.**"
        "\n For example, a drug trial failure might drop the developer's stock price but not influence others, such as retailers.")
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await inter.response.edit_message(embed = em, view=LevelOneView())

    @disnake.ui.button(label="🇳  🇪  🇽   🇹  ➡️", style = disnake.ButtonStyle.blurple)
    async def next(self, inter: disnake.AppCmdInter):
        em = disnake.Embed(title="🇳  🇪  🇽   🇹  ➡️", color=disnake.Colour.dark_orange())
        em = disnake.Embed(title="Welcome to the Market Course - Provided by Webull and Implemented by FUDSTOP.", description="🖱️ the buttons to view the content. 🖼️ Represent pictures you can view.", colour=disnake.Colour.dark_gold())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await inter.response.edit_message(embed=em, view=LevelTwoInitiateView())

    @disnake.ui.button(label="📌 🇵  🇮  🇳", style = disnake.ButtonStyle.red)
    async def pin(self, inter: disnake.AppCmdInter):
        await inter.response.edit_message(view=None)



class LevelTwoInitiateView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="Exchanges", style = disnake.ButtonStyle.grey)
    async def whatisstock(self, inter: disnake.AppCmdInter):
        em = disnake.Embed(title="Welcome to the Market Course - Provided by Webull and Implemented by FUDSTOP.", description="🖱️ the buttons to view the content. 🖼️ Represent pictures you can view.", colour=disnake.Colour.dark_gold())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await inter.response.edit_message(embed=em,view=LevelTwoView())

    @disnake.ui.button(label="📌 🇵  🇮  🇳", style = disnake.ButtonStyle.red)
    async def pin(self, inter: disnake.AppCmdInter):
        await inter.response.edit_message(view=None)

    @disnake.ui.button(label="🇳  🇪  🇽   🇹  ➡️", style = disnake.ButtonStyle.blurple)
    async def risks(self, inter: disnake.AppCmdInter):
        await inter.response.edit_message( view=LevelTwoView())
class LevelTwoView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="What is an Exchange ❓", style = disnake.ButtonStyle.grey)
    async def exchange(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title="Exchange:", description="An exchange is a marketplace where securities, commodities, derivatives and other financial instruments are traded. The core function of an exchange is to ensure fair and orderly trading and the efficient dissemination of price information for any securities trading on that exchange. Exchanges give companies, governments, and other groups a platform from which to sell securities to the investing public."

"\n\n**The most prominent exchanges in U.S. stock market include the New York Stock Exchange (NYSE) and the Nasdaq (NAS).** \nThere are 13 exchanges in the US in total.", colour=disnake.Colour.dark_gold())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await inter.response.edit_message(embed = em, view=LevelTwoView())


    @disnake.ui.button(label="🇳  🇦  🇸  🇩  🇦  🇶", style = disnake.ButtonStyle.red)
    async def ndaq(self, inter: disnake.AppCmdInter):
        em = disnake.Embed(title="🇳  🇦  🇸  🇩  🇦  🇶", description="Nasdaq was created by the National Association of Securities Dealers (NASD) to enable investors to trade securities on a computerized, speedy and transparent system, and commenced operations on 1971. It is considered as the largest global electronic marketplace for trading securities, **the second largest stock exchange in U.S. market, as well as the benchmark index for U.S. technology stocks.**", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await inter.response.edit_message(embed = em, view=LevelTwoView())


    @disnake.ui.button(label="🇳  🇾  🇸  🇪", style = disnake.ButtonStyle.red)
    async def nyse(self, inter: disnake.AppCmdInter):
        em = disnake.Embed(title="🇳  🇾  🇸  🇪", description="The New York Stock Exchange (NYSE) is a stock exchange located in New York City that is considered the largest equities-based exchange in the world, based on the total market capitalization of its listed securities.", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await inter.response.edit_message(embed = em, view=LevelTwoView())

    @disnake.ui.button(label="🖼️", style = disnake.ButtonStyle.red)
    async def expic(self, inter: disnake.AppCmdInter):
        em = disnake.Embed(title="🖼️", description="If you would like to know the marketplace where a stock is listed, please check the stock details page in the Webull APP as follows:", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        em.set_image(url="https://social-media.webullfintech.com/social/ed6403d9a22f40c794308e31a08f2674.jpg")
        await inter.response.edit_message(embed = em, view=LevelTwoView())


class TrendDropdown(disnake.ui.Select):
    def __init__(self):

        options = [

            disnake.SelectOption( label=f"📈 The Uptrend 📉"),
            disnake.SelectOption( label=f"📈 The Downtrend 📉"),
            disnake.SelectOption( label=f"📈 Consolidation 📉"),
            disnake.SelectOption( label=f"📈 Support 📉"),
            disnake.SelectOption( label=f"📈 Resistance 📉"),]
        super().__init__(
        placeholder=f"📈 🇹 🇷 🇪 🇳 🇩 🇱 🇮 🇳 🇪 🇸 📉",
        min_values=1,
        max_values=1,
        custom_id=f"📈 🇹 🇷 🇪 🇳 🇩 🇱 🇮 🇳 🇪 🇸 📉",
        options= options)
    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "📈 The Uptrend 📉":
            em = disnake.Embed(title="Three directions of trends - The Uptrend", description=f"```py\nAn asset is in an uptrend when price moves up to higher highs and higher lows. This occurs when demand exceeds supply. Buyers are willing to pay higher prices for the asset over time.```", color=disnake.Colour.dark_green())
            em.set_image(url="https://u1sweb.webullfinance.com/social/c607b8a6e46d4f7cacf32b9802c85930.png")
            await inter.response.edit_message(embed=em, view=TrendDropdownView())
        else:
            if self.values[0] == "📈 The Downtrend 📉":
                em = disnake.Embed(title="📈 The Downtrend 📉",description=f"```py\nAn asset is in a downtrend when price drops to lower highs and lower lows. This occurs when supply exceeds demand. Sellers are accepting lower prices to exit long positions over time.```", color=disnake.Colour.dark_red())
                em.set_image(url="https://u1sweb.webullfinance.com/social/975e9aeeaea94c1080bdc0310119a73d.png")
                await inter.response.edit_message(view=TrendDropdownView(),embed=em )
            else:
                if self.values[0] == "📈 Consolidation 📉":
                    em = disnake.Embed(title="📈 Consolidation 📉",description=f"```py\nWhen an asset is not trending, it is considered to be in a consolidation. This is when its prices move sideways.```", color=disnake.Colour.dark_gold())
                    em.set_image(url="https://u1sweb.webullfinance.com/social/b37f976d03dc4c749acd953ca2f8e77e.png")
                    await inter.response.edit_message(view=TrendDropdownView(),embed=em)
                else:
                    if self.values[0] == "📈 Support 📉":
                        em = disnake.Embed(title="📈 Support 📉",color=disnake.Colour.dark_green())
                        em.set_image(url="https://u1sweb.webullfinance.com/social/470d03fe5e7741c7a1acd7d4ae9da5c5.png")
                        await inter.response.edit_message(view=TrendDropdownView(),embed=em, )
                    else:
                        if self.values[0] == "📈 Resistance 📉":
                            em = disnake.Embed(title="📈 Resistance 📉",color=disnake.Colour.dark_red())
                            em.set_image(url="https://u1sweb.webullfinance.com/social/190f78232ebb49e3869add5df0539601.png")
                            await inter.response.edit_message(view=TrendDropdownView(),embed=em)
class CandleDropdown(disnake.ui.Select):
    def __init__(self):

        options = [

            disnake.SelectOption( label=f"🕯️ Doji Candlestick 🕯️"),
            disnake.SelectOption( label=f"🕯️ The Hammer 🕯️"),
            disnake.SelectOption( label=f"🕯️ Upside Down Hammer 🕯️"),
            disnake.SelectOption( label=f"🕯️ Double Candlestick Pattern 🕯️"),
            disnake.SelectOption( label=f"🕯️ Screen Stocks with a Specific Candlestick Pattern 🕯️"),]
        super().__init__(
        placeholder=f"🕯️ 🇨 🇦 🇳 🇩 🇱 🇪 🇸 🕯️",
        min_values=1,
        max_values=1,
        custom_id=f"🕯️ 🇨 🇦 🇳 🇩 🇱 🇪 🇸 🕯️",
        options= options)
    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "🕯️ Doji Candlestick 🕯️":
            em = disnake.Embed(title="🕯️ Doji Candlestick 🕯️", description=
"```py\nThe Doji is formed when the price closes at a price where it opened. The Doji has no candle body. This pattern means the buyers and sellers in the market are roughly balanced during the period. When this pattern appears, its likely that the previous trend will end.```"

"```py\nA commonly used pattern is the gravestone Doji, also called Gravestone. Because its opening and closing price equal the lowest price of the period, it has no candle body and no lower wick.```"

"```py\nIt indicates a possible trend reversal and is often used as a short-term signal. Depending on the previous trend, gravestone Doji are divided into bullish gravestone and bearish gravestone.```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/90ec130f41294728aa451cb593a85213.gif")
            await inter.response.edit_message(embed=em, view=CandleDropdownView())
        else:
            if self.values[0] == "🕯️ The Hammer 🕯️":
                em = disnake.Embed(title="The Hammer", description=f"```py\nHammers have a long upper or lower wick and a small candle body on the opposite side. Like the Doji, a hammer candlestick pattern indicates that a price reversal might be on its way.```"

    "```py\nThere are two types of hammers:```"

    "```py\nThe first is a regular hammer. It has a long lower candlewick and a small body in the upper part of the candle. When it appears in a downtrend, it’s called a ‘Hammer’. It implies that an uptrend might be on the way. When it appears in an uptrend, it’s called a ‘Hanging Man’, implying that the price might change to the downside.```", color=disnake.Colour.dark_blue())
                em.set_image(url="https://u1sweb.webullfinance.com/social/eb092f7a78844f8dbce1b14289c6421f.gif")
                await inter.response.edit_message(embed=em, view=CandleDropdownView())
            else:
                if self.values[0] == "🕯️ Upside Down Hammer 🕯️":
                    em = disnake.Embed(title="🕯️ Upside Down Hammer 🕯️", description=f"```py\nThe second type is an upside down hammer. It has a long upper candlewick and a small body in the lower part of the candle. When it appears in a downtrend, it’s called an ‘Inverted Hammer’. It implies that an uptrend might be on the way. When it appears in an uptrend, it’s called a ‘Shooting Star’, implying a possible price decline.```", color=disnake.Colour.dark_blue())
                    em.set_image(url="https://u1sweb.webullfinance.com/social/b414e6ad5b6745559a54b0cf3ea3bd02.gif")
                    await inter.response.edit_message(embed=em, view=CandleDropdownView())
                else:
                    if self.values[0] == "🕯️ Double Candlestick Pattern 🕯️":
                        em = disnake.Embed(title="Engulfing Candlestick Patterns", description=f"```py\nAn engulfing candlestick pattern consists of a random candle and a bigger candle that fully “engulfs” it.```"

"```py\nA bullish engulfing pattern appears at the end of a downtrend. It is comprised of a small bearish candle and a bigger bullish candle that encompasses it. It indicates that an uptrend might follow.```"

"```py\nA bearish engulfing pattern appears at the end of an uptrend. It is comprised of a small bullish candle and a bigger bearish candle that encompasses it. It indicates that a downtrend might follow.```", color=disnake.Colour.dark_blue())
                        em.set_image(url="https://u1sweb.webullfinance.com/social/81aa50ced3214a3f92e5a1df7f8a1d63.gif")
                        await inter.response.edit_message(embed=em, view=CandleDropdownView())
                    else:
                        if self.values[0] == "🕯️ Screen Stocks with a Specific Candlestick Pattern 🕯️":
                            em = disnake.Embed(title="🕯️ Screen Stocks with a Specific Candlestick Pattern 🕯️", description=f"```py\nYou can use our screener to find stocks with a specific candlestick pattern, as shown below.```"

"You can also add technical indicators into the screener so that the trading signals are more reliable.```", color=disnake.Colour.random())
                            em.set_image(url="https://u1sweb.webullfinance.com/social/2b3c325c1bed450ea2d62c7f0f990884.gif")
                            await inter.response.edit_message(embed=em, view=CandleDropdownView())
class WebullTutView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(WebullTut())

class WebullTut(disnake.ui.Select):
    def __init__(self):
        options = [
            disnake.SelectOption( label=f"🌟🌟How to get Opra Real Time Data?"),
            disnake.SelectOption( label=f"🌟🌟Suck at options? PAPER TRADE DAMMIT!!"),
            disnake.SelectOption( label=f"🌟How to Customize the Options Chain?"),
            disnake.SelectOption( label=f"🌟How to use the Options Screener?"),
            disnake.SelectOption( label=f"🌟How to use the Options Calculator?"),
            disnake.SelectOption( label=f"🌟How do you use and Access the Options Alert?"),
            disnake.SelectOption( label=f"How to Find Companies with Corporate Actions?"),
            disnake.SelectOption( label=f"How to Check If a Specific Stock is Marginable?"),
            disnake.SelectOption( label=f"How to Set a TPSL Order?"),
            ]
        super().__init__(
            placeholder=f"🐂 🇼 🇪 🇧 🇺 🇱 🇱 🐂",
            min_values=1,
            max_values=1,
            custom_id=f"YEET",
            options= options)
    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "How to Find Companies with Corporate Actions?":
            em = disnake.Embed(title="Corporate Actions", description=f"```py\nThis GIF will help you locate this menu on the Webull APP.```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/abf2f175ba554a4ca71e4f4056c1bd78.gif")
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "How to Check If a Specific Stock is Marginable?":
            em = disnake.Embed(title="Check for Marginability", description=f"```py\n This GIF helps explain how to check if a stock is marginable or not.```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/5bb75b13231f46d9a83e4bcdf6e7a2e6.gif")
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "🌟🌟Suck at options? PAPER TRADE DAMMIT!!":
            em = disnake.Embed(title="Check for Marginability", description=f"```py\n This GIF shows you the practice EVERYONE SHOULD BE DOING. - PAPER F*C*ING TRADING!!```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/4efce45639484c37b8f73e966e9ff16e.gif")
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "How to Set a TPSL Order?":
            em = disnake.Embed(title="Set a Take Profit / Stop Loss Order", description=f"```py\n TPSL is an order type used to exit an existing position.```"

"```py\nA take-profit order will automatically close your positions once the target price is reached to lock in profits.```"
"py\n```Similarly, a stop-loss order will be triggered when the target price is reached to stop losses.```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/9d4d3538eac348e5ab94bfb4069331f2.png")
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "🌟How to Customize the Options Chain?":
            em = disnake.Embed(title="Customize the Options Chain", description=f"```py\n This GIF explains how to customize your options chain on the Webull APP.```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/621afcca067a4908b76dded3e0a4091b.gif")
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "🌟How to use the Options Screener?":
            em = disnake.Embed(title="The Webull Options Screener", description=f"```py\n This GIF explains how to find and use the Options Screener!```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/1ec02a22a67f4c2f9ee41d5dd164b563.gif")
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "🌟How do you use and Access the Options Alert?":
            em = disnake.Embed(title="Use and Access the Options Alert", description=f"```py\n'Stock Details page'>'Options'>'Option Contract Page'>'Alerts'.\n\nNote: Don’t forget to save your alert.```",color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/c70aabae1e9949d6951009c89a343389.gif")
            sleep(10)
            em.clear_fields()
            em.add_field(name="Check Existing Alerts", value="```py\nEntry: 'Menu'>'My Alert'>'Options'> 'Options Alert'```")
            em.set_image(url="https://u1sweb.webullfinance.com/social/69a8cfa5708943968c7f8cd9290a5bd9.gif")
            await inter.response.edit_message(embed=em, view=TechView())
        elif self.values[0] == "🌟How to use the Options Calculator?":
            em = disnake.Embed(title="The Options Calculator", description=f"```py\nThe Options Calculator is a real-time, easy-to-use tool that helps investors calculate a contract’s theoretical value, price change, and changes in Greeks under selected parameters. To use the options calculator, you just need to select the calculation date, underlying price, implied volatility, and risk-free rate. The theoretical value and price changes will be calculated automatically based on selected parameters.```"
            "```py\nPlease note: We only support the calculation of single options. The calculated result is theoretical and for reference only. The theoretical price uses basic assumptions from the Black-Scholes Model, which may differ from the actual market price.```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/4d9b73b28478425e91497fcc09781d51.gif")
            await inter.response.edit_message(embed=em, view=TechView())
            sleep(10)
            em.clear_fields()
            em.add_field(name="🌟Access the Options Calculator", value="```py\nEntry: 'Options'>'Options Contract'>'Calculator'```")
            em.set_image(url="https://u1sweb.webullfinance.com/social/4d9b73b28478425e91497fcc09781d51.gif")
            await inter.edit_original_message(embed=em, view=TechView())
            sleep(5)
            em.clear_fields()
            sleep(2)
            em.set_image(url="https://u1sweb.webullfinance.com/social/5527a37d0faa4d26b4d01414a2dc18c7.gif")
            em.add_field(name="🌟‌Use the Options Calculator", value="```py\n1. Press and drag the blue lines to modify the calculation date with ease. You can manually adjust the date on the date column and modify other parameters such as the underlying price to view the theoretical value and price change.```", inline=False)
            await inter.edit_original_message(embed=em, view=TechView())
            sleep(2)
            em.add_field(name="Note:", value="```py\nThe current price change = (Theoretical value-the current price)/ Theoretical value```", inline=False)
            await inter.edit_original_message(embed=em, view=TechView())
            sleep(4)
            em.clear_fields()
            em.set_image(url="https://u1sweb.webullfinance.com/social/a8a2055b907a47e78dbd5226e6b6347c.gif")
            em.add_field(name="🌟Use the Options Calculator", value="```py\n2. You can select the different Greeks values to view the line changes.```")
            
            await inter.edit_original_message(embed=em, view=TechView())
        elif self.values[0] == "🌟🌟How to get Opra Real Time Data?":
            em = disnake.Embed(title="Get OPRA Real Time Quotes", description=f"```py\nTHIS IS ABSOLUTELY ESSENTIAL!. Without it - you trade 15 minutes delayed. No bueno. Get the real time for mobile. It's free.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://u1sweb.webullfinance.com/social/f0ebf3a781e74df4b6d1a0eb855d5b01.gif")
            await inter.response.edit_message(embed=em, view=TechView())
class CandleDropdownView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(CandleDropdown())
        self.add_item(TechDropdown())
        self.add_item(TrendDropdown())






class TrendDropdownView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(TrendDropdown())
        self.add_item(CandleDropdown())
        self.add_item(TechDropdown())
        self.add_item(WebullTut())

class TechDropdown2(disnake.ui.Select):
    def __init__(ctx):

        options = [
            disnake.SelectOption( label=f"Momentum"),
            disnake.SelectOption( label=f"Bear Flag"),
            disnake.SelectOption( label=f"Bull Flag"),
            disnake.SelectOption( label=f"Williams %R"),
            disnake.SelectOption( label=f"Exhaustion Bar (Bullish)"),
            disnake.SelectOption( label=f"Exhaustion Bar (Bearish)"),
            disnake.SelectOption( label=f"Hanging Man"),
            disnake.SelectOption( label=f"Commodity Channel Index (CCI)"),
            disnake.SelectOption( label=f"Short-term KST"),
            disnake.SelectOption( label=f"Long-term KST"),
            disnake.SelectOption( label=f"Medium-term KST"),
            disnake.SelectOption( label=f"Megaphone Top"),
            disnake.SelectOption( label=f"Megaphone Bottom"),
            disnake.SelectOption( label=f"Symmetrical Continuation Triangle (Bearish)"),
            disnake.SelectOption( label=f"Symmetrical Continuation Triangle (Bullish)"),
            disnake.SelectOption( label=f"Downside Breakout"),
            disnake.SelectOption( label=f"Upside Breakout"),
            disnake.SelectOption( label=f"Engulfing Line (Bearish)"),
            disnake.SelectOption( label=f"Engulfing Line (Bullish)"),
            disnake.SelectOption( label=f"Continuation Diamond (Bullish)"),
            disnake.SelectOption( label=f"Continuation Diamond (Bearish)"),
            disnake.SelectOption( label=f"Diamond Bottom"),
            disnake.SelectOption( label=f"Diamond Top"),

            ]
        super().__init__(
        placeholder=f"📉 🇲 🇴 🇷 🇪 🇵  🇦  🇹  🇹  🇪  🇷 🇳 🇸 📈",
        min_values=1,
        max_values=1,
        custom_id=f"2🇵  🇦  🇹  🇹  🇪  🇷 🇳 🇸",
        options= options)
    async def callback(self, inter: disnake.MessageInteraction):
        await inter.response.defer(with_message=True)
        if self.values[0] == "Williams %R":
            em = disnake.Embed(title=f"{self.values[0]}", color=disnake.Colour.dark_gold())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/b78955a5feb64278ae5e8e72acb9a430.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Short-term KST":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nA bullish signal is generated when the KST, 'Know Sure Thing', rises above its moving average. When the KST falls below its moving average, the Technical Event® is a bearish signal.```"
                                                                        "```py\nSupported 'Short-term KST' events are suitable for investors interested in a time frame of 2-6 weeks.``` ```py\n'Intermediate-term KST' events are suitable for those interested in 6-39 week trends.``` ```py\nSupported 'Long-term KST' events are suitable for a 9-month to 2-year time frame.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/83118d03c2cd4d0caefe960b7fa7b69b.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Long-term KST":
            em = disnake.Embed(title=f"{self.values[0]}",description=f"```py\nImplication:\n\nA bullish signal is generated when the KST, 'Know Sure Thing', rises above its moving average. When the KST falls below its moving average, the Technical Event® is a bearish signal.```"
                                                                        "```py\nSupported 'Short-term KST' events are suitable for investors interested in a time frame of 2-6 weeks.``` ```py\n'Intermediate-term KST' events are suitable for those interested in 6-39 week trends. ```py\n Supported 'Long-term KST' events are suitable for a 9-month to 2-year time frame.", color=disnake.Colour.dark_gold())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/19de6f789c8e48e6be886b38e6557322.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Medium-term KST":
            em = disnake.Embed(title=f"{self.values[0]}", description="```py\nImplication:\n\nA bullish signal is generated when the KST, 'Know Sure Thing', rises above its moving average. When the KST falls below its moving average, the Technical Event® is a bearish signal.```"
                                                                        "```py\nSupported 'Short-term KST' events are suitable for investors interested in a time frame of 2-6 weeks.```` ```py\n'Medium-term KST' events are suitable for those interested in 6-39 week trends.``` ```py\nSupported 'Long-term KST' events are suitable for a 9-month to 2-year time frame.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/e08b9113e2824073908c33765545099b.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Megaphone Top":
            em = disnake.Embed(title=f"{self.values[0]}",description="```py\nImplication:\n\nA Megaphone Top also known as a Broadening Top is considered a bearish signal, indicating that the current uptrend may reverse to form a new downtrend.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10684-Megaphone-Top")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/2a05e35dc14a4faeb7c63870230681ba.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Megaphone Bottom":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nA Megaphone Bottom also known as a Broadening Bottom is considered a bullish signal, indicating that the current downtrend may reverse to form a new uptrend.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10684-Megaphone-bottom")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/269d21508a4c4ab68d5313b6b2110a73.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Symmetrical Continuation Triangle (Bearish)":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nA Symmetrical Continuation Triangle (Bearish) is considered a bearish signal, indicating that the current downtrend may continue.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10647-Symmetrical-Continuation-Triangle-Bearish")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/141f20b1f1ef48949958fdc2c6836392.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Symmetrical Continuation Triangle (Bullish)":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nA Symmetrical Continuation Triangle (Bullish) is considered a bullish signal, indicating that the current uptrend may continue.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10651-Symmetrical-Continuation-Triangle-Bullish")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/da213bc32e4948ab9c5a1635f527e131.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Downside Breakout":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nA Downside Breakout is considered a bearish signal, marking a breakout from a trading range to start a new downtrend.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10680-Downside-Breakout")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/0ae44b8c686e4d6d8e2332d8f18c86f2.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Continuation Diamond (Bullish)":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nA Continuation Diamond (Bullish) is considered a bullish signal, indicating that the current uptrend may continue.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10644-Continuation-Diamond-Bullish")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/c51a689703f74256b35f539dde2f001e.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Continuation Diamond (Bearish)":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nA Continuation Diamond (Bearish) is considered a bearish signal, indicating that the current downtrend may continue.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10644-Continuation-Diamond-Bearish")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/03167e0bc7424c939cf06973d75cb49a.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Upside Breakout":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nAn Upside Breakout is considered a bullish signal, marking a breakout from a trading range to start a new uptrend.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10667-Upside-Breakout")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/4d2005ffc7a94476971d70f3dcfa6060.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Bull Flag":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nA Flag (Bullish) is considered a bullish signal, indicating that the current uptrend may continue.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10648-Flag-Bullish")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/62ce4a5c3a4c46559dd05f269a4096e2.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Bear Flag":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nA Flag (Bearish) is considered a bearish signal, indicating that the current downtrend may continue.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10648-Flag-Bearish")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/25d785328ed1428e9c86fdb8b6eec8ed.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Outside Bar (Bullish)":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nAn Outside Bar (Bullish) indicates a possible reversal of the current downtrend to a new uptrend. This pattern is an indication of a financial instrument's SHORT-TERM outlook. Two-bar patterns reflect changes in investor psychology that have a very short-term influence on future prices - typically less than 10 bars. Often the immediate effect is trend exhaustion, then reversal. For traders looking for clear entry and exit points, these patterns serve well. They are normally not suitable as signals for long-term investors unless viewed as monthly bars.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10634-Outside-Bar-Bullish")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/359be57d6e684aaea20e40566849ddf6.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Outside Bar (Bearish)":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nAn Outside Bar (Bearish) indicates a possible reversal of the current uptrend to a new downtrend. This pattern is an indication of a financial instrument's SHORT-TERM outlook. Two-bar patterns reflect changes in investor psychology that have a very short-term influence on future prices - typically less than 10 bars. Often the immediate effect is trend exhaustion, then reversal. For traders looking for clear entry and exit points, these patterns serve well. They are normally not suitable as signals for long-term investors unless viewed as monthly bars.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10634-Outside-Bar-Bearish")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/c8d3b965d650489f9446c26a22aca3ea.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Engulfing Line (Bearish)":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nAn Engulfing Line (Bearish) indicates a possible reversal of the current uptrend to a new downtrend. This pattern is an indication of a financial instrument's SHORT-TERM outlook.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10619-Engulfing-Line-Bearish")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/195f7d84aad247c283c54099097ff7cf.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Engulfing Line (Bullish)":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nAn Engulfing Line (Bullish) indicates a possible reversal of the current downtrend to a new uptrend. This pattern is an indication of a financial instrument's SHORT-TERM outlook.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10619-Engulfing-Line-Bullish")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/010733f807914bf9aaec620aeddf065b.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Commodity Channel Index (CCI)":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nA bullish event when the CCI rises above the +100% line.```"
"```py\nAnother event signaling the end of the previous bullish trend occurs when the CCI subsequently falls below the +100% line.```"
"```py\nA bearish event when the CCI falls below the -100% line.```"
"```py\nAnother event signaling the end of the previous bearish trend occurs when the CCI subsequently rises above the -100% line.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10656-Commodity-Channel-Index-CCI")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/a2d2dbd8d98b4bc0a8e8ed3c37ebc953.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Momentum":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nWhen the Momentum rises above 0, a bullish Technical Event® signal is generated. When the Momentum falls below 0, the Technical Event® is a bearish signal.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10670-Momentum")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/9336166a82f0451fba5715ad092b1308.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Hanging Man":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nThe Hanging Man is a bearish signal indicating that the prior uptrend is about to end and may reverse to a downtrend or move sideways. This pattern is an indication of a financial instrument's SHORT-TERM outlook.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10662-Hanging-Man")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/b27e22b3444745a4b84504158b80a00b.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Exhaustion Bar (Bullish)":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nAn Exhaustion Bar (Bullish) indicates a possible reversal of the current downtrend to a new uptrend. This pattern is an indication of a financial instrument's SHORT-TERM outlook. One and two-bar patterns reflect changes in investor psychology that have a very short-term influence on future prices - typically less than 10 bars. Often the immediate effect is trend exhaustion followed by reversal. For traders looking for clear entry and exit points, these patterns serve well. They are normally not suitable as signals for long-term investors unless viewed as monthly bars.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10629-Exhaustion-Bar-Bullish")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/4e78e8498fc8474da42ec6160162fca0.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Exhaustion Bar (Bearish)":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nAn Exhaustion Bar (Bearish) indicates a possible reversal of the current uptrend to a new downtrend. This pattern is an indication of a financial instrument's SHORT-TERM outlook. One and two-bar patterns reflect changes in investor psychology that have a very short-term influence on future prices - typically less than 10 bars. Often the immediate effect is trend exhaustion followed by reversal. For traders looking for clear entry and exit points, these patterns serve well. They are normally not suitable as signals for long-term investors unless viewed as monthly bars.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10629-Exhaustion-Bar-Bearish")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/f45ef2a163d9491f89229dc3b63dd67f.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Diamond Bottom":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nA Diamond Bottom is considered a bullish signal, indicating a possible reversal of the current downtrend to a new uptrend.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10678-Diamond-Bottom")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/ba0ae0f3233f492ba5351f713fe5c1a9.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "Diamond Top":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\nA Diamond Top is considered a bearish signal, indicating a possible reversal of the current uptrend to a new downtrend.```", color=disnake.Colour.dark_gold(), url="https://www.webull.com/help/faq/10678-Diamond-Top")
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/a328d0c954fe465ab8a22eeb19f15b67.gif")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\n```", color=disnake.Colour.dark_gold(), url="")
            em.set_image(url="")
            await inter.edit_original_message(embed=em)
        elif self.values[0] == "":
            em = disnake.Embed(title=f"{self.values[0]}", description=f"```py\nImplication:\n\n```", color=disnake.Colour.dark_gold(), url="")
            em.set_image(url="")
            await inter.edit_original_message(embed=em)





class TechDropdown(disnake.ui.Select):
    def __init__(ctx):
        

        options = [

            disnake.SelectOption( label=f"✨MAC-D"),
            disnake.SelectOption( label=f"✨✨RSI"),
            disnake.SelectOption( label=f"✨Bollinger Bands"),
            disnake.SelectOption( label=f"Island Top"),
            disnake.SelectOption( label=f"Island Bottom"),
            disnake.SelectOption( label=f"Fast Stochastics"),
            disnake.SelectOption( label=f"Slow Stochastics"),
            disnake.SelectOption( label=f"Hammer"),
            disnake.SelectOption( label=f"Inverted Hammer"),
            disnake.SelectOption( label=f"Price Cross moving Average"),
            disnake.SelectOption( label=f"Double Moving Averages Crossover"),
            disnake.SelectOption( label=f"Triple Moving Averages Crossover"),
            disnake.SelectOption( label=f"Key Reversal Bar (Bullish)"),
            disnake.SelectOption( label=f"Key Reversal Bar (Bearish)"),
            disnake.SelectOption( label=f"Pennant (Bullish)"),
            disnake.SelectOption( label=f"Pennant (Bearish)"),
            disnake.SelectOption( label=f"Rounded Top"),
            disnake.SelectOption( label=f"Rounded Bottom"),
            disnake.SelectOption( label=f"Triple Top"),
            disnake.SelectOption( label=f"Triple Bottom"),
            disnake.SelectOption( label=f"Double Bottom"),
            disnake.SelectOption( label=f"Double Top"),
            disnake.SelectOption( label=f"Head and Shoulders Bottom"),
            disnake.SelectOption( label=f"Head and Shoulders Top"),]

        super().__init__(
        placeholder=f"📉 🇵  🇦  🇹  🇹  🇪  🇷 🇳 🇸 📈",
        min_values=1,
        max_values=1,
        custom_id=f"🇵  🇦  🇹  🇹  🇪  🇷 🇳 🇸",
        options= options)
    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "✨✨RSI":
            embed=disnake.Embed(title="RSI",description="```py\n Live Example:```", url="https://www.webull.com/help/faq/10654-Relative-Strength-Index-RSI",color=disnake.Colour.dark_gold())
            embed.set_image(url="https://pre-social-video.webullbroker.com/us/office/158aa81f966d41d89b4e9f294f5b9ee9.gif")
            await inter.response.edit_message(embed=embed)
            sleep(9)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/f015372c3ff0449cbb111386b3fabc39.png")
            await inter.edit_original_message(embed=embed)
            sleep(9)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/fa0758cd1e834026933f5f9fcb97c7d6.png")
            await inter.edit_original_message(embed=embed)
        
        elif self.values[0] == "✨MAC-D":
            embed=disnake.Embed(title="✨MAC-D",description="```py\n Live Example:```", url="https://www.webull.com/help/faq/10652-Moving-Average-Convergence-Divergence-MACD", color=disnake.Colour.dark_orange())
            embed.set_image(url="https://pre-social-video.webullbroker.com/us/office/01745f9cf69e48a9a595d2483c06c12c.gif")
            await inter.response.edit_message(embed = embed)
            sleep(9)
            embed.remove_field(index=1)
            embed.set_image(url="https://u1sweb.webullfinance.com/social/ad633d95b6e94684b038919a0ab0a5ef.png")
            embed.add_field(name="MACD", value="```py\n The Three Components of the MACD - 'histogram' 'signal' and 'MACD Line'```")
            await inter.edit_original_message(embed=embed)
            sleep(5)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/a30f3f8800b94382990ccd9a7a0ebe85.png")
            sleep(9)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/0e56e6748702483391f17ae98632fc2c.gif")
            embed.add_field(name="MACD", value="```py\n The MACD and the baseline:```")
            await inter.edit_original_message(embed=embed)
            sleep(9)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/33b10c898f174e7aac2aaa216aae3975.gif")
            embed.add_field(name="MACD", value="```py\n The MACD and the Signal Line:```")
            await inter.edit_original_message(embed=embed)
            sleep(15)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/4828044b58f54905ae276644824a24ae.png")
            embed.add_field(name="MACD", value="```py\nBullish Convergence```")
            await inter.edit_original_message(embed=embed)
            sleep(15)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/1d8594cc97f44a00b745043d9c421898.png")
            embed.add_field(name="MACD", value="```py\nBearish Convergence```")
            await inter.edit_original_message(embed=embed)
            sleep(15)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/fed61d56f107491b9323457f7c3ba92c.png")
            embed.add_field(name="MACD", value="```py\nBullish Divergence```")
            await inter.edit_original_message(embed=embed)
            sleep(15)
            embed.clear_fields()
            embed.set_image(url="https://u1sweb.webullfinance.com/social/c61c32de1fbc476b8691185b6a7affa9.png")
            embed.add_field(name="MACD", value="```py\nBearish Divergence```")
            await inter.edit_original_message(embed=embed)
        
        elif self.values[0] == "✨Bollinger Bands":
            embed=disnake.Embed(title="✨Bollinger Bands",description="```py\n Live Example:```",url="https://www.webull.com/help/faq/10672-Bollinger-Bands", color=disnake.Colour.dark_blue())
            embed.set_image(url="https://pre-social-video.webullbroker.com/us/office/ccb1adcbe46d4b71aa8fb686b68b7b19.gif")
            await inter.response.edit_message(embed = embed)
            sleep(5)
            embed.remove_field(index=1)
            embed.set_image(url="https://u1sweb.webullfinance.com/social/3952369462d7419d86be8e5105992fc6.png")
            await inter.edit_original_message(embed=embed)
            sleep(9)
            embed.remove_field(index=1)
            embed.set_image(url="https://u1sweb.webullfinance.com/social/03413a6c81554a5eb76e41f18878675d.gif")
            await inter.edit_original_message(embed=embed)
            sleep(9)
            embed.remove_field(index=1)
            embed.set_image(url="https://u1sweb.webullfinance.com/social/f4d69fa970324b4aba4dd35fd1ff6e33.gif")
            await inter.edit_original_message(embed=embed)
            sleep(9)
            embed.remove_field(index=1)
            await inter.edit_original_message(embed=embed)
            embed.set_image(url="https://u1sweb.webullfinance.com/social/6a137240f8114abbb09b435b033db02b.gif")
        
        elif self.values[0] == "Pennant (Bullish)":
            em = disnake.Embed(title="Pennant (Bullish)", description="```py\nImplication:\n\nA Pennant (Bullish) is considered a bullish signal, indicating that the current uptrend may continue.```", color=disnake.Colour.dark_green())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/5d4dab3f68ac464bbb35961dc6182edd.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Pennant (Bearish)":
            em = disnake.Embed(title="Pennant (Bearish)", description=f"```py\nImplication:\n\nA Pennant (Bearish) is considered a bearish signal, indicating that the current downtrend may continue.```", color=disnake.Colour.dark_red())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/32694d0d2a2e423c82fcfa211e935f88.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Key Reversal Bar (Bearish)":
            em = disnake.Embed(title="Key Reversal Bar (Bearish)", description="```py\nImplication:\n\nA Key Reversal Bar (Bearish) indicates a possible reversal of the current uptrend to a new downtrend. This pattern is an indication of a financial instrument's SHORT-TERM outlook. One and two-bar patterns reflect changes in investor psychology that have a very short-term influence on future prices - typically less than 10 bars. Often the immediate effect is trend exhaustion, followed by a reversal. For traders looking for clear entry and exit points, these patterns serve well. They are normally not suitable as signals for long-term investors unless viewed as monthly bars.```", color=disnake.Colour.dark_red())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/78973b12ba32491db844fdaefa621267.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Key Reversal Bar (Bullish)":
            em = disnake.Embed(title="Key Reversal Bar (Bullish)", description=f"```py\nImplication:\n\nA Key Reversal Bar (Bullish) indicates a possible reversal of the current downtrend to a new uptrend. This pattern is an indication of a financial instrument's SHORT-TERM outlook. One and two-bar patterns reflect changes in investor psychology that have a very short-term influence on future prices - typically less than 10 bars. Often the immediate effect is trend exhaustion, followed by a reversal. For traders looking for clear entry and exit points, these patterns serve well. They are normally not suitable as signals for long-term investors unless viewed as monthly bars.```", color=disnake.Colour.dark_green())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/b2a6a707338e49c8889ce9784d81f0c4.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Triple Moving Averages Crossover":
            em = disnake.Embed(title="Triple Moving Averages Crossover", description=f"```py\nWhen a shorter and longer moving average (of a security's price) cross each other (the event), a bullish or bearish signal is generated depending on the direction of the crossover.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://u1sweb.webullfinance.com/suggestion/1902a4d52de74a4bb5a9b4b3badd3a2a.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Double Moving Averages Crossover":
            em = disnake.Embed(title="Double Moving Averages Crossover", description=f"```py\nImplication:\n\nWhen a shorter and longer moving average (of a security's price) cross each other (the event), a bullish or bearish signal is generated depending on the direction of the crossover.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://u1sweb.webullfinance.com/suggestion/17aff3cf388541ba8417862b09d7a176.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Price Cross moving Average":
            em = disnake.Embed(title="Price Cross moving Average", description=f"```py\nImplication:\n\nWhen a security's price crosses its moving average (the event), a bullish or bearish signal is generated depending on the direction of the crossover.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://u1sweb.webullfinance.com/suggestion/15ca404b7b1b40788fac11747d048edd.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Inverted Hammer":
            em = disnake.Embed(title="Inverted Hammer", description=f"```py\nImplication:\n\nAn Inverted Hammer indicates that the prior downtrend is about to end and may reverse to an uptrend or move sideways. This pattern is an indication of a financial instrument's SHORT-TERM outlook.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/495de541f6de4d1aac24d1103cb882c2.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Hammer":
            em = disnake.Embed(title="Hammer", description=f"```py\nImplication:\n\nThe Hammer indicates that the prior downtrend is about to end and may reverse to an uptrend or move sideways. This pattern is an indication of a financial instrument's SHORT-TERM outlook.```", color=disnake.Colour.dark_orange())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/dee6cef744494e3fb65a4f59bb932562.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Slow Stochastics":
            em = disnake.Embed(title="Slow Stochastics", description=f"```py\nImplication:\n\nTrading Central identifies an event for a slow stochastic oscillator when:```"
        "```py\nBullish:\n%K and %D lines fall below and then rise above the 20 threshold, indicating bullish potential, along with a %K line cross above the %D line, triggering a bullish signal event if these 3 crossovers occur within a 5-day period.```"
        "```py\nBearish:\n%K and %D lines rise above and then fall below the 80 threshold, indicating bearish potential, along with a %K line cross below the %D line, triggering a bearish signal event if these 3 crossovers occur within a 5-day period.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/fafd3076f18f40789ed55dfc473d22ce.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Fast Stochastics":
            em = disnake.Embed(title="Fast Stochastics", description=f"```py\nImplication:\n\nTrading Central identifies an event for a fast stochastic oscillator when:```"

            "```py\nBullish: %K and %D lines fall below and then rise above the 20 threshold, indicating bullish potential, along with a %K line cross above the %D line, triggering a bullish signal event if these 3 crossovers occur within a 5-day period.```"
            "```py\nBearish: %K and %D lines rise above and then fall below the 80 threshold, indicating bearish potential, along with a %K line cross below the %D line, triggering a bearish signal event if these 3 crossovers occur within a 5-day period.```", color=disnake.Colour.dark_gold())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/961af9fdf8a348948617dddac0a5382b.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Rounded Top":
            em = disnake.Embed(title="Rounded Top", description=f"```py\nImplication:\n\nA Rounded Top is considered a bearish signal, indicating a possible reversal of the current uptrend to a new downtrend.```", color=disnake.Colour.dark_red())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/533f3e4bbe2e414a93f8e99a1801657e.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Rounded Bottom":
            em = disnake.Embed(title="Rounded Bottom", description=f"```py\nImplication:\n\nA Rounded Bottom is considered a bullish signal, indicating a possible reversal of the current downtrend to a new uptrend.```", color=disnake.Colour.dark_green())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/6614b983f9cc43ebb7f50cc5ff476519.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Double Top":
            em = disnake.Embed(title="Double Top", description=f"```py\nImplication:\n\nA Double Top is considered a bearish signal, indicating a possible reversal of the current uptrend to a new downtrend.```", color=disnake.Colour.dark_red())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/5932f20b1c214223877b05851585ab29.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Triple Top":
            em = disnake.Embed(title="Triple Top", description=f"```py\nImplication:\n\nA Triple Top is considered a bearish signal, indicating a possible reversal of the current uptrend to a new downtrend.```", color=disnake.Colour.dark_red())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/08c735d66b114ed9804ccb10303e3438.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Double Bottom":
            em = disnake.Embed(title="Double Bottom", description=f"```py\nImplication:\n\nA Double Bottom is considered a bullish signal, indicating a possible reversal of the current downtrend to a new uptrend.```", color=disnake.Colour.dark_green())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/10001a318a80438184f53f87838d9786.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Triple Bottom":
            em = disnake.Embed(title="Triple Bottom", description=f"```py\nImplication:\n\nA Triple Bottom is considered a bullish signal, indicating a possible reversal of the current downtrend to a new uptrend.```", color=disnake.Colour.dark_green())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/add50eee33a54f2384578344b3b7ec15.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Island Bottom":
            em = disnake.Embed(title="Island Bottom", description=f"```py\nImplication:\n\nAn Island Bottom is a bullish signal indicating a possible reversal of the current downtrend to a new uptrend. This pattern is an indication of a financial instrument's SHORT-TERM outlook.```",color=disnake.Colour.dark_green())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/3f93f2e5da594321b8968e8961ada42e.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Island Top":
            em = disnake.Embed(title="Island Top", description=f"```py\nImplication:\n\nAn Island Top is a bearish signal indicating a possible reversal of the current uptrend to a new downtrend. This pattern is an indication of a financial instrument's SHORT-TERM outlook.```",color=disnake.Colour.dark_red())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/1ef92c2c9dda4797b811660ceb12ea63.gif")
            await inter.response.edit_message(embed = em)    
        elif self.values[0] == "Head and Shoulders Top":
            em = disnake.Embed(title="Head and Shoulders Top", description=f"```py\nImplication:\n\nA Head and Shoulders Top is considered a bearish signal. It indicates a possible reversal of the current uptrend to a new downtrend.```", color=disnake.Colour.dark_red())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/98b1cd5c4ec04cfbacd6c9ac3c82b3c6.gif")
            await inter.response.edit_message(embed = em)
        elif self.values[0] == "Head and Shoulders Bottom":
            em = disnake.Embed(title="Head and Shoulders Bottom", description=f"```py\nImplication:\n\nA Head and Shoulders Bottom is considered a bullish signal. It indicates a possible reversal of the current downtrend into a new uptrend.```", color=disnake.Colour.dark_green())
            em.set_image(url="https://pre-social-video.webullbroker.com/us/office/e1255ee1bded47dfb1ad5b149e5ae357.gif")
            await inter.response.edit_message(embed = em)  


class TechView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(TechDropdown())
        self.add_item(TechDropdown2())
        self.add_item(CandleDropdown())
        self.add_item(TrendDropdown())
        self.add_item(WebullTut())






class Dropdown2(disnake.ui.Select):
    def __init__(self):

        # Set the options that will be presented inside the dropdown
        options = [
            disnake.SelectOption(
                label="📒 Settlement Window Dates" ,description="https://i.ibb.co/TPqKvj8/shortwindow.png",
            ),
            disnake.SelectOption(
                label="📒 Check important FED Events",description="https://i.ibb.co/ngzVjNH/fedschedule.png",
            ),
        ]

        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="🗒️ 🇩 🇴 🇨 🇸 🗒️",
            min_values=1,
            max_values=1,
            custom_id ="SP500",
            options=options,
        ),

    async def callback(self, interaction: disnake.MessageInteraction):
            await interaction.response.defer(with_message=False, ephemeral=True)
            if self.values[0] == "📒 Settlement Window Dates":
                em = disnake.Embed(title="Dropdown Results", color=disnake.Colour.random())

                em.set_image(url=f"https://i.ibb.co/TPqKvj8/shortwindow.png")
                await interaction.edit_original_message(embed=em)
            elif self.values[0] == "📒 Check important FED Events":
                em = disnake.Embed(title="Dropdown Results", color=disnake.Colour.random())

                em.set_image(url=f"https://i.ibb.co/ngzVjNH/fedschedule.png")
                await interaction.edit_original_message(embed=em)



class AnalysisView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80)

        self.add_item(WebullDropdown())
        self.add_item(AnalysisDropdown())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="You just went **🏡 Home** from the **Webull Analysis Tools Menu**")

        await interaction.response.edit_message(embed=em, view=MainView2())
    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple)
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em= disnake.Embed(title="You just went **BACK** from Webull Analysis Tools View", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(embed = em, view=LearnView())

class AnalysisDropdown(disnake.ui.Select):
    def __init__(self):
        options = [
            disnake.SelectOption(
            label="🔍 Orderflow Distribution", description="Learn about order distribution in Webull.",
            ),
                disnake.SelectOption(
            label="🔍 Positions Cost Distribution", description="Learn about this tool from the Webull App.",
            ),
                disnake.SelectOption(
            label="🔍Top Options List", description="Learn about Webull's top options list!",
            ),
                    disnake.SelectOption(
            label="🔍The Options Chain", description="Learn about Webull's Options Chain",
            ),
                        disnake.SelectOption(
            label="🔍Options Paper Trading", description="Learn about Webull's OPTIONS PAPER TRADING!",
            ),
        ]

        super().__init__(
            placeholder="🔎 🇦  🇳  🇦  🇱  🇾  🇸  🇮  🇸 🔍",
            min_values=1,
            max_values=1,
            custom_id="feeds923",
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
            await interaction.response.defer(with_message=True, ephemeral=True)
            if self.values[0] == "🔍 Orderflow Distribution":
                embed = disnake.Embed(title="🔍 Orderflow Distribution", description="```py\nTap on 'Watchlists'. \n\n"
                "Search for a stock and enter its detailed page.\n\n"
                "Tap the Chart section. \n\n"
                "Scroll down till you find the 'Order Flow Distribution' section.```", color=disnake.Colour.random())
                embed.set_image(url="https://social-media.webullfintech.com/social/d82b98553f2b479a8ff535ab66dceed0.jpg")
                await interaction.edit_original_message(embed=embed, view=AnalysisView())
            elif self.values[0] == "🔍 Positions Cost Distribution":
                embed = disnake.Embed(title="🔍 Positions Cost Distribution", description="```py\nThese are the float shares that were purchased and held by investors. \n\n Based on this assumption, the positions cost distribution analyzes the cost prices at which those shares were purchased, how these different price points are distributed at one time and changed on a daily basis. ``` ```py\nFor example, there are 1,000 free float shares of ABC in the market. One day, when the market closes, it was found that these shares were purchased and held by public investors at the different cost prices, namely: 10 shares were purchases at $5.00, 120 shares were purchased at $6.00, 100 shares were purchased at $7.00, 30 shares were purchased at $8.00, 100 shares were purchased $9.00, and 640 shares were purchased at $10.00. This is the distribution of costs of positions for all free float shares at that time.```", color=disnake.Colour.random())
                embed.set_image(url="https://social-media.webullfintech.com/social/269c4df72e6945f093fca8e690b15868.jpg")
                embed.add_field(name="Profited Shares at Market Close:", value="```py\nThis shows the proportion of free float shares held by investors which were purchased at cost prices lower than the closing price (profitable). \n\n\n Profited Shares at Market Close= Profited Shares / Free Float Shares```")
                embed.add_field(name="Cost Concentration:", value="```py\nThe cost concentration is the overlapped portion between 90% Cost Range and 70% Cost Range. \n\n\n The higher the cost concentration ratio is, the more likely the stock price will fluctuate.```")
                embed.add_field(name="What does the Positions Cost Distribution indicate?", value="```py\nThe positions cost distribution indicator is a technical indicator that obtains data from the transaction records covering the 13 national exchanges in the U.S. on a daily basis.``` ```py\n The transaction records show the filled prices of all orders executed during a certain time period- typically one business day, it indicates that the cost basis of the circulating shares is moving towards the filled prices. We will take these filled orders as 'open position' orders and the filled prices as 'cost prices' of new positions held by investors, adding the corresponding shares into the different price points.``` ```py\n However, we do not know which positions of investors were closed. The decrease of shares at each cost price from the previous distribution is estimated based on the profitability ratio.```", inline=False)
                await interaction.edit_original_message(embed=embed, view=AnalysisView())

            elif self.values[0] == "🔍Top Options List":
                embed = disnake.Embed(title="🔍Top Options List", description="```py\nThese are the float shares that were purchased and held by investors. \n\n Based on this assumption, the positions cost distribution analyzes the cost prices at which those shares were purchased, how these different price points are distributed at one time and changed on a daily basis.``` ```py\n For example, there are 1,000 free float shares of ABC in the market. One day, when the market closes, it was found that these shares were purchased and held by public investors at the different cost prices, namely: 10 shares were purchases at $5.00, 120 shares were purchased at $6.00, 100 shares were purchased at $7.00, 30 shares were purchased at $8.00, 100 shares were purchased $9.00, and 640 shares were purchased at $10.00. This is the distribution of costs of positions for all free float shares at that time.```", color=disnake.Colour.random())
                embed.set_image(url="https://social-media.webullfintech.com/social/269c4df72e6945f093fca8e690b15868.jpg")
                embed.add_field(name="Profited Shares at Market Close:", value="```py\nThis shows the proportion of free float shares held by investors which were purchased at cost prices lower than the closing price (profitable). \n Profited Shares at Market Close= Profited Shares / Free Float Shares```")
                embed.add_field(name="Cost Concentration:", value="```py\nThe cost concentration is the overlapped portion between 90% Cost Range and 70% Cost Range. \n The higher the cost concentration ratio is, the more likely the stock price will fluctuate.```")
                embed.add_field(name="What does the Positions Cost Distribution indicate?", value="```py\nThe positions cost distribution indicator is a technical indicator that obtains data from the transaction records covering the 13 national exchanges in the U.S. on a daily basis.``` ```py\n The transaction records show the filled prices of all orders executed during a certain time period- typically one business day, it indicates that the cost basis of the circulating shares is moving towards the filled prices. We will take these filled orders as 'open position' orders and the filled prices as 'cost prices' of new positions held by investors, adding the corresponding shares into the different price points.``` ```py\n However, we do not know which positions of investors were closed. The decrease of shares at each cost price from the previous distribution is estimated based on the profitability ratio.```", inline=False)
                await interaction.edit_original_message(embed=embed, view=TopOptionsView())

            elif self.values[0] == "🔍Options Paper Trading":
                embed = disnake.Embed(title="Options Paper Trading", description="```py\nOptions Paper Trading is one of the most innovative and useful tools that's become available to retail. **Not only can you run strategies and back-test ideas for FREE - but you can do so in an enviornment that operates just as the real thing does. \n\n **GREAT FOR PRACTICING LIMIT ORDER SNIPES.** Be creative. Use the tools around you to better your understanding of what you're capable of.```", color=disnake.Colour.random())
                embed.set_footer(text="Implemented by FUDSTOP Trading")
                await interaction.edit_original_message(embed=embed, view=OptionsPaperView())


class GreeksDropdown(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(
            label="🇩 Delta", description="🇩 Learn about the Option Greek Delta.",
            ),
            disnake.SelectOption(
            label="🇬 Gamma", description="🇬 Learn about the Option Greek Gamma",
            ),
            disnake.SelectOption(
            label="🇷 Rho", description="🇷 Learn about the Option Greek Rho.",
            ),
            disnake.SelectOption(
            label="v Vega", description="v Learn about the Option Greek Vega.",
            ),
            disnake.SelectOption(
            label="🇹 Theta", description="🇹 Learn about time decay, or the option greek Theta.",
            ),
        ]
        super().__init__(
            placeholder="👇 🇬  🇷  🇪  🇪  🇰  🇸 👇",
            min_values=1,
            max_values=1,
            custom_id="greeks",
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        if self.values[0] == "🇩 Delta":
            embed = disnake.Embed(title="Delta in Options", description="```py\nThe delta, symbol Δ, of an option measures the rate of change of its theoretical value with respect to a change in the price of the underlying stock by $1.``` ```py\n Delta is the first derivative of an option’s value or V with respect to the price of the underlying asset S. \n\n This is the equation used to compute delta: \n\n** Δ = ∂ V / ∂ S ** \n\n The delta of a vanilla option can range between **0.0 and 1.0** for a long call or a short put position, and between '0.0 and −1.0' for a long put or short call position. \n\n Its value will depend on how close the option’s strike price is to the current price of the underlying asset. \n\n If those prices are equal in the case of an at-the-money (ATM) option, then the delta is usually '0.5' or '50%'.``` ```py\n For example, if you own a portfolio with 100 call options each on 100 shares of ABC stock that have a 0.5 or 50% delta, then the value of the option contract will theoretically rise in value by .50 if the stock price increases by $1. \n Also, the total delta of a portfolio of various option positions with the same underlying asset is computed by summing up the deltas of each individual position. This practice is used by almost all option portfolio risk managers. \n The absolute value of the delta can also be used by traders as a rough estimate for the probability of an option ending up in-the-money (ITM) at expiration. \n\n For example, **an option with a 0.15 or 15% delta could be thought of as having approximately a 15% chance of being exercised.** \n\n Furthermore, due to a rule known as put-call parity, if you know the delta value of an option, you can compute the delta of the option with the opposite right that has the same strike price. You do this by subtracting the call option’s delta from 1 to get the delta of the put with the same strike price or by subtracting the put option’s delta from 1 to get the corresponding call option’s delta.  So for example, if you have a delta of .4 on a call option, then delta on the corresponding put option will be .6. \n\n  The sum of the deltas between the corresponding put and call options can not exceed 1.```", color=disnake.Colour.random())
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=GreeksView())

        elif self.values[0] == "🇬 Gamma":
            embed = disnake.Embed(title="Gamma", description="```py\nThe gamma, symbol γ,  of an option measures the rate of change in the option’s delta with respect to an incremental change in the price of the underlying asset.``` ```py\nGamma is the 'second derivative' of the value function with respect to the underlying asset’s price S and the only second-order derivative commonly used by options traders.``` ```py\n This is the equation used to compute gamma: \n\n  γ = − ∂2 V / ∂2 S ``` ```py\n In general, long option positions have positive gamma, while short option positions have negative gamma. \n\n **The gamma of an option is the highest when the option nears being at-the-money, and it falls as an option goes further in-the-money or out-of-the-money (OTM).```", color=disnake.Colour.random())
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=GreeksView())
        elif self.values[0] == "🇷 Rho":
            embed = disnake.Embed(title="Rho", description="```py\nRho, symbol ρ, measures an option’s sensitivity to the risk-free interest rate.** \n Rho is therefore the derivative of an option’s value with respect to the risk-free interest rate pertaining to the option’s remaining time until expiration. \n\n Rho can be called the **interest rate sensitivity** of an option. \n\n This is the equation used to compute rho: \n\n ρ = ∂ V / ∂ r```py\nIn most cases, rho reflects a relatively minor risk for options traders because an option’s price is typically less sensitive to interest rate shifts than to changes in other pricing parameters. \n\n Also, options traders typically express rho as the change in an option’s value as the risk-free interest rate goes up or down by 1 percent per annum.``` ```py\n While stock options only have the rho Greek, currency options have another Greek called phi that relates to the foreign currency interest rate, while the rho for currency options relates to the domestic currency interest rate.```", color=disnake.Colour.random())
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=GreeksView())
        elif self.values[0] == "v Vega":
            embed = disnake.Embed(title="Vega", description="```py\nVega, symbol 𝜈, measures an option position’s sensitivity to movements in implied volatility. \n Vega is the first derivative of an option’s value with respect to the implied volatility or 𝜎 of the underlying asset.``` ```py\nThose actually familiar with the Greek language might note that there is no Greek letter called vega. \n\n To get around this, the symbol “𝜈 for the Greek letter nu is typically used to represent vega. \n\n Vega is also sometimes called the **volatility sensitivity** of an option. \n This is the equation used to compute vega: \n\n **𝜈 =  ∂ V / ∂ 𝜎** \n\n Most option traders will express vega as the change in an option’s value as implied volatility goes up or down by 1 percent. \n\n **Vanilla options will generally gain in value as implied volatility increases.** \n\n Option portfolio traders tend to watch their vega closely to make sure they are either hedged or positioned correctly according to their implied volatility view. \n\n Also, **those trading very volatility-sensitive option strategies like at-the-money straddles might want to keep an eye on their vega exposure, especially if they intend to trade out of the straddle before expiration.**", color=disnake.Colour.random())
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=GreeksView())
        elif self.values[0] == "🇹 Theta":
            embed = disnake.Embed(title="Theta", description="```py\nThe theta, symbol Θ, of an option measures the sensitivity of its value to the passage of time, which is usually expressed in one-day increments. \n\n Theta is the first derivative of the option value function with respect to time t. \n\n Theta is also sometimes called the **time decay** of an option. This is the equation used to compute theta: \n\n Θ = − ∂ V / ∂ t ```py\nFor vanilla options, the theta of a long option position is generally less than or equal to zero, while the theta of a short option position is almost always greater than or equal to zero.\n\n Options traders with a long option position are said to be short theta, and their portfolio will decay in value as time passes if other factors are held steady.``` ```py\n Conversely, traders with a short option position are long theta, and they will experience a rise in their portfolio’s value over time if other factors remain constant.```", color=disnake.Colour.random())
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=GreeksView())


class OrderView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)
        self.add_item(WebullDropdown())
        self.add_item(WebullOrderDropdown())


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="```py\nYou just went '🏡 Home' from the 'Order Types Menu'```")

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.grey)
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em= disnake.Embed(title="You just went **BACK** from **Order Types Menu**", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(embed = em, view = LearnView())

    @disnake.ui.button(label="📌 Pin It", style=disnake.ButtonStyle.blurple)
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You Just Pinned A Message! 📌 Now you can search for it with Discord search if needed!", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(view=None)

class StopLimitOrderView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(LearningDropdown())
        self.add_item(WebullOrderDropdown())

    @disnake.ui.button(label="Stop Limit Orders", style=disnake.ButtonStyle.blurple)
    async def stoplimitorder( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Stop Limit Orders", description="```py\nA stop limit order is similar to a stop order, except that the order is changed to a limit order upon triggering. When placing a stop limit order, two prices are entered: a stop price and a limit price.``` ```py\n The order is triggered when the stock has traded at or through the stop price and then becomes a limit order.```", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/6fb6116cf9f74c3cbd3e853e02694aaa.gif")

        await interaction.response.edit_message(embed=embed, view=StopLimitOrderView())

    @disnake.ui.button(label="Buy Stop Limit Orders", style=disnake.ButtonStyle.green)
    async def stoplimitorder2( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Stop Limit Orders", description="```py\nIn a buy stop limit order, an investor enters the stop price above the current market price and sets the limit price as the highest price they are willing to pay for a share.``` ```py\n For example, XYZ stock is currently trading at $12 per share. Investor A wants to buy XYZ shares when the price has reached $14, and she is willing to pay $14.5 per share at most. Therefore, she places a buy order with a stop price of $14 and a limit price of $14.5. \n\n\n Her order will be triggered only when the stock price hits $14 or above, and filled at $14.5 or below.```", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/28ae14d58bcd41958b527d689e74e5f0.gif")
        await interaction.response.edit_message(embed=embed, view=StopLimitOrderView())

    @disnake.ui.button(label="Switching Between Buy/Sell", style=disnake.ButtonStyle.grey)
    async def stoplimitorder3( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="How to Switch from BUY/SELL", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/8d1a7dd1f3e64598a2c05367defd4f2a.png")
        embed.set_thumbnail(url="https://u1sweb.webullfinance.com/social/6fefda9132844280a54201ec3f09994a.png")

        await interaction.response.edit_message(embed=embed, view=StopLimitOrderView())


    @disnake.ui.button(label="Sell Stop Limit Orders", style=disnake.ButtonStyle.red)
    async def stoplimitorder4( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Sell Stop Limit Orders", description="```py\nIn a sell stop limit order, the stop price is set below the current market price. The limit price is the lowest offer that an investor is willing to accept.``` ```py\n For example, XYZ stock is currently trading at $12. Investor B worries that the price may drop significantly. He wants to sell his shares for at least $9.5 per share when the price drops to $10. Therefore, he places a sell order with a stop price of $10 and a limit price of $9.5. \n\n\n His order will be triggered only when the stock price drops to $10 or below, and filled at $9.5 or higher.```", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/56e4af36b83b4c6fa8807bc0f93477d2.gif")


        await interaction.response.edit_message(embed=embed, view=StopLimitOrderView())



    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more.``` ```py\n Simply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="```py\nYou just went 🏡 'Home.'```")

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="📌 Pin It", style=disnake.ButtonStyle.blurple)
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You Just Pinned A Message! 📌 Now you can search for it with Discord search if needed!", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(view=None)

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.grey)
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Order Types", color=disnake.Colour.dark_magenta())


        await interaction.response.edit_message(embed=embed, view=MainView2())




class StopOrderView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)
        self.add_item(WebullOrderDropdown())

    @disnake.ui.button(label="1️⃣Buy Stop Order", style=disnake.ButtonStyle.green)
    async def stoporder( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="1️⃣", description="```py\nA stop order, also called a stop-loss order, is an order to trade a security when it has reached above or below a specified price. When the price is met, the stop order is triggered and changed to a market order.```")
        embed.add_field(name="Buy Stop Order", value="```py\nIn a buy stop order, a stop price is set above the current market price. It could be used by investors in many scenarios. For example, investor A has observed an increase in XYZ stock and believes it’s a good trading opportunity.``` ```py\n However, she is not sure if this is a long-term upward trend.\n\n Therefore, she places a buy stop order with a stop price of $30 when XYZ stock is trading at $27. \n\n The order will only be filled at the market price if XYZ stock rises to $30 or above. A buy stop order could also be used by short sellers to stop potential losses. \n\n\n** For example, investor B opened a short position in XYZ stock at a price of $27, expecting the stock price to fall. \n\n He could place a buy stop order of XYZ stock with a stop price above $27 to limit his losses from unexpected price increase.```")
        embed.set_image(url="https://social-media.webullfintech.com/social/7e7d5b670df44b85b1af6c6459ca395c.gif")


        await interaction.response.edit_message(embed=embed, view=StopOrderView())

    @disnake.ui.button(label="2️⃣Sell Stop Order", style=disnake.ButtonStyle.red)
    async def stoporder2( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="2️⃣Sell Stop Order", description="```py\nIn a sell stop order, a stop price is set below the current market price. It could be used by investors to stop losses or to lock in profits.``` ```py\n For example, investor C bought XYZ stock at $22. \n\n Investor D bought XYZ stock at $26.  \n\nThey both place a sell stop order with a stop price of $24 when XYZ stock is trading at $27. \n\n For investor C, he wants to lock in a profit of about $2 per share. \n\n However, for investor D, the purpose is to stop losses at about $2 per share.```")
        embed.set_image(url="https://social-media.webullfintech.com/social/122a4b5908fd4ea684c69c92959caee0.gif")


        await interaction.response.edit_message(embed=embed, view=StopOrderView())

    @disnake.ui.button(label="3️⃣Summary", style=disnake.ButtonStyle.green)
    async def stoporder3( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="3️⃣Summary", description="```py\nA stop order is triggered at the stop price and filled as a market order. \n\n The stop price is set above (buy stop) or below (sell stop) the market price. With a stop order, investors can seize trading opportunities without having to monitor the market closely. \n\n Investors can use stop orders to lock in profits or stop losses.``` ```py\n Please note: it is possible that a stop order may fill at a price much different from the stop price, especially in a volatile market. \n\n If you want to limit your trading price, a stop order may not be the best choice.```")
        embed.set_image(url="https://social-media.webullfintech.com/social/2f353684916b47c48d195f8d916cf34d.png")
        embed.add_field(name="Tips:", value="On Webull, we only support placing stop orders during market hours. \n\n"
"You can choose a Day order if you only want your order to last for a day. If you want your order to last longer, use a Good ‘Till Canceled order, which will last for 60 days (including weekends and holidays).")


        await interaction.response.edit_message(embed=embed, view=StopOrderView())

    @disnake.ui.button(label="📌 Pin It", style=disnake.ButtonStyle.blurple)
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You Just Pinned A Message! 📌 Now you can search for it with Discord search if needed!", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(view=None)

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="```py\nYou just went 🏡 'Home'```")

        await interaction.response.edit_message(embed=em, view=MainView2())
    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.grey)
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em= disnake.Embed(title="You just went **BACK** from **Stop Orders Explanation**", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(embed = em, view=OrderView())


class BidAskOrderView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(LearningDropdown())
        self.add_item(WebullOrderDropdown())

    @disnake.ui.button(label="Level 1 Bid and Ask", style=disnake.ButtonStyle.blurple)
    async def bidask( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Level 1 Bid and Ask", description="```py\nIn level 1, only the best bid and ask are shown. \n\n In the example below, the highest price that the market is willing to pay for stock A is $164.80 (the bid price), and the aggregate number of shares to be traded at this price is 5,001 (the bid size). \n\n If an investor places a market order to sell Stock A, the order will most likely be filled at the price of $164.8. \n\n This is because there are plenty of orders to be filled at $164.80.```"

"```py\nOn the right side of the example below, the lowest price the market is willing to accept for the sale of stock A is $164.87 (the ask price), and the aggregate number of shares to be traded at this price is 2 (the ask size). If an investor places a market order to purchase shares of stock A, the order will most likely be filled at a price above $164.87. This is because there are only 2 shares to be sold at $164.87. If an investor enters a buy limit order with a limit price set above $164.80, the order may become the new best bid.```"

"```py\nThe difference between the bid and ask is called the spread. \n\n The depth of bids and asks (number of bids and asks in the market) could impact the spread significantly. \n\n If there are fewer bids or fewer asks in the market, the spread could be wide. \n\n **In this case, placing a market order can be risky.** In the example below, the spread is only $0.07.```", color=disnake.Colour.random())
        embed.set_image(url="https://social-media.webullfintech.com/social/b8e62993fb9844cb905fa508b11f8f07.png")


        await interaction.response.edit_message(embed=embed, view=BidAskOrderView())

    @disnake.ui.button(label="Level 2 Bid and Ask", style=disnake.ButtonStyle.red)
    async def levl2( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Level 2 Bid and Ask", description="```py\nIn level 2, up to 50 best bids and asks can be displayed.```"

"```py\nAbove the 50 bids and asks, a summary is presented in a chart. In this chart, the horizontal axis describes the price, and the vertical axis describes the volume. The green shaded area on the left is the buyer’s volume, while the red shaded area on the right is the seller’s volume. \n\n At the bottom of the chart where the green and red lines are joined, the current market price is displayed```"

"```py\nIn the example below, we can see that the seller’s volume is higher than the buyer’s volume.vThis means the market is currently bearish towards Stock B.```", color=disnake.Colour.random())
        embed.set_image(url="https://social-media.webullfintech.com/social/1fb8a0c82bad4c7e8ac4d08ec7df1c04.png")


        await interaction.response.edit_message(embed=embed, view=MarketOrderView())

    @disnake.ui.button(label="The Level 2 Order Book", style=disnake.ButtonStyle.green)
    async def levl22( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Level 2 Order Book", description="```py\nBelow the chart, there are up to 50 bids and asks, with the best displayed first. You can customize the number of bid and ask prices that are displayed by tapping the number in the upper right corner, above bid and ask prices.```", color=disnake.Colour.random())
        embed.set_image(url="https://social-media.webullfintech.com/social/fd6eefb081de4522b3b7779d816bdca9.png")


        await interaction.response.edit_message(embed=embed, view=BidAskOrderView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more.``` ```py\n Simply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="```py\nYou just went 🏡 'Home'.```")

        await interaction.response.edit_message(embed=em, view=MainView2())
    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.grey)
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em= disnake.Embed(title="You just went **BACK** from **How to Read the Bid / Ask Spread**", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(embed = em, view = LearnView())

    @disnake.ui.button(label="📌 Pin It", style=disnake.ButtonStyle.blurple, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You Just Pinned A Message! 📌 Now you can search for it with Discord search if needed!", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(view=None)
class MarketOrderView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(LearningDropdown())
        self.add_item(WebullOrderDropdown())

    @disnake.ui.button(label="1️⃣", style=disnake.ButtonStyle.blurple)
    async def marketorder1( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="1️⃣", description="```py\nWhen trading large-cap or highly liquid securities, a market order is usually filled immediately at a price very close to the market price.``` ```py\n However, when the market is extremely volatile, it’s possible that the filling price may deviate significantly from the market price```")
        embed.set_image(url="https://social-media.webullfintech.com/social/6a104519747d46c384833ce2a776a651.gif")


        await interaction.response.edit_message(embed=embed, view=MarketOrderView())

    @disnake.ui.button(label="2️⃣", style=disnake.ButtonStyle.blurple)
    async def marketorder2( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="2️⃣", description="```py\nFor small-cap or illiquid securities, market orders can take longer to fill and may fill at a price deviating from the market price```")
        embed.set_image(url="https://social-media.webullfintech.com/social/13d94b634e7d4896b84d1f0139ebaace.gif")


        await interaction.response.edit_message(embed=embed, view=MarketOrderView())

    @disnake.ui.button(label="3️⃣Summary", style=disnake.ButtonStyle.red)
    async def marketorder3( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Summary", description="```py\nMarket order has the best chance of filling, **but the filling price is not certain.** \n\n If you’re trading large-cap or highly liquid securities, placing a market order usually enables immediate order filling at a close price. ``` ```py\n If you want to control your filling price, or you’re trading small-cap or illiquid securities, a market order may not be suitable.```")
        embed.add_field(name="Tips", value="On Webull, we only support placing market orders during market hours. \n\n \n On Webull, a market order expires at the end of each trading day. If your order is not filled, you need to place the order again on the following trading day.")


        await interaction.response.edit_message(embed=embed, view=MarketOrderView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more.``` ```py\n Simply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="```py\nYou just went 🏡 'Home'```")

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.grey, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em= disnake.Embed(title="You just went **BACK** from **Market Order Explanation**", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(embed = em, view = LearnView())

    @disnake.ui.button(label="📌 Pin It", style=disnake.ButtonStyle.blurple, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You Just Pinned A Message! 📌 Now you can search for it with Discord search if needed!", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(view=None)

class LimitOrderView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(LearningMainMenuDropdown())
        self.add_item(WebullOrderDropdown())

    @disnake.ui.button(label="1️⃣", style=disnake.ButtonStyle.green)
    async def marketorder1( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="1️⃣", description="```py\nA limit order is an order to trade a security at a specified price or better.``` ```py\n For example, an investor wants to invest in ABC stock. She enters a buy limit order at $27 when the market price is $30. Her order will only be executed when the stock price drops to $27 or below. \n\n If the price never falls to $27, the order will not be filled.```")
        embed.set_image(url="https://social-media.webullfintech.com/social/f869a2d46f364a6baf60e415c49fdf7a.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=LimitOrderView())

    @disnake.ui.button(label="2️⃣", style=disnake.ButtonStyle.green)
    async def marketorder2( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="2️⃣", description="```py\nInvestor B wants to sell his ABC shares. He places a sell limit order at $30 when the stock price is $27. His order will only be executed when the stock price reaches $30 or above. If the price never reaches $30, the order will not be filled.```")
        embed.set_image(url="https://social-media.webullfintech.com/social/5430e0b0b4a84106b0922f1c8b33b661.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=LimitOrderView())

    @disnake.ui.button(label="3️⃣Summary", style=disnake.ButtonStyle.green)
    async def marketorder3( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Summary", description="```py\nA limit order will not be executed unless the limit price is met. It guarantees the filling price, but it does not guarantee filling. It is possible a limit order may never be filled. This is different from a market order, which is typically executed at the time of the order with an uncertain filling price.``` ```py\n Limit order enables investors to trade within a price range in volatile situations. But for those who want to seize the trading opportunity at whatever costs, a limit order might not be a good choice.```")
        embed.add_field(name="Tips", value="```py\n1. On Webull, we support placing limit orders in both market and extended hours.``` ```py\n 2. You can choose a Day order if you only want your order to last for a day. If you want your order to last longer, use a Good ‘Till Canceled order, which will last for 60 days (including weekends and holidays).```")
        embed.set_image(url="https://social-media.webullfintech.com/social/10b5b60089c64fccaa303a7e458090b4.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=LimitOrderView())


    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em= disnake.Embed(title="You just went **BACK** from **Limit Order Explanation**", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(embed = em, view = LearnView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="```py\nYou just went 🏡 'Home'```")

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="📌 Pin It", style=disnake.ButtonStyle.blurple, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You Just Pinned A Message! 📌 Now you can search for it with Discord search if needed!", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(view=None)


####OPTIONSEDU####
class OptionsEducationView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(OptionsDropdown())




    @disnake.ui.button(label="Options Strategies", style=disnake.ButtonStyle.blurple)
    async def optstrats( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Options Strategies", color=disnake.Colour.dark_orange())
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=OptStratsView())


    @disnake.ui.button(label="Options Education", style=disnake.ButtonStyle.green)
    async def ta( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Options Education")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=OptionsEducationView())



    @disnake.ui.button(label="Options Paper Trading", style=disnake.ButtonStyle.red)
    async def optionspaper( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Options Paper Trading", description="```py\nOptions Paper Trading is one of the most innovative and useful tools that's become available to retail.``` ```py\n Not only can you run strategies and back-test ideas for FREE - but you can do so in an enviornment that operates just as the real thing does.``` ```py\nGREAT FOR PRACTICING LIMIT ORDER SNIPES. Be creative. Use the tools around you to better your understanding of what you're capable of.```", color=disnake.Colour.random())
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=OptionsPaperView())


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\n Simply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="You just went **🏡 Home** from the **Options Education Menu**")

        await interaction.response.edit_message(embed=em, view=MainView2())
    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em= disnake.Embed(title="You just went **BACK** from **Options Education**", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(embed = em, view=OptionsView())


class PutView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="Option Learning Begins at Puts", style=disnake.ButtonStyle.red)
    async def puts1( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Option Learning Begins at Puts", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/8581fdc8923044cb88f4182be68f4970.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=PutView())

    @disnake.ui.button(label="Put Buyer Profit and Loss Chart", style=disnake.ButtonStyle.red)
    async def puts2( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Put Buyer Profit and Loss Chart", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/20759b4e9dcc487fbde39ebf059dfe85.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=PutView())

    @disnake.ui.button(label="Buying Puts vs. Shorting Stock", style=disnake.ButtonStyle.red)
    async def puts3( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Buying Puts vs. Shorting Stock", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/14d5e051d3254755a010075314770522.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=PutView())

    @disnake.ui.button(label="Buying Puts in 5 Steps", style=disnake.ButtonStyle.red)
    async def puts4( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Buying Puts vs. Shorting Stock", color=disnake.Colour.random())
        embed.set_image(url="https://media.giphy.com/media/bncnpvrAvKINZZh8kx/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=PutView())

    @disnake.ui.button(label="Time: friend or foe to put buyers", style=disnake.ButtonStyle.red)
    async def puts5( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Time: friend or foe to put buyers", color=disnake.Colour.random())
        embed.set_image(url="https://media.giphy.com/media/9XOKPOYB0bjNfzZsWf/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=PutView())

    @disnake.ui.button(label="Which strike for put buyers?", style=disnake.ButtonStyle.red)
    async def puts6( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="Which strike for put buyers?", color=disnake.Colour.random())
        embed.set_image(url="https://media.giphy.com/media/Ky16TjMw0B5RGAYCr4/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=PutView())

    @disnake.ui.button(label="How leverage works for put options?", style=disnake.ButtonStyle.red)
    async def puts7( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="How leverage works for put options?", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/df3bd2e703404fc1842e446ca5f1ccc1.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view=PutView())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        em= disnake.Embed(title="You just went **BACK** from **Puts Explanation**", color=disnake.Colour.dark_blue())
        await interaction.response.edit_message(embed = em, view = LearnView())
    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data,"
        "discord tutorials, educational youtube videos, and so much more.```"
        "```py\n Simply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())
        em.add_field(name="Navigation Tooltip:", value="```py\nYou just went 🏡 'Home'```")

        await interaction.response.edit_message(embed=em, view=MainView2())




class WebullTAView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label=f"What is Technical Analysis?", style= disnake.ButtonStyle.grey)
    async def ta1(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"What is Technical Analysis?", description=f"```py\nTechnical analysis uses historical price and volume data to predict future price movements of a security. This is different from fundamental analysis, which focuses on valuing a security based on its financial performance.```", color=disnake.Colour.dark_blue(), url="https://www.webull.com/learn/7NQx7u/XI2xVj/Basic-Chart-Types-in-Technical-Analysis")
        em.add_field(name="The philosophies of technical analysis",value="```py\nTechnical analysis is based on three notions:``` ```py\nAll information in the market is already reflected in the security price. Therefore, price should be the foundation of the analysis.```"
"```py\nPrice tends to move in a noticeable trend and the trend tends to last for a period. If a trend appears, the price will possibly move in that direction.```"
"```py\nPast price movements tend to repeat in the future. This is because market psychology is predictable based on emotions like fear or excitement.```"
"```py\nTechnical analysis can be used to predict price movements of any security whose price is subject to the force of supply and demand. This includes stocks, options, bonds, commodities, etc.```")
        em.set_footer( text="Implemented by Fudstop Trading")
        em.add_field(name="Technical Analysis Indicators", value="```py\nThere are many tools that technical analysts use to spot trading opportunities. The purpose is to identify the current market trend, and determine the strength and duration of the trend. Common types of indicators are:```"
        "```py\nTrendlines\nChart patterns\nSupport and resistance\nVolume and momentum indicators\nMoving averages Oscillators```")
        await inter.response.edit_message(embed=em, view=WebullETFView())

    @disnake.ui.button(label=f"Line charts", style= disnake.ButtonStyle.blurple)
    async def ta2(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Line charts", description=f"```py\nLine charts are simply drawn by connecting closing prices. Each closing price is connected to the previous closing price over a specified time interval to make a continuous line. As only the closing prices are shown, line charts can be easy to understand and give a quick glance of the overall price movements.```"

"```py\nOn Webull, you will see the line chart in two colors, green or red. It tells you intuitively if the price has fallen (red) or risen (green) during the time frame. As you can see below, the price has risen from point A to point B, thus the line is green.```", color = disnake.Colour.dark_orange(), url="https://www.webull.com/learn/7NQx7u/XI2xVj/Basic-Chart-Types-in-Technical-Analysis")
        em.set_footer( text="Implemented by Fudstop Trading")
        em.set_image(url="https://u1sweb.webullfinance.com/social/56718c60c5894bddb54b898b0711be30.png")
        await inter.response.edit_message(embed=em, view=WebullETFView())

    @disnake.ui.button(label=f"Bar charts", style= disnake.ButtonStyle.blurple)
    async def ta3(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Bar charts", description=f"```py\nThe bar chart, or OHLC (opening, closing, high, and low) chart consists of a series of price bars representing price movements for a specific period.```"

"```py\nEach bar consists of one vertical line and two horizontal lines, as shown below. A vertical line connects the high and low prices during the time interval. The left horizontal line indicates the opening price, and the right one shows the closing price.```"

"```py\nInvestors could tell how volatile a security is over the specified time interval by looking at the height of the bar.```"

"```py\nOn Webull, if you change the line type to Bar Chart, the bars are shown in only one color, as shown below. This gives more information than line charts and eliminates the interruption of color.```", color = disnake.Colour.dark_orange(), url="https://www.webull.com/learn/7NQx7u/XI2xVj/Basic-Chart-Types-in-Technical-Analysis")
        em.set_footer( text="Implemented by Fudstop Trading")
        em.set_image(url="https://u1sweb.webullfinance.com/social/b3a14a05ee0d45fc86fbdeb3a535aef7.png")
        await inter.response.edit_message(embed=em, view=WebullETFView())

    #@disnake.ui.button(label=f"", style= disnake.ButtonStyle.green)
    #async def etf1(self,inter: disnake.AppCmdInter):
       # em = disnake.Embed(title=f"", description=f"```py\n```", color = disnake.Colour.dark_orange())
        #em.set_footer( text="Implemented by Fudstop Trading")
        #await inter.response.edit_message(embed=em, view=WebullETFView())

    @disnake.ui.button(label=f"Candlestick charts", style= disnake.ButtonStyle.red)
    async def ta4(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Candlestick charts", description=f"```py\nThe candlestick chart provides the same price data (open, close, high, and lows) as the bar chart, only in a different form.```"

"```py\nJust like in a bar chart, the opening and closing prices are shown in two horizontal lines. The difference is that a box is made by connecting the two horizontal lines. A single vertical line is drawn in the middle of the box to connect the high and low prices. Compared with a bar, a candle gives a clearer sight of the difference between opening price and closing price.```"

"```py\nIf the closing price is higher than the opening price, the candle is green, indicating that the security closed higher over the specified time interval. If the closing price is lower than the opening price, the candle is red, indicating that the security closed lower over the specified time interval.```", color = disnake.Colour.dark_orange(), url="https://www.webull.com/learn/7NQx7u/XI2xVj/Basic-Chart-Types-in-Technical-Analysis")
        em.set_footer( text="Implemented by Fudstop Trading")
        em.set_image(url="https://u1sweb.webullfinance.com/social/788519851e5d4563b6ab3932f7aa5390.png")
        await inter.response.edit_message(embed=em, view=WebullETFView())

    @disnake.ui.button(label=f"How To Customize Your Chart Colors in Webull", style= disnake.ButtonStyle.green)
    async def etf1(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"How To Customize Your Chart Colors in Webull", description=f"```py\n```", color = disnake.Colour.dark_orange())
        em.set_footer( text="Implemented by Fudstop Trading")
        em.set_image(url="https://i.ibb.co/fQvdxzr/webull-customize.png")
        await inter.response.edit_message(embed=em, view=WebullETFView())




class WebullETFView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



    @disnake.ui.button(label=f"Takeaways", style= disnake.ButtonStyle.green)
    async def etf1(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Takeaways", description=f"```py\nAn ETF is a basket of investments that trade like stocks. If applicable, it may pay dividends. ETFs can help you to build a diversified portfolio at low costs.```", color = disnake.Colour.dark_orange())
        em.set_footer( text="Implemented by Fudstop Trading, Data Provided By Apperate")
        await inter.response.edit_message(embed=em, view=WebullETFView())

    @disnake.ui.button(label=f"What is an ETF?", style= disnake.ButtonStyle.blurple)
    async def etf2(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"What is an ETF?", description=f"```py\nAn Exchange Traded Fund (ETF) is a basket of investments like stocks, bonds, futures, etc. It enables you to invest in a broad stock market, a specific industry or sector, currency, or commodity."

"ETFs are just like mutual funds in structure. However, most ETFs track an index and are passively managed. In this way, the expense ratio of ETFs is usually much lower than mutual funds.```", color = disnake.Colour.dark_orange())
        em.set_footer( text="Implemented by Fudstop Trading")
        await inter.response.edit_message(embed=em, view=WebullETFView())

    @disnake.ui.button(label=f"How does an ETF trade?", style= disnake.ButtonStyle.blurple)
    async def etf3(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"How does an ETF trade?", description=f"```py\nETFs trade like stocks. Anything you can do with stocks, you can do with ETFs. For example:\n\nYou can trade ETFs throughout the day.\nYou can place any type of order for ETFs.\nYou can short an ETF.\nYou can even trade options on some ETFs.```"
        "```py\nThe value of an ETF share is calculated every trading day after market close, based on the closing prices of the securities in its portfolio. This is known as the 'net asset value' (NAV).```"

"```py\nETFs usually trade at a price close to the NAV, but are affected by demands in the market. When demands are high, ETFs trade at a premium to (a higher price than) the NAV. Conversely, when demands are low, ETFs trade at a discount to (a lower price than) the NAV.```", color = disnake.Colour.dark_orange())

        em.set_footer( text="Implemented by Fudstop Trading")
        await inter.response.edit_message(embed=em, view=WebullETFView())
    
    @disnake.ui.button(label=f"Do ETFs pay out dividends?", style= disnake.ButtonStyle.blurple)
    async def etf4(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Do ETFs pay out dividends?", description=f"```py\nAn ETF that receives dividends from its portfolio must pass the dividends to investors in the fund.``` ```py\nHowever, an ETF does not pay dividend payments immediately as it receives them. Most ETFs pay a quarterly dividend. Just like stocks, investors should buy the shares before the ex-dividend date to receive dividends."

"Dividend-paying ETFs are usually characterized by their names. Type 'dividend' to search for dividend-paying ETFs.```", color = disnake.Colour.dark_orange())
        em.set_footer( text="Implemented by Fudstop Trading")
        await inter.response.edit_message(embed=em, view=WebullETFView())
    @disnake.ui.button(label=f"Why invest in ETFs?", style= disnake.ButtonStyle.blurple)
    async def etf6(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"Why invest in ETFs?", description=f"```py\nETFs are suitable for investors who want to build a diversified portfolio with low costs. You may want to buy ETFs for the following reasons:```"

"```py\nDiversification.\n\nThrough an ETF, you can hold hundreds or even thousands of securities. This spreads out your risk compared to owning just a handful of individual securities.```"
"```py\nTrading flexibility.\n\nYou can trade ETFs any time of the day. This is different from other types of funds, which are usually redeemed at the end of the day. Moreover, you can place any type of order the same way you would trade stocks.```"
"```py\nLow costs.\n\nJust like stocks, you can trade ETFs commission-free on Webull. Additionally, the expense ratios of ETFs are usually much lower than mutual funds due to the passive management style.```", color = disnake.Colour.dark_orange())
        em.set_footer( text="Implemented by Fudstop Trading")
        await inter.response.edit_message(embed=em, view=WebullETFView())
    @disnake.ui.button(label=f"What are the risks to consider?", style= disnake.ButtonStyle.red)
    async def button1(self,inter: disnake.AppCmdInter):
        em = disnake.Embed(title=f"What are the risks to consider?", description=f"```py\nETFs trade like stocks, so they carry similar risks, which are:```"
        "```py\nLiquidity.\nNot all ETFs are highly liquid. Some ETFs tracking little-known industries may have few buyers and sellers in the market. It may take a long time for such an order to settle. Market orders may also end up settling at an unexpected price (large bid-ask spread)."
"```py\nDownturn risks.\nThe price of an ETF follows the price movement of its portfolio. Although a broad market index is unlikely to show volatility as great as a single security, the risks could be amplified with 2x or 3x leverage.```"
"```py\nDiversity:\nBuying an ETF does not necessarily mean building a diversified portfolio. Sector ETFs track a specific industry. If you want to build a diversified portfolio with sector ETFs, buying one ETF does not enable you to achieve your investment goal.```", color = disnake.Colour.dark_orange())
        em.set_footer( text="Implemented by Fudstop Trading")
        await inter.response.edit_message(embed=em, view=WebullETFView())


class RecurringView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        # Replace HTML tags with an empty string.


    
    @disnake.ui.button(label="Recurring Investment", style=disnake.ButtonStyle.red)
    async def newfeature(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=LIprNZ&courseId=nWV8xn")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        image2 = images[1]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url="https://u1sweb.webullfinance.com/social/ffc8368ecfc9422f971c00b2eec729de.png")
        await interaction.response.edit_message(embed=em, view=RecurringView())
        await asyncio.sleep(7)
        em.clear_fields()
        em.set_image(url="https://u1sweb.webullfinance.com/social/0dccabb9e28a44079bee0fd3500124af.png")
        await interaction.edit_original_response(embed=em, view=RecurringView())



    @disnake.ui.button(label="New Feature for Recurring Investment", style=disnake.ButtonStyle.blurple)
    async def newfeature3(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=UyTUFJ&courseId=dTCNgc")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)
        bs = BeautifulSoup(content, 'html.parser')
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url="https://u1sweb.webullfinance.com/social/af71c939daa148fb8e409dea231d3553.gif")
        await interaction.response.edit_message(embed=em, view=RecurringView())
        await asyncio.sleep(7)
        em.clear_fields()
        em.set_image(url="https://u1sweb.webullfinance.com/social/a00216ae508448aa8bd7a222d2c6aef2.gif")
        await interaction.edit_original_response(embed=em, view=RecurringView())
        await asyncio.sleep(7)
        em.clear_fields()
        em.set_image(url="https://u1sweb.webullfinance.com/social/e5daab48c8534d71a6843d729cd92191.gif")
        await interaction.edit_original_response(embed=em, view=RecurringView())

    @disnake.ui.button(label="How to Make Regular and Long-Term ETF Investments", style=disnake.ButtonStyle.blurple)
    async def newfeature2(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=UyTUFJ&courseId=dTCNgc")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        image2 = images[1]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url="https://u1sweb.webullfinance.com/social/715b88984bae4000acd1570714a40d96.png")
        await interaction.response.edit_message(embed=em, view=RecurringView())
        await asyncio.sleep(7)
        em.clear_fields()
        em.set_image(url="https://u1sweb.webullfinance.com/social/bd8e52405db84863860076ba9fe542de.png")
        await interaction.edit_original_response(embed=em, view=RecurringView())
        await asyncio.sleep(7)
        em.clear_fields()
        em.set_image(url="https://u1sweb.webullfinance.com/social/a7ea04913cd841c288e2c43782965bbe.gif")
        await interaction.edit_original_response(embed=em, view=RecurringView())
        await asyncio.sleep(7)


    @disnake.ui.button(label="Recurring Investments", style=disnake.ButtonStyle.blurple)
    async def recurringinvestment(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message(view = RecurringView())


    @disnake.ui.button(label="Trading ETFs & ETF Basics", style=disnake.ButtonStyle.green)
    async def etfs(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message(view=ETFView())

class CoursesView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        # Replace HTML tags with an empty string.

    @disnake.ui.button(label="Recurring Investments", style=disnake.ButtonStyle.blurple)
    async def recurringinvestment(self,button: disnake.ui.Button,interaction: disnake.MessageCommandInteraction):
        await interaction.response.edit_message(view = RecurringView())


    @disnake.ui.button(label="Trading ETFs & ETF Basics", style=disnake.ButtonStyle.green)
    async def etfs(self,button: disnake.ui.Button,interaction: disnake.MessageCommandInteraction):
        await interaction.response.edit_message(view=ETFView())


    @disnake.ui.button(label="US Markets", style=disnake.ButtonStyle.red)
    async def usmarkets(self,button: disnake.ui.Button,interaction: disnake.MessageCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=nWV8xn")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        for i in d:
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}``` ```py\n{result2}``` ```py\n{result3}```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}``` ```py\n{result2}``` ```py\n{result3}```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())


    @disnake.ui.button(label="Technical Analysis for Beginners", style=disnake.ButtonStyle.grey)
    async def ta(self,button: disnake.ui.Button,interaction: disnake.MessageCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=nWV8xn")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        for i in d:
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}``` ```py\n{result2}``` ```py\n{result3}```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}``` ```py\n{result2}``` ```py\n{result3}```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())


    @disnake.ui.button(label="Options", style=disnake.ButtonStyle.blurple)
    async def optionbasic(self,button: disnake.ui.Button,interaction: disnake.MessageCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=nWV8xn")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        for i in d:
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}``` ```py\n{result2}``` ```py\n{result3}```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}``` ```py\n{result2}``` ```py\n{result3}```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())

    @disnake.ui.button(label="Crypto Basics", style=disnake.ButtonStyle.green)
    async def cryptobasic(self,button: disnake.ui.Button,interaction: disnake.MessageCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=nWV8xn")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        for i in d:
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())

    
    @disnake.ui.button(label="What Is Cryptocurrency?", style=disnake.ButtonStyle.red)
    async def cc(self,button: disnake.ui.Button,interaction: disnake.MessageCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=nWV8xn")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        for i in d:
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())

    
    
    @disnake.ui.button(label="What is Bitcoin？", style=disnake.ButtonStyle.grey)
    async def btc(self,button: disnake.ui.Button,interaction: disnake.MessageCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=nWV8xn")
        d = r.json()

        content = d['content']
        
        topic = d['topic']
        for i in d:
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}....``` ```py\n{result2}...``` ```py\n{result3}....```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())


    @disnake.ui.button(label="Stock Basics", style=disnake.ButtonStyle.blurple)
    async def stkt(self,button: disnake.ui.Button,interaction: disnake.MessageCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=nWV8xn")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        for i in d:
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())

    @disnake.ui.button(label="What is Blockchain?", style=disnake.ButtonStyle.red)
    async def blk(self,button: disnake.ui.Button,interaction: disnake.MessageCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=nWV8xn")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        for i in d:
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())

    @disnake.ui.button(label="What is a Call Option?", style=disnake.ButtonStyle.green)
    async def calls(self,button: disnake.ui.Button,interaction: disnake.MessageCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=nWV8xn")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        for i in d:
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())

    

   
    @disnake.ui.button(style=disnake.ButtonStyle.red, label=f"🔙")
    async def back2(self,button: disnake.ui.Button,interaction: disnake.MessageCommandInteraction):
        await interaction.response.edit_message(view=MainSelectView())



class TASchoolView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        # Replace HTML tags with an empty s

        self.add_item(TechAnalysisSelect())


class TechAnalysisSelect(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(label=f"What is technical Anylysis?"),
            disnake.SelectOption(label=f"Basic Chart Types in Technical Analysis"),
            disnake.SelectOption(label=f"Trend Analysis"),
            disnake.SelectOption(label=f"Selling Cash-Secured Puts for Income: Put Your Idle Cash to Work!"),
            disnake.SelectOption(label=f"How Do You Pick the Right Expiration Date and Strike Price as an Option Seller?"),
            disnake.SelectOption(label=f"The Importance of Strike Selection When Selling Options"),]



        super().__init__(
            placeholder = "🏫 🇨 🇴 🇺 🇷 🇸 🇪 🇸",
            min_values=1,
            max_values=1,
            options=options,
        )
    async def callback(self, interaction:disnake.MessageCommandInteraction):
        if self.values[0] == "What is technical Anylysis?":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=FWg2RR&courseId=XI2xVj")
            d = r.json()
            content = d['content']
            
            topic = d['topic']
            for i in d:
                try:
                    result = re.sub("<.*?>", "", content)[0:999]
                    result2= re.sub("<.*?>", "", content)[1000:1999]
                    result3= re.sub("<.*?>", "", content)[2000:2999]
                    result4= re.sub("<.*?>", "", content)[3000:3999]
                    result5= re.sub("<.*?>", "", content)[4000:4999]
                    result6= re.sub("<.*?>", "", content)[5000:5999]
                    
                    bs = BeautifulSoup(content, 'html.parser')
                    images = bs.find_all('img', {'src':re.compile('.png')})
                    em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                    em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                    em.set_footer(text="Click the URL at the top to view the entire course.")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                except IndexError:
                    result4 = "N/A"
                    result5 = "N/A"
                    result6 = "N/A"
                    images = "N/A"
                    image1 = "N/A"
                    em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                    em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                    em.set_footer(text="Click the URL at the top to view the entire course.")

                    em.set_image(url=image1)
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
        elif self.values[0] == "Basic Chart Types in Technical Analysis":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=sPdHTR&courseId=jZG0Fl")
            d = r.json()
            content = d['content']
            
            topic = d['topic']
            for i in d:
                try:
                    result = re.sub("<.*?>", "", content)[0:999]
                    result2= re.sub("<.*?>", "", content)[1000:1999]
                    result3= re.sub("<.*?>", "", content)[2000:2999]
                    result4= re.sub("<.*?>", "", content)[3000:3999]
                    result5= re.sub("<.*?>", "", content)[4000:4999]
                    result6= re.sub("<.*?>", "", content)[5000:5999]
                    
                    bs = BeautifulSoup(content, 'html.parser')
                    images = bs.find_all('img', {'src':re.compile('.png')})
                    gifs = bs.find_all('img', {'src':re.compile('.gif')})
                    image1 = images[0]['src']+'\n'
                    image2 = gifs[0]['src']+'\n'
                    em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                    em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                    em.set_footer(text="Click the URL at the top to view the entire course.")
                    sleep(4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/56718c60c5894bddb54b898b0711be30.png")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(4)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/d320a78a4e004f559e7dddc23024947d.png")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(4)
                    em.remove_field(index=4)
                    em.set_image("https://u1sweb.webullfinance.com/social/5ee38714666b485a83a295bdb27f945b.png")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(4)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/b3a14a05ee0d45fc86fbdeb3a535aef7.png")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(4)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/788519851e5d4563b6ab3932f7aa5390.png")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(4)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/51b29bc25771495f8e1d87234a26fb41.png")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(4)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/51b29bc25771495f8e1d87234a26fb41.png")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(4)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/405f3f1ee38d46998d10299c2c7b253f.png")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())


                except IndexError:
                    result4 = "N/A"
                    result5 = "N/A"
                    result6 = "N/A"
                    images = "N/A"
                    image1 = "N/A"
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
        
                    
        elif self.values[0] == "Reading Candlestick Charts":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=CnJOCN&courseId=jZG0Fl")
            d = r.json()
            content = d['content']
            
            topic = d['topic']
            for i in d:
                try:
                    result = re.sub("<.*?>", "", content)[0:999]
                    result2= re.sub("<.*?>", "", content)[1000:1999]
                    result3= re.sub("<.*?>", "", content)[2000:2999]
                    result4= re.sub("<.*?>", "", content)[3000:3999]
                    result5= re.sub("<.*?>", "", content)[4000:4999]
                    result6= re.sub("<.*?>", "", content)[5000:5999]
                    
                    bs = BeautifulSoup(content, 'html.parser')
                    images = bs.find_all('img', {'src':re.compile('.png')})
                    image1 = images[0]['src']+'\n'
                    em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                    em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                    em.set_footer(text="Click the URL at the top to view the entire course.")

                    em.set_image(url="https://u1sweb.webullfinance.com/social/c7cdfb88586449ff9de21dd8f2cfbf6f.png")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/90ec130f41294728aa451cb593a85213.gif")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/eb092f7a78844f8dbce1b14289c6421f.gif")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/b414e6ad5b6745559a54b0cf3ea3bd02.gif")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/81aa50ced3214a3f92e5a1df7f8a1d63.gif")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/c6d69491e8ba49bc9ea092eac5424bc3.gif")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/2b3c325c1bed450ea2d62c7f0f990884.gif")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/f76001a6f1664f1489e2eccc874ace3e.gif")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())


                except IndexError:
                    result4 = "N/A"
                    result5 = "N/A"
                    result6 = "N/A"
                    images = "N/A"
                    image1 = "N/A"
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
        elif self.values[0] == "Trend Analysis":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=nAK39C&courseId=jZG0Fl")
            d = r.json()
            content = d['content']
            
            topic = d['topic']
            for i in d:
                try:
                    result = re.sub("<.*?>", "", content)[0:999]
                    result2= re.sub("<.*?>", "", content)[1000:1999]
                    result3= re.sub("<.*?>", "", content)[2000:2999]
                    result4= re.sub("<.*?>", "", content)[3000:3999]
                    result5= re.sub("<.*?>", "", content)[4000:4999]
                    result6= re.sub("<.*?>", "", content)[5000:5999]
                    
                    bs = BeautifulSoup(content, 'html.parser')
                    images = bs.find_all('img', {'src':re.compile('.png')})
                    image1 = images[0]['src']+'\n'
                    em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                    em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                    em.set_footer(text="Click the URL at the top to view the entire course.")

                    em.set_image(url="https://u1sweb.webullfinance.com/social/c607b8a6e46d4f7cacf32b9802c85930.png")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/975e9aeeaea94c1080bdc0310119a73d.png")
                    await interaction.edit_original_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/b37f976d03dc4c749acd953ca2f8e77e.png")
                    await interaction.edit_original_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/2704c83d536e4bbfb2482ae0fb7fcf48.png")
                    await interaction.edit_original_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/3daed2d8a6d745658971071182fb28fe.png")
                    await interaction.edit_original_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/fd6600501a3c41e8829b61457a8d257d.png")
                    await interaction.edit_original_message(embed=em, view=TASchoolView())
                except IndexError:
                    result4 = "N/A"
                    result5 = "N/A"
                    result6 = "N/A"
                    images = "N/A"
                    image1 = "N/A"
                    em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
        elif self.values[0] == "Support and Resistance":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=loTdi1&courseId=XI2xVj")
            d = r.json()
            content = d['content']
            
            topic = d['topic']
            for i in d:
                try:
                    result = re.sub("<.*?>", "", content)[0:999]
                    result2= re.sub("<.*?>", "", content)[1000:1999]
                    result3= re.sub("<.*?>", "", content)[2000:2999]
                    result4= re.sub("<.*?>", "", content)[3000:3999]
                    result5= re.sub("<.*?>", "", content)[4000:4999]
                    result6= re.sub("<.*?>", "", content)[5000:5999]
                    
                    bs = BeautifulSoup(content, 'html.parser')
                    images = bs.find_all('img', {'src':re.compile('.png')})
                    image1 = images[0]['src']+'\n'
                    em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                    em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                    em.set_footer(text="Click the URL at the top to view the entire course.")

                    em.set_image(url="https://u1sweb.webullfinance.com/social/470d03fe5e7741c7a1acd7d4ae9da5c5.png")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/190f78232ebb49e3869add5df0539601.png")
                    await interaction.edit_original_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/c7040d4b34664356a7fc58a94e7df169.png")
                    await interaction.edit_original_message(embed=em, view=TASchoolView())
                except IndexError:
                    result4 = "N/A"
                    result5 = "N/A"
                    result6 = "N/A"
                    images = "N/A"
                    image1 = "N/A"
                    em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                    await interaction.edit_original_message(embed=em, view=TASchoolView())

        elif self.values[0] == "Trading Volume":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=tpi7bx&courseId=XI2xVj")
            d = r.json()
            content = d['content']
            
            topic = d['topic']
            for i in d:
                try:
                    result = re.sub("<.*?>", "", content)[0:999]
                    result2= re.sub("<.*?>", "", content)[1000:1999]
                    result3= re.sub("<.*?>", "", content)[2000:2999]
                    result4= re.sub("<.*?>", "", content)[3000:3999]
                    result5= re.sub("<.*?>", "", content)[4000:4999]
                    result6= re.sub("<.*?>", "", content)[5000:5999]
                    
                    bs = BeautifulSoup(content, 'html.parser')
                    images = bs.find_all('img', {'src':re.compile('.png')})
                    image1 = images[0]['src']+'\n'
                    em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                    em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                    em.set_footer(text="Click the URL at the top to view the entire course.")

                    em.set_image(url="https://u1sweb.webullfinance.com/social/8079e81dbb2645ff898957a1899309a6.png")
                    await interaction.response.edit_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/5a1ea739aee44f329778126988a70be3.png")
                    await interaction.edit_original_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/a70f9a49988c421da577badcf6f5926b.png")
                    await interaction.edit_original_message(embed=em, view=TASchoolView())
                    sleep(8)
                    em.remove_field(index=4)
                    em.set_image(url="https://u1sweb.webullfinance.com/social/1f0c897209fa4e3e887a7096619d98af.png")
                    await interaction.edit_original_message(embed=em, view=TASchoolView())

                except IndexError:
                    result4 = "N/A"
                    result5 = "N/A"
                    result6 = "N/A"
                    images = "N/A"
                    image1 = "N/A"
                    em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                    em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                    em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                    em.set_footer(text="Click the URL at the top to view the entire course.")

                    em.set_image(url=image1)
                    await interaction.response.edit_message(embed=em, view=TASchoolView())


class ETFsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        self.add_item(ETFSelect())
    
    
    
    
    @disnake.ui.button(label="What is an ETF?", style=disnake.ButtonStyle.grey)
    async def whatis(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=MKieXQ&courseId=dTCNgc")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url=image1)
        await interaction.response.edit_message(embed=em, view=CoursesView())
    
    @disnake.ui.button(label="How to find an ETF", style=disnake.ButtonStyle.blurple)
    async def hwofind(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=FWIIwu&courseId=dTCNgc")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        image2 = images[1]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url=image1)
        await interaction.response.edit_message(embed=em, view=CoursesView())
    
    @disnake.ui.button(label="Sector ETFs", style=disnake.ButtonStyle.blurple)
    async def sectoretfs(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=EXKszN&courseId=dTCNgc")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        image2 = images[1]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url=image1)
        await interaction.response.edit_message(embed=em, view=CoursesView())
    
    
    @disnake.ui.button(label="Investing With Sector ETFs", style=disnake.ButtonStyle.green)
    async def sectinvest(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=4yncNq&courseId=dTCNgc")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        image2 = images[1]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url=image1)
        await interaction.response.edit_message(embed=em, view=CoursesView())
    
    
    @disnake.ui.button(label="How is an ETF created?", style=disnake.ButtonStyle.blurple)
    async def howcreated(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=wI9tkj&courseId=lJe5tB")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        image2 = images[1]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url=image1)
        await interaction.response.edit_message(embed=em, view=CoursesView())
    
    
    @disnake.ui.button(label="Index ETFs: A Friendly Way to Start Your Investment", style=disnake.ButtonStyle.grey)
    async def index(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=N2QNkc&courseId=dTCNgc")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        image2 = images[1]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url=image1)
        await interaction.response.edit_message(embed=em, view=CoursesView())
    
    @disnake.ui.button(label="Short and Long Index ETFs", style=disnake.ButtonStyle.green)
    async def shortlong(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=6whNo9&courseId=dTCNgc")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        image2 = images[1]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url=image1)
        await interaction.response.edit_message(embed=em, view=CoursesView())
    
    
    
    @disnake.ui.button(label="Trading Long ETFs", style=disnake.ButtonStyle.green)
    async def long(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=DiOF5m&courseId=dTCNgc")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        image2 = images[1]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url=image1)
        await interaction.response.edit_message(embed=em, view=CoursesView())
    
    
    @disnake.ui.button(label="Trading Short ETFs", style=disnake.ButtonStyle.red)
    async def short(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=9ektyK&courseId=dTCNgc")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        image2 = images[1]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url=image1)
        await interaction.response.edit_message(embed=em, view=CoursesView())
    
    
    @disnake.ui.button(label="Investing in ETFs: Liquidity is Key", style=disnake.ButtonStyle.blurple)
    async def liquidity(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=qc7J8a&courseId=4Df8lE")
    
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        image2 = images[1]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url=image1)
        await interaction.response.edit_message(embed=em, view=CoursesView())
    
    @disnake.ui.button(label="What is an iNAV?", style=disnake.ButtonStyle.green)
    async def inav(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=eFhOFP&courseId=lJe5tB")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        image2 = images[1]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url=image1)
        await interaction.response.edit_message(embed=em, view=CoursesView())
    
    
    @disnake.ui.button(label="Leveraged ETFs", style=disnake.ButtonStyle.red)
    async def leveraged(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=MKieXQ&courseId=ohjWLA")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        image2 = images[1]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url=image1)
        await interaction.response.edit_message(embed=em, view=CoursesView())


    @disnake.ui.button(label="How to Practice ETF Trading", style=disnake.ButtonStyle.blurple)
    async def stkt(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=Sj50cs&courseId=dTCNgc")
        d = r.json()
        content = d['content']
        
        topic = d['topic']
        result = re.sub("<.*?>", "", content)#
        
        bs = BeautifulSoup(content, 'html.parser')
        images = bs.find_all('img', {'src':re.compile('.png')})
        image1 = images[0]['src']+'\n'
        image2 = images[1]['src']+'\n'
        em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
        em.set_image(url=image1)
        await interaction.response.edit_message(embed=em, view=CoursesView())

    @disnake.ui.button(style=disnake.ButtonStyle.red, label=f"🔙")
    async def back2(self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message(view=MainSelectView())


class SchoolingView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)


    @disnake.ui.button(label ="How to Get Started with Webull ETFs?", style=disnake.ButtonStyle.blurple)
    async def etf0(self,button: disnake.Button,  interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title=f"ETF", description=f"```py\nGo to the 'Hot ETFs' list on Webull. Choose an index that you want to trade.Filter the long/short ETFs out according to your expectations of the market.```",color=disnake.Colour.dark_blue())
        await interaction.response.edit_message(embed=em, view=self)
    @disnake.ui.button(label ="Index ETFs", style=disnake.ButtonStyle.red)
    async def etf1(self,button: disnake.Button,  interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title=f"ETF", color=disnake.Colour.dark_blue())
        em.set_image(url="https://u1sweb.webullfinance.com/social/4cbadac7d4fd4c8ca442b3fcbced227d.png")
        em.add_field(name="Index ETFs", value=f"```py\n$Spdr S&P 500 Etf tracks the S&P 500 Index (SPX) by holding all members of the underlying index at their target weights. Its share price is intended to be 1/10th of the index. As we can see below, the price changes of the two have been highly consistent over the last 4 years (July 2018 to July 2022).```")
        await interaction.response.edit_message(embed=em, view=self)
        await asyncio.sleep(12)
        em.clear_fields()
        em.set_image(url="https://u1sweb.webullfinance.com/social/d41e09683ecc444d89f78f6a6fe876ee.png")
        em.add_field(name="Index ETFs", value=f"```py\n Among multiple ETFs that track Nasdaq indexes, the most famous one is $Invesco QQQ Trust. It tracks the Nasdaq-100 Index (NDX), which comprises 100 of the largest non-financial companies included in the Nasdaq Composite Index. It currently trades at approximately 1/40th of the value of the NASDAQ-100 Index. Over the last 4 years (July 2018 to July 2022), QQQ has closely followed the movements of the Nasdaq-100 Index.```")
        await interaction.edit_original_message(embed=em, view=self)
        await asyncio.sleep(12)
        em.clear_fields()
        em.set_image(url="https://u1sweb.webullfinance.com/social/8636943bccef45e5adc1923cfc63d6db.png")
        em.add_field(name="Differences in ETFs", value="```py\n Index ETFs with similar symbols can be confusing. Here we’ve prepared a list of them so that you can see the difference.```")
        await interaction.edit_original_message(embed=em, view=self)

    @disnake.ui.button(label ="Leveraged ETFs", style=disnake.ButtonStyle.red)
    async def etf2(self, button: disnake.Button, interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title=f"Leveraged ETFs", color=disnake.Colour.dark_blue())
        em.set_image(url="https://u1sweb.webullfinance.com/social/f21a48458eb34bf79671760ff3f75e1e.gif")
        await interaction.response.edit_message(embed=em, view=self)


    @disnake.ui.button(label="ETF Liquidity", style=disnake.ButtonStyle.green)
    async def etf4(self, button: disnake.Button, interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title=f"Liquidity is KEY for ETFs", color = disnake.Colour.dark_blue())
        em.set_image(url="https://u1sweb.webullfinance.com/social/459ca8f33d4c42deadfeb214bfbc17a5.gif")
        await interaction.response.edit_message(embed=em, view=self)

    @disnake.ui.button(label="Trading Longs", style=disnake.ButtonStyle.green)
    async def etf5(self, button: disnake.Button, interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title=f"Trading Long ETFs", description=f"```py\nGo to the 'ETFs Top Movers' list on Webull.\n\nChoose the index you want to trade.\n\nFilter the long ETFs according to your market expectations.```",color = disnake.Colour.dark_blue())
        em.set_image(url="https://u1sweb.webullfinance.com/social/0ad497f4e9024ce5a39b64483c00e7b3.gif")
        await interaction.response.edit_message(embed=em, view=self)

    @disnake.ui.button(label="Trading Shorts", style=disnake.ButtonStyle.red)
    async def etf6(self, button: disnake.Button, interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title=f"Trading Short ETFs", description=f"```py\nGo to the 'ETFs Top Movers' list on Webull.\n\nChoose the index you want to trade.\n\nFilter the long ETFs according to your market expectations.```",color = disnake.Colour.dark_blue())
        em.set_image(url="https://u1sweb.webullfinance.com/social/221541a5cdab4e6aa24f54769298c225.png")
        await interaction.response.edit_message(embed=em, view=self)
        sleep(8)
        em.add_field(name="How are short ETFs different from shorting?", value=f"```py\nThe concept of short ETFs and shorting stocks have many similarities. In both cases, investors expect the price to go down."

"In practice, they do have their differences. With ETFs, buying short and long ETFs are the same in operation. You only need to hit the “buy” button. However, with shorting stocks, you’ll need a margin account."

"The risks are also different. If you buy short ETFs, the maximum loss you could suffer is the principal you invested. However, if you short a stock, you need to buy back the stock at a later date. Since the stock price is not certain, your losses are uncapped.```")
        em.set_image(url="https://u1sweb.webullfinance.com/social/89cea3b300554752bd7f1a7eccf5779e.png")
        await interaction.edit_original_message(embed=em, view=self)
    @disnake.ui.button(label="Trading Longs", style=disnake.ButtonStyle.green)
    async def etf7(self, button: disnake.Button, interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title=f"Trading Long ETFs", description=f"```py\nGo to the 'ETFs Top Movers' list on Webull.\n\nChoose the index you want to trade.\n\nFilter the long ETFs according to your market expectations.```",color = disnake.Colour.dark_blue())
        em.set_image(url="https://u1sweb.webullfinance.com/social/0ad497f4e9024ce5a39b64483c00e7b3.gif")
        await interaction.response.edit_message(embed=em, view=self)


class OptionsPaperView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="Options Paper Trading", style=disnake.ButtonStyle.green)
    async def optionspaper1( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Options Paper Trading", description="Options paper trading is available now! It allows our clients to experience the options trading with virtual funds. Whether you have traded options or not, you can paper trade options to explore and **learn at 0-cost.** \n\n ** Just don’t forget the risks of options trading when you decide to do real options trading.**", color=disnake.Colour.random())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=OptionsPaperView())

    @disnake.ui.button(label="1️⃣", style=disnake.ButtonStyle.green)
    async def optionspaper2( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="1. Place an options paper trade.", description="**(Tap Menu > Paper Trade > Option Trade).**", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/c305b678508e45dc9cb49fd34831a06a.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=OptionsPaperView())

    @disnake.ui.button(label="2️⃣", style=disnake.ButtonStyle.red)
    async def optionspaper3( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="2. Cancel or edit a paper trade order.", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/de8a4d057ee84e75ab0312ac824c6247.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=OptionsPaperView())

    @disnake.ui.button(label="3️⃣", style=disnake.ButtonStyle.red)
    async def optionspaper4( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="3. Close a contract.", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/38dab1d4565542efa8a0e702f2ddcd66.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=OptionsPaperView())

    @disnake.ui.button(label="4️⃣", style=disnake.ButtonStyle.blurple)
    async def optionspaper7( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="4. Check an options’ P/L.", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/81766421e4b74b3684649568d2557d09.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=OptionsPaperView())


    @disnake.ui.button(label="Frequently Asked Questions", style=disnake.ButtonStyle.blurple)
    async def optionspaper8( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Frequently Asked Questions", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/81766421e4b74b3684649568d2557d09.gif")
        embed.add_field(name="Q: Can I paper trade options during extended hours?", value="A: No, there is no extended market hours trading for options. You can trade options during regular market hours (9:30 to 16:00 ET).", inline=False)
        embed.add_field(name="Q: How many options order types are there?", value="A: Limit and market order.", inline=False)
        embed.add_field(name="Q: Are the quotes the same as the real market quotes?", value="A: The quotes in paper trading are the same as the real market quotes. You will be offered the same real-time quote if you have subscribed to the OPRA quotes on your real account, or you will see the quotes with 15 mins delay.", inline=False)
        embed.add_field(name="Q: What options trading strategies does paper trading support?", value="A: You can trade long calls and long puts in paper trading.", inline=False)
        embed.add_field(name="Q: How to exercise or early exercise my contracts?", value="A: We don’t support exercising options currently. The options contracts will be liquidated at the closing price on the expiration date.", inline=False)
        embed.add_field(name="Q: Can I edit my opening orders?", value="A: You can edit the limit order’s price and quantity, but market orders can only be edited by the quantity currently.", inline=False)
        embed.add_field(name="Q: What happens to my options positions if the company has corporate actions?", value="A: The contract will be liquidated at the closing price of the day.", inline=False)
        embed.add_field(name="Q: Can I open a position with non-standard options?", value="A: No, we don’t support opening a new position with non-standard options currently.", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.send_message(embed=embed, view=OptionsPaperView())
   
    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"Welcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. \n\n Simply click the buttons to navigate where desired. \n\n \*\*/fudstop\*\*\.", color = disnake.Colour.dark_green())
        
        em.add_field(name="Navigation Tooltip:", value="You just went **🏡 Home** from the **Options Paper Trading Menu**")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )
    
    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.grey, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em= disnake.Embed(title="You just went **BACK** from **Options Paper Trading Explanation**", color=disnake.Colour.dark_blue())
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        
        await interaction.response.edit_message(embed = em, view=OptionsView())





class ChainView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="How to change the list view of your options chain", style=disnake.ButtonStyle.blurple)
    async def chain1( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="How to change the list view of your options chain", description="Webull provides two list views for options chains: \n\n ** List view and Straddle view.** \n\n The Straddle View is the default display, but you can also set the chain to display as List view to fit your desired trading style.", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/3e256bdb74014ce78716421a147a802a.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=ChainView())

    @disnake.ui.button(label="How do you access a contract quotes page?", style=disnake.ButtonStyle.blurple)
    async def chain2( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="How do you access a contract quotes page?", description="You can access the trade page with one click of a contract and access the contract quotes page with a double-click.", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/85c5a92326ae40cab9d34a936d8a18c1.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=ChainView())

    @disnake.ui.button(label="How to Read an Options Chain", style=disnake.ButtonStyle.blurple)
    async def chain3( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="How to Read an Options Chain", description="The Left side shows call contracts; the Right side shows put contracts.", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/8b2070443ee1425e83818e399eb79c86.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=ChainView())

    @disnake.ui.button(label="Strike price and Days to expiration", style=disnake.ButtonStyle.blurple)
    async def chain4( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Strike price and Days to expiration", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/e23ce5519e5748ee8a46a9590dcc7a4d.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=ChainView())

    @disnake.ui.button(label="Expiration date and Multiplier", style=disnake.ButtonStyle.blurple)
    async def chain4( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Expiration date and Multiplier", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/a0a9fc2afcbe4897823f627ecc1494ec.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=ChainView())

    @disnake.ui.button(label="ITM and OTM contracts", style=disnake.ButtonStyle.blurple)
    async def chain5( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="ITM and OTM contracts", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/a9bf13a56aba4d6ca8915567ac02ca46.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=ChainView())

    @disnake.ui.button(label="Strategies, option class, contract quotes, and settings.", style=disnake.ButtonStyle.blurple)
    async def chain6( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Strategies, option class, contract quotes, and settings.", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/bb5e8225191542e78549b9fd931139b9.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=ChainView())

    @disnake.ui.button(label="Expiration date and Multiplier", style=disnake.ButtonStyle.blurple)
    async def chain7( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Expiration date and Multiplier", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/a0a9fc2afcbe4897823f627ecc1494ec.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=ChainView())

    @disnake.ui.button(label="How do you customize the options chain?", style=disnake.ButtonStyle.blurple)
    async def chain8( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="How do you customize the options chain?", description="Different settings help investors customize an options chain to fit their trading style. \n\n\n There are 5 customizable items in the options chain. Go ahead - click the buttons, dad or mom.", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/a0a9fc2afcbe4897823f627ecc1494ec.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CustomizeView())
    
    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"Welcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. \n\n Simply click the buttons to navigate where desired. \n\n \*\*/fudstop\*\*\.", color = disnake.Colour.dark_green())
        
        em.add_field(name="Navigation Tooltip:", value="You just went **🏡 Home** from the **Options Chain Menu**")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )
    
    
    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em= disnake.Embed(title="You just went **BACK** from **Options Chain Explanation**", color=disnake.Colour.dark_blue())
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        
        await interaction.response.edit_message(embed = em, view=LearnView())




class CallView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="Option Learning Begins at Calls", style=disnake.ButtonStyle.blurple)
    async def lesson1( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Introduction", description="**Call options are financial contracts that give the option buyer the right but not the obligation to buy a stock, bond, commodity, or other asset or instrument at a specified price within a specific time period. The stock, bond, or commodity is called the underlying asset. A call buyer profits when the underlying asset increases in price.**", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/8ef4261af01744179a528a3bfe6fef20.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CallView())

    @disnake.ui.button(label="Call Buyer Profit & Loss Chart", style=disnake.ButtonStyle.blurple)
    async def lesson2( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction):
        embed = disnake.Embed(title="Call Buyer Profit & Loss Chart", description="**Call options are financial contracts that give the option buyer the right but not the obligation to buy a stock, bond, commodity, or other asset or instrument at a specified price within a specific time period. The stock, bond, or commodity is called the underlying asset. A call buyer profits when the underlying asset increases in price.**", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/8097353239314e1d95279985a3f2b4d5.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CallView())

    @disnake.ui.button(label="Buying a Call vs Buying a Stock", style=disnake.ButtonStyle.blurple)
    async def lesson3( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction):
        embed = disnake.Embed(title="Buying a Call vs Buying a Stock", description="-", color=disnake.Colour.random())
        embed.set_image(url="https://u1sweb.webullfinance.com/social/69cdd8fca1ec4406a1324a6d0aced9f3.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CallView())

    @disnake.ui.button(label="Buy a Call in 5 Steps", style=disnake.ButtonStyle.blurple)
    async def lesson4( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction):
        embed = disnake.Embed(title="Buy a Call in 5 Steps", description="-", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/k1vqTTX/8db29eb6d4a04fef9864406acd0a78db.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CallView())

    @disnake.ui.button(label="Friend and Foe: Premium and Time", style=disnake.ButtonStyle.blurple)
    async def lesson5( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction):
        await interaction.response.edit_message("https://i.ibb.co/25tV1v8/components-of-premium.png")
        await asyncio.sleep(10)
        await interaction.edit_original_message("https://i.ibb.co/9G30GqL/Time-passing.png")
        await asyncio.sleep(10)
        await interaction.response.edit_original_message("https://i.ibb.co/25tV1v8/components-of-premium.png")
        await asyncio.sleep(10)
        await interaction.edit_original_message("https://i.ibb.co/9G30GqL/Time-passing.png")

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"Welcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. \n\n Simply click the buttons to navigate where desired. \n\n \*\*/fudstop\*\*\.", color = disnake.Colour.dark_green())
        
        em.add_field(name="Navigation Tooltip:", value="You just went **🏡 Home** from the **Call Option EDU Menu**")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em= disnake.Embed(title="You just went **BACK** from **Call Option Explanation**", color=disnake.Colour.dark_blue())
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        
        await interaction.response.edit_message(embed = em, view=OptionsView())

class GreeksView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="Delta", style=disnake.ButtonStyle.green)
    async def delta( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):  
        embed = disnake.Embed(title="Delta in Options", description="The delta, symbol Δ, of an option measures the rate of change of its theoretical value with respect to a change in the price of the underlying stock by $1. Delta is the first derivative of an option’s value or V with respect to the price of the underlying asset S. \n\n This is the equation used to compute delta: \n\n** Δ = ∂ V / ∂ S ** \n\n The delta of a vanilla option can range between **0.0 and 1.0** for a long call or a short put position, and between **0.0 and −1.0** for a long put or short call position. \n\n Its value will depend on how close the option’s strike price is to the current price of the underlying asset. \n\n If those prices are equal in the case of an at-the-money (ATM) option, then the delta is usually **0.5 or 50%**. \n\n For example, if you own a portfolio with 100 call options each on 100 shares of ABC stock that have a 0.5 or 50% delta, then the value of the option contract will theoretically rise in value by .50 if the stock price increases by $1. \n Also, the total delta of a portfolio of various option positions with the same underlying asset is computed by summing up the deltas of each individual position. This practice is used by almost all option portfolio risk managers. \n The absolute value of the delta can also be used by traders as a rough estimate for the probability of an option ending up in-the-money (ITM) at expiration. \n\n For example, **an option with a 0.15 or 15% delta could be thought of as having approximately a 15% chance of being exercised.** \n\n Furthermore, due to a rule known as put-call parity, if you know the delta value of an option, you can compute the delta of the option with the opposite right that has the same strike price. You do this by subtracting the call option’s delta from 1 to get the delta of the put with the same strike price or by subtracting the put option’s delta from 1 to get the corresponding call option’s delta.  So for example, if you have a delta of .4 on a call option, then delta on the corresponding put option will be .6. \n\n  **The sum of the deltas between the corresponding put and call options can not exceed 1.**", color=disnake.Colour.random())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=GreeksView())

    @disnake.ui.button(label="Gamma", style=disnake.ButtonStyle.green)
    async def gamma( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ): 
        embed = disnake.Embed(title="Gamma", description="The gamma, symbol γ,  of an option **measures the rate of change in the option’s delta with respect to an incremental change in the price of the underlying asset.** \n Gamma is the **second derivative** of the value function with respect to the underlying asset’s price S and the only second-order derivative commonly used by options traders. \n\n This is the equation used to compute gamma: \n\n ** γ = − ∂2 V / ∂2 S** \n\n In general, long option positions have positive gamma, while short option positions have negative gamma. \n\n **The gamma of an option is the highest when the option nears being at-the-money**, and it falls as an option goes further in-the-money or out-of-the-money (OTM).", color=disnake.Colour.random()) 
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=GreeksView())

    @disnake.ui.button(label="Rho", style=disnake.ButtonStyle.green)
    async def rho( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        embed = disnake.Embed(title="Rho", description="Rho, symbol ρ, **measures an option’s sensitivity to the risk-free interest rate.** \n Rho is therefore the derivative of an option’s value with respect to the risk-free interest rate pertaining to the option’s remaining time until expiration. \n\n Rho can be called the **interest rate sensitivity** of an option. \n\n This is the equation used to compute rho: \n\n **ρ = ∂ V / ∂ r** \n\n In most cases, rho reflects a relatively minor risk for options traders because an option’s price is typically less sensitive to interest rate shifts than to changes in other pricing parameters. \n\n Also, options traders typically express rho as the change in an option’s value as the risk-free interest rate goes up or down by 1 percent per annum. \n\n While stock options only have the rho Greek, currency options have another Greek called phi that relates to the foreign currency interest rate, while the rho for currency options relates to the domestic currency interest rate.", color=disnake.Colour.random()) 
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=GreeksView())

    @disnake.ui.button(label="Theta", style=disnake.ButtonStyle.green)
    async def theta( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Theta", description="The theta, symbol Θ, of an option **measures the sensitivity of its value to the passage of time, which is usually expressed in one-day increments.** \n\n Theta is the first derivative of the option value function with respect to time t. \n\n Theta is also sometimes called the **time decay** of an option. This is the equation used to compute theta: \n\n ** Θ = − ∂ V / ∂ t ** \n\n For vanilla options, the theta of a long option position is generally less than or equal to zero, while the theta of a short option position is almost always greater than or equal to zero.\n\n Options traders with a long option position are said to be short theta, and their portfolio will decay in value as time passes if other factors are held steady. \n\n Conversely, traders with a short option position are long theta, and they will experience a rise in their portfolio’s value over time if other factors remain constant.", color=disnake.Colour.random())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=GreeksView())

    @disnake.ui.button(label="Vega", style=disnake.ButtonStyle.green)
    async def vega( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ): 
        embed = disnake.Embed(title="Vega", description="Vega, symbol 𝜈, **measures an option position’s sensitivity to movements in implied volatility.** \n Vega is the first derivative of an option’s value with respect to the implied volatility or 𝜎 of the underlying asset. \n\n Those actually familiar with the Greek language might note that there is no Greek letter called vega. \n\n To get around this, the symbol “𝜈 for the Greek letter nu is typically used to represent vega. \n\n Vega is also sometimes called the **volatility sensitivity** of an option. \n This is the equation used to compute vega: \n\n **𝜈 =  ∂ V / ∂ 𝜎** \n\n Most option traders will express vega as the change in an option’s value as implied volatility goes up or down by 1 percent. \n\n **Vanilla options will generally gain in value as implied volatility increases.** \n\n Option portfolio traders tend to watch their vega closely to make sure they are either hedged or positioned correctly according to their implied volatility view. \n\n Also, **those trading very volatility-sensitive option strategies like at-the-money straddles might want to keep an eye on their vega exposure, especially if they intend to trade out of the straddle before expiration.**", color=disnake.Colour.random())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=GreeksView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"Welcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. \n\n Simply click the buttons to navigate where desired. \n\n \*\*/fudstop\*\*\.", color = disnake.Colour.dark_green())
        
        em.add_field(name="Navigation Tooltip:", value="You just went **🏡 Home** from the **Greeks Education Menu**")
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        em= disnake.Embed(title="You just went **BACK** from **Options Greeks Explanation**", color=disnake.Colour.dark_blue())
        em.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        
        await interaction.response.edit_message(embed = em, view=LearnView())



class CandleDropdownView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(CandleDropdown())
        self.add_item(TechDropdown())
        self.add_item(TrendDropdown())






class TrendDropdownView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(TrendDropdown())
        self.add_item(CandleDropdown())
        self.add_item(TechDropdown())
        self.add_item(WebullTut())


class Weballs(disnake.ui.Select):
    async def callback(self, ticker):
        pass

class Weballs2(disnake.ui.Select):
    async def callback(self, ticker):
        pass

class Weballs3(disnake.ui.Select):
    async def callback(self, ticker):
        pass


class Weballs4(disnake.ui.Select):
    async def callback(self, ticker):
        pass

class Weballs5(disnake.ui.Select):
    async def callback(self, ticker):
        pass

class Dividend(disnake.ui.Select):
    async def callback(self):
        pass

class OptionsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(OptionsDropdown())
        self.add_item(LearningDropdown())



    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="You just went **🏡 Home** from the **Options Menu**")

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="📌 Pin It", style=disnake.ButtonStyle.red, )
    async def pin(self,interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title="You Just Pinned A Message! 📌 Now you can search for it with Discord search if needed!", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(view=None, embed=em)




class OStratsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="🐂 Long Call 1️⃣", style=disnake.ButtonStyle.green)
    async def opts( self,interaction: disnake.ApplicationCommandInteraction ):
        embeds=[
        disnake.Embed(title="Introduction", description="You believe that the stock you have been researching is going to increase in price during a given time frame regardless of general market conditions. You are familiar with long stock positions but are wondering if there is a more efficient trade to use your available money to express this investment idea.\n\n"

"Options, a type of derivatives contract, are one possible solution for efficiently gaining exposure to stock performance. They are classified as derivatives because the value of the options contract is derived or based on the price of something else (in this case, a stock). Remember that with all choices there are risks and benefits that we need to fully understand. This allows us to make informed decisions before using products to express investment opinions. \n\n"

"Call options give the holder the right, but not obligation, to purchase a security (like a stock) at a predetermined price known as the strike price on a future date in time. Let’s explore this building block of financial choice in greater detail together. \n\n **Fun fact: Why is it called a “call? Quite simply because the purchaser of a call option has the right to “call stock away from the seller of the call option.**"),
        disnake.Embed(title="What is a Long Call?", description="First, let’s learn options contract language to understand what we are buying when we purchase, or are “long, a call option. \n\n Each standardized listed options contract has a minimum set of specifications that sets the terms of the agreement between the buyer and the seller:"),
        disnake.Embed(title="Quantity – The number of contracts you are purchasing."),
        disnake.Embed(title="Underlying", description=" – The security (stock, index, etc.) that the option’s value is derived from."),
        disnake.Embed(title="Expiration", description=" – The specific date and time an options contract expires."),
        disnake.Embed(title="Strike Price", description=" – The price at which an option can be exercised -or converted to the underlying."),
        disnake.Embed(title="Type", description=" – Call or Put"),
        disnake.Embed(title="Price", description=" – The price that the option is bought (or sold) for"),
        disnake.Embed(title="Style", description=" – American (can exercise your right on or before expiration) or European (can only exercise your right on expiration"),
        disnake.Embed(title="Settlement Style", description=" – Physical (the underlying security is delivered) or Cash"),
        disnake.Embed(title="Contract Multiplier", description=" – The number of underlying shares or units represented by one contract; for our examples we will assume a 100 multiplier, meaning each contract represents 100 shares or units of the underlying"),
        disnake.Embed(title="🐂", description="With that in mind, we can now explore what it means to purchase a call or have a long call position. A long call is the right, but not the obligation, to purchase stock at the strike price on a future date in time. \n\n"
"When you purchase long call contracts, it will cost you money to establish this position. Let’s refer to this initial cost as the premium paid. The net premium paid also includes the price of the option plus fees and commissions."),
        disnake.Embed(title="🐂", description="As a strategy, the long call is considered a “single-leg strategy because it utilizes only one options contract. As we build on our understanding, we will explore two-leg and multi-leg strategies as well."),
        disnake.Embed(title="🐂", description="Call options, by design, are capital-efficient ways to express a bullish opinion on a stock or the market; we anticipate value increasing and price rising. This is one benefit of long call options. The trade-off is that it costs money to purchase this access (right) to the unlimited upside potential of the underlying. Additionally, if your forecast is not right you can lose your investment very quickly and by expiration date. Another benefit of long call options is they limit your risk (or loss) exposure to declines in the underlying price, should the value of the stock decrease."),
        disnake.Embed(title="Example:", description=
"**Buy 10 XYZ January 50 calls for $1.25.** "

"**Assume the current XYZ stock price is $50**\n\n"
"**Quantity – 10 contracts**\n"
"**Underlying – XYZ stock**\n"
"**Expiration – January**\n"
"**Strike Price – 50**\n"
"**Type – Call**\n"
"**Price – $1.25 per contract**\n"
"**Style – American**\n"
"**Settlement Style – Physical shares**\n"
"**Contract Multiplier – 100)**\n"),
        disnake.Embed(title="🐂", description="How do we purchase the right to buy 1000 shares of XYZ stock for $50 in January?"),
        disnake.Embed(title="🐂", description="*Note: Total shares represented = quantity of options contracts x options contract multiplier = 10 x 100 = 1000)*"),
        disnake.Embed(title="🐂", description="You must first complete your transaction by paying $1,250 plus fees and commissions. This amount ($1,250) is considerably less than the $50,000 plus fees and commission that it would cost you to purchase 1000 shares of XYZ today."),
        disnake.Embed(title="🐂", description="Before we choose to complete the transaction to purchase long calls, let’s look a bit further at the decisions we face before and on the contract’s expiration date:"),]
        await interaction.response.send_message(embed=embeds[0], view=Menu(embeds))
    @disnake.ui.button(label="🤡Losng Call: Losing", style=disnake.ButtonStyle.red, )
    async def losingcall( self,interaction: disnake.ApplicationCommandInteraction ):
        embed=disnake.Embed(title="Outcome 2: Loss🤡", description="With a long call position, you have paid money (net premium) to establish an options position that gives you access to the stock’s unlimited upside profit potential. \n\n  This means that your potential losses (or downside risk exposure if the stock declines in price) are known and limited to the net premium paid.")
        embed.add_field(name="Max Loss = Net Premium Paid", value="Example: \n\n\n *Stock XYZ is trading at $50 and you purchase 10 XYZ Jan 50 calls for $1.25.*\n **At expiration, stock XYZ is trading lower at $43.**")
        embed.set_image(url="https://social-media.webullfintech.com/social/3123a4b332da4ee2b28aa162bab3544f.png")


        await interaction.response.send_message(view=OStratsView(), embed=embed)
    @disnake.ui.button(label="🚀 Long Call: Profiting", style=disnake.ButtonStyle.green, )
    async def winningcall( self,interaction: disnake.ApplicationCommandInteraction ):
        embed=disnake.Embed(title="Outcome 1: Profit🚀", description="value and rise in price. There is unlimited profit potential. Let’s now assume we are correct in our sentiment and the stock price rises.\n\n"

"**To calculate our profit on the position when we purchased our contracts without borrowing funds, we use the following formula:**")
        embed.add_field(name="Profit = Current Stock Price – Strike Price – Net Premium Paid",value="**Example:** \n\n\n *Stock XYZ is trading at $50 and you purchase 10 XYZ Jan 50 calls for $1.25.\n"

"A week later, stock XYZ is trading higher at $58.*.")
        embed.add_field(name="Note:", value="‌*Unrealized profits are those that potentially exist; realized profits occur when you close out or trade out of the position.\n\n"

"**Our maximum profit is unlimited. Remember, the price of XYZ can keep increasing in value.**")
        embed.set_image(url="https://social-media.webullfintech.com/social/6c6923e19b9144308cb66886a6729766.png")


        await interaction.response.send_message(view=OStratsView(), embed=embed)


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu",description=f"```py\nWelcome to FUDSTOP. This is an Application you can use to view important market data, discord tutorials, educational youtube videos, and so much more. ``` ```py\nSimply click the buttons to navigate where desired.```", color = disnake.Colour.dark_green())

        em.add_field(name="Navigation Tooltip:", value="You just went **🏡 Home** from the **Options Menu**")

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙 Go Back", style=disnake.ButtonStyle.blurple, )
    async def pin( self,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="You just went **BACK** from **Bear Market Menu**", color=disnake.Colour.dark_blue())


        await interaction.response.edit_message(view=LearnView(), embed=embed)



import disnake
from disnake.ext import commands


class WebullDropdown(disnake.ui.Select):
    def __init__(self):

# Set the options that will be presented inside the dropdown
        options = [
            disnake.SelectOption(
            label="⚙️ Options Chain Setup", description="🏡 The Main Menu for learning all about the discord, trading, and markets.",
            ),
            disnake.SelectOption(
            label="⚙️ Analysis Tools", description="⚔️ The Main Trading Menu - Select from a variety of categories such as high FTD stocks.",
            ),
            disnake.SelectOption(
            label="⚙️ Order Types", description="💰Get the run-down on the Real-Time Play Alerts provided by TradyTics",
            ),
                    disnake.SelectOption(
            label="⚙️ Options Strategies", description="💰Get the run-down on the Real-Time Play Alerts provided by TradyTics",
            ),

        ]

        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="⚙️ 🇼  🇪  🇧  🇺  🇱  🇱  ⚙️",
            min_values=1,
            max_values=1,
            custom_id="mainmenu99",
            options=options,
        )

    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "⚙️ Options Chain Setup":
            embed = disnake.Embed(title="What is an options chain?", description="**An options chain, also as known as an options table, is a list that includes all available options contracts. \n\n The list will show the options side, expiration date, strike price, and quotes simultaneously. **", color=disnake.Colour.random())
            embed.add_field(name="How do you access the options chain on Webull.", value="Entry: Stock details page>Options>Options Chain")
            embed.set_image(url="https://u1sweb.webullfinance.com/social/cded019eb90f466bab9de4fc27fa3afe.gif")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await inter.response.edit_message(embed=embed, view=ChainView())
        elif self.values[0] == "⚙️ Analysis Tools":
            embed = disnake.Embed(title="Learn about different order types in the market.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


            await inter.response.edit_message(embed=embed, view=OrderView())
        elif self.values[0] =="⚙️ Order Types":
            embed = disnake.Embed(title="Learn about different order types in the market.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


            await inter.response.edit_message(embed=embed, view=OrderView())
        elif self.values[0] =="⚙️Options Strategies":
            embed = disnake.Embed(title="Learn about Options - Webull & OIC", description="Options trading is one of the riskiest and most difficult method of trading that exists. With this will need to come an understanding of what Options are, how they work - which types of options you can use for various types of market situations, and the effect **time** has on options. \n\n\n This is - after all - why they're called *options.* If understood - they can provide paths in a multitude of market scenarios.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


            await inter.response.edit_message(embed=embed, view=OptionsView())

class WebullOrderDropdown(disnake.ui.Select):
    def __init__(self):

        # Set the options that will be presented inside the dropdown
        options = [
            disnake.SelectOption(
            label="⚙️ Market Orders", description="Learn about placing Market Orders in Webull.",
            ),
            disnake.SelectOption(
            label="⚙️ Limit Orders", description="Learn about placing Limit Orders in Webull.",
            ),
            disnake.SelectOption(
            label="⚙️ Stop Orders", description="Learn about plcing Stop Orders in Webull.",
            ),
            disnake.SelectOption(
            label="⚙️ Stop Limit Orders", description="Learn about placing Stop Limit Orders in Webull.",
            ),
            disnake.SelectOption(
            label="⚙️ How to Read the Bid/Ask Spread", description="Learn about placing Stop Limit Orders in Webull.",
            ),


        ]

        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="⚙️ 🇴 🇷 🇩 🇪 🇷 🇸 ⚙️",
            min_values=1,
            max_values=1,
            options=options,
        )

    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "⚙️ Market Orders":
            embed = disnake.Embed(title="Market Orders", description="A market order is an order to buy or sell a stock at the best available price, **which can typically be executed at the time of the order.**", color=disnake.Colour.random())
            embed.set_image(url="https://social-media.webullfintech.com/social/48a18a511df24c7796aca435052bd251.gif")


            await inter.response.edit_message(embed=embed, view=MarketOrderView())
        elif self.values[0] == "⚙️ Limit Orders":
            embed = disnake.Embed(title="Limit Orders", description="A limit order is an order to trade a security at a specified price or better.", color=disnake.Colour.dark_gold())
            embed.set_image(url="https://social-media.webullfintech.com/social/b18a4f33b1af4994b6461600bd8065be.gif")


            await inter.response.edit_message(embed=embed, view=LimitOrderView())
        elif self.values[0] == "⚙️ Stop Orders":
            embed = disnake.Embed(title="Stop Orders", description="A stop order trades at market price once the stock reaches above or below a specified price.", color=disnake.Colour.dark_gold())
            embed.set_image(url="https://social-media.webullfintech.com/social/1b5ffdf31d0a46cfbc9fa5f09a348907.gif")


            await inter.response.edit_message(embed=embed, view=StopOrderView())
        elif self.values[0] == "⚙️ Stop Limit Orders":
            embed = disnake.Embed(title="Stop Limit Orders", description="A stop limit order is similar to a stop order, except that the order is changed to a limit order upon triggering.", color=disnake.Colour.dark_gold())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/6fb6116cf9f74c3cbd3e853e02694aaa.gif")


            await inter.response.edit_message(embed=embed, view=StopLimitOrderView())
        elif self.values[0] == "⚙️ How to Read the Bid/Ask Spread":
            embed = disnake.Embed(title="The Bid/Ask Spread", description="Quite a few people make trade decisions based entirely on the current market prices they see, **neglecting bid and ask information.** \n\n However, it’s important to note that the current market price is the price of the last trade. \n\n Bid and ask, on the other hand, are prices at which investors are willing to trade. \n\n To be specific, the bid is the price a buyer is willing to pay for a stock. The ask is the price a seller will accept for the stock.", color=disnake.Colour.random())


            await inter.response.edit_message(embed=embed, view=BidAskOrderView())






class WebullCustomizeDropdown(disnake.ui.Select):
    def __init__(self):

        # Set the options that will be presented inside the dropdown
        options = [
            disnake.SelectOption(
            label="1️⃣Columns", description="How to organize your columns!",
            ),
            disnake.SelectOption(
            label="2️⃣Strike Numbers", description="Strike numbers.",
            ),
            disnake.SelectOption(
            label="3️⃣Expiration Type", description="Standard and non-standard options.",
            ),
            disnake.SelectOption(
            label="4️⃣Deliverables", description="Learn about deliverables.",
            ),
            disnake.SelectOption(
            label="5️⃣Sorting", description="Learn about sorting the data in the options chain.",
            ),


        ]

        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="⛓️ 🇴 🇵 🇹 🇨 🇭 🇦 🇮 🇳 ⛓️",
            min_values=1,
            max_values=1,
            custom_id="mainmenu41",
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        if self.values[0] == "1️⃣Columns":
            embed = disnake.Embed(title="1️⃣Columns", description="Webull provides over 20+ quotes under options contracts, which allows investors to select and analyze contracts from different quote dimensions. You can select one of them to display on your chain and change the order of the quotes on the page.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/ec78b671ea5c44b1b1b721e6d997f590.gif")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=CustomizeView())
        elif self.values[0] == "2️⃣Strike Numbers":
            embed = disnake.Embed(title="2️⃣Strike Numbers", description="Strike numbers:** 6, 10, 20, 30, 50, and All**. \n\n You can select the number of strikes shown in your options chain.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/8e68ac15466e471eaf39a4f8aa1e0783.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=CustomizeView())
        elif self.values[0] == "3️⃣Expiration Type":
            embed = disnake.Embed(title="3️⃣Expiration Type", description="Expiration Type: Regular, Weekly’s, and Quarterly’s.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/43b33051ce8e48f9a3c3c7210febc576.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=CustomizeView())
        elif self.values[0] == "4️⃣Deliverables":
            embed = disnake.Embed(title="4️⃣Deliverables", description="Deliverables: Standard and non-standard options.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/7642ade56e09409da33d57badada5391.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=CustomizeView())
        elif self.values[0] == "5️⃣Sorting":
            embed = disnake.Embed(title="5️⃣Sorting", description="Sort by Strike Price: Ascending and Descending.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/057d5458f7cf41d6b953abd1c31ae53e.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=CustomizeView())



class ETFSelect(Select):
    def __init__(self):
 
        options = [
        
            disnake.SelectOption(label="What is an ETF?"),
            disnake.SelectOption(label="How to find an ETF"),
            disnake.SelectOption(label="Investing With Sector ETFs"),
            disnake.SelectOption(label="Sector ETFs"),
            disnake.SelectOption(label="How is an ETF created?"),
            disnake.SelectOption(label="How to Practice ETF Trading"),
            disnake.SelectOption(label="Leveraged ETFs"),
            disnake.SelectOption(label="What is an iNAV?"),
            disnake.SelectOption(label="Trading Short ETFs"),
            disnake.SelectOption(label="Trading Long ETFs"),
            disnake.SelectOption(label="Short and Long Index ETFs"),
            disnake.SelectOption(label="Index ETFs: A Friendly Way to Start Your Investment"),
            disnake.SelectOption(label="Investing in ETFs: Liquidity is Key")]

        super().__init__(
            placeholder="🇪  🇹  🇫  🇸 ⚓",
            min_values=1,
            max_values=1,
            options=options)


    async def callback(self, interaction: disnake.MessageCommandInteraction):
        await interaction.response.defer(with_message=True)
        if self.values[0] == "What is an ETF?":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=EXKszN&courseId=dTCNgc")
            d = r.json()
            content = d['content']
            
            topic = d['topic']
            #for item in d:
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]

                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.edit_original_message(embed=em, view=ETFView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                await interaction.edit_original_message(embed=em, view=ETFView())

        elif self.values[0] == "How to find an ETF":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=EXKszN&courseId=dTCNgc")
            d = r.json()
            content = d['content']
            topic = d['topic']
            #for i in d:
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]

                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.edit_original_message(embed=em, view=ETFView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                await interaction.response.edit_message(embed=em, view=ETFView())
                

        elif self.values[0] == "Investing With Sector ETFs":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=EXKszN&courseId=dTCNgc")
            d = r.json()
            content = d['content']

            topic = d['topic']
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]

                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
                em.set_image(url=image1)
                await interaction.edit_original_message(embed=em, view=ETFView())
        

        elif self.values[0] == "How to find an ETF":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=EXKszN&courseId=dTCNgc")
            d = r.json()
            content = d['content']

            topic = d['topic']
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
  
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.edit_original_message(embed=em, view=ETFView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                
        elif self.values[0] == "Short and Long Index ETFs":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=6whNo9&courseId=dTCNgc")
            d = r.json()
            content = d['content']
            topic = d['topic']
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.edit_original_message(embed=em, view=ETFView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                await interaction.edit_original_message(embed=em, view=CoursesView())
        elif self.values[0] == "Trading Short ETFs":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=EXKszN&courseId=dTCNgc")
            d = r.json()
            content = d['content']
            topic = d['topic']
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]

                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}``` ```py\n{result2}``` ```py\n{result3}```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.edit_original_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
            em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}``` ```py\n{result3}```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
            await interaction.edit_original_message(embed=em, view=CoursesView())


        elif self.values[0] == "Trading Long ETFs":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=EXKszN&courseId=dTCNgc")
            d = r.json()
            content = d['content']
            topic = d['topic']
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]

                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"       
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...```", color=disnake.Colour.dark_magenta())
                await interaction.response.edit_message(embed=em, view=CoursesView())
                
        
    
        elif self.values[0] == "Trading Long ETFs":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=EXKszN&courseId=dTCNgc")
            d = r.json()
            content = d['content']
            topic = d['topic']
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}...```", color=disnake.Colour.dark_magenta())
                await interaction.response.edit_message(embed=em, view=CoursesView())
                        
            
        elif self.values[0] == "Trading Long ETFs":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=EXKszN&courseId=dTCNgc")
            d = r.json()
            content = d['content']
            topic = d['topic']
            #for i in d:
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}...```", color=disnake.Colour.dark_magenta())
                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())

        elif self.values[0] == "How is an ETF created?":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=qc7J8a&courseId=4Df8lE")
        
            d = r.json()
            content = d['content']
            topic = d['topic']
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            
        elif self.values[0] == "What is an iNAV?":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=EXKszN&courseId=dTCNgc")
            d = r.json()
            content = d['content']
            topic = d['topic']
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
        
        elif self.values[0] == "How to Practice ETF Trading":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=MKieXQ&courseId=ohjWLA")
            d = r.json()
            content = d['content']
            topic = d['topic']
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
        elif self.values[0] == "Trading Long ETFs":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=EXKszN&courseId=dTCNgc")
            d = r.json()
            content = d['content']
            topic = d['topic']
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
        elif self.values[0] == "Leveraged ETFs":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=Sj50cs&courseId=dTCNgc")
            d = r.json()
            content = d['content']
            topic = d['topic']
            
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())

        elif self.values[0] == "Index ETFs: A Friendly Way to Start Your Investment":

            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=Sj50cs&courseId=dTCNgc")
            d = r.json()
            content = d['content']
            
            topic = d['topic']
            try:
                result = re.sub("<.*?>", "", content)[0:999]
                result2= re.sub("<.*?>", "", content)[1000:1999]
                result3= re.sub("<.*?>", "", content)[2000:2999]
                result4= re.sub("<.*?>", "", content)[3000:3999]
                result5= re.sub("<.*?>", "", content)[4000:4999]
                result6= re.sub("<.*?>", "", content)[5000:5999]
                
                bs = BeautifulSoup(content, 'html.parser')
                images = bs.find_all('img', {'src':re.compile('.png')})
                image1 = images[0]['src']+'\n'
                em = disnake.Embed(title=topic, description=f"```py\n{result}...``` ```py\n{result2}...``` ```py\n{result3}...```", color=disnake.Colour.dark_magenta(), url=f"https://www.webull.com/learn/FWIIwu/dTCNgc/How-to-Find-an-ETF")
                em.add_field(name=f"Continued:", value=f"```py\n{result4}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result5}...```")
                em.add_field(name=f"Continued:", value=f"```py\n{result6}...```")
                em.set_footer(text="Click the URL at the top to view the entire course.")

                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())
            except IndexError:
                result4 = "N/A"
                result5 = "N/A"
                result6 = "N/A"
                images = "N/A"
                image1 = "N/A"
                em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
                em.set_image(url=image1)
                await interaction.response.edit_message(embed=em, view=CoursesView())





class CoveredCallsDropdownView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        # Replace HTML tags with an empty s

        self.add_item(CoveredCallSelect())

class CoveredCallSelect(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(label=f"Why Should Investors Consider Covered Calls and Cash Secured Puts?"),
            disnake.SelectOption(label=f"Pros and Cons: Selling Options for Income"),
            disnake.SelectOption(label=f"Enhance your Income with Covered Calls"),
            disnake.SelectOption(label=f"Selling Cash-Secured Puts for Income: Put Your Idle Cash to Work!"),
            disnake.SelectOption(label=f"How Do You Pick the Right Expiration Date and Strike Price as an Option Seller?"),
            disnake.SelectOption(label=f"The Importance of Strike Selection When Selling Options"),]



        super().__init__(
            placeholder = "🏫 🇨 🇴 🇺 🇷 🇸 🇪 🇸",
            min_values=1,
            max_values=1,
            options=options,
        )
    async def callback(self, interaction:disnake.MessageCommandInteraction):
        if self.values[0] == "Why Should Investors Consider Covered Calls and Cash Secured Puts?":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=9gaM5m&courseId=jZG0Fl")
            d = r.json()
            content = d['content']
            
            topic = d['topic']
            result = re.sub("<.*?>", "", content)[0:4000]
            
            bs = BeautifulSoup(content, 'html.parser')
            images = bs.find_all('img', {'src':re.compile('.png')})
            image1 = images[0]['src']+'\n'
            image2 = images[1]['src']+'\n'
            em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
            em.set_image(url=image1)
            await interaction.response.edit_message(embed=em, view=CoveredCallsDropdownView())
        elif self.values[0] == "Pros and Cons: Selling Options for Income":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=sPdHTR&courseId=jZG0Fl")
            d = r.json()
            content = d['content']
            
            topic = d['topic']
            result = re.sub("<.*?>", "", content)[0:4000]
            
            bs = BeautifulSoup(content, 'html.parser')
            images = bs.find_all('img', {'src':re.compile('.png')})
            image1 = images[0]['src']+'\n'
            image2 = images[1]['src']+'\n'
            em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
            em.set_image(url=image1)
            await interaction.response.edit_message(embed=em, view=CoveredCallsDropdownView())
        elif self.values[0] == "Enhance your Income with Covered Calls":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=CnJOCN&courseId=jZG0Fl")
            d = r.json()
            content = d['content']
            
            topic = d['topic']
            result = re.sub("<.*?>", "", content)[0:4000]
            
            bs = BeautifulSoup(content, 'html.parser')
            images = bs.find_all('img', {'src':re.compile('.png')})
            image1 = images[0]['src']+'\n'
            image2 = images[1]['src']+'\n'
            em = disnake.Embed(title=topic, description=f"```py\n{result}...```", color=disnake.Colour.dark_magenta())
            em.set_image(url=image1)
            await interaction.response.edit_message(embed=em, view=CoveredCallsDropdownView())
        elif self.values[0] == "Selling Cash-Secured Puts for Income: Put Your Idle Cash to Work!":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=nAK39C&courseId=jZG0Fl")
            d = r.json()

            content = d['content']
            
            topic = d['topic']
            result = re.sub("<.*?>", "", content)[0:4000]
            
            bs = BeautifulSoup(content, 'html.parser')
            images = bs.find_all('img', {'src':re.compile('.png')})
            image1 = images[0]['src']+'\n'
            image2 = images[1]['src']+'\n'
            em = disnake.Embed(title=topic, description=f"```py\n{result}...```", color=disnake.Colour.dark_magenta())
            em.set_image(url=image1)
            await interaction.response.edit_message(embed=em, view=CoveredCallsDropdownView())
        elif self.values[0] == "How Do You Pick the Right Expiration Date and Strike Price as an Option Seller?":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=dMir0z&courseId=jZG0Fl")
            d = r.json()
            content = d['content']
            
            topic = d['topic']
            result = re.sub("<.*?>", "", content)[0:4000]
            
            bs = BeautifulSoup(content, 'html.parser')
            images = bs.find_all('img', {'src':re.compile('.png')})
            image1 = images[0]['src']+'\n'
            image2 = images[1]['src']+'\n'
            em = disnake.Embed(title=topic, description=f"```py\n{result}...```", color=disnake.Colour.dark_magenta())
            em.set_image(url=image1)
            await interaction.response.edit_message(embed=em, view=CoveredCallsDropdownView())

        elif self.values[0] == "The Importance of Strike Selection When Selling Options":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=iGCFL7&courseId=jZG0Fl")
            d = r.json()
            content = d['content']
            
            topic = d['topic']
            result = re.sub("<.*?>", "", content)[0:4000]
            
            bs = BeautifulSoup(content, 'html.parser')
            images = bs.find_all('img', {'src':re.compile('.png')})
            image1 = images[0]['src']+'\n'
            image2 = images[1]['src']+'\n'
            em = disnake.Embed(title=topic, description=f"```py\n{result}...```", color=disnake.Colour.dark_magenta())
            em.set_image(url=image1)
            await interaction.response.edit_message(embed=em, view=CoveredCallsDropdownView())



class CoreDropDown(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(
                label="🧠The Alpha Screener and Plays",
                description="Learn about how to use Alphaquery to find play candidates.",
                ),
            disnake.SelectOption(
                label="Stay IN THE MONEY🚮",
                description="Learn why you stick to in the money.",
                ),
            disnake.SelectOption(
                label="❌Exit Strategy❌",
                description="Learn best practices for when to exit if the trade goes against you.",
                ),
            disnake.SelectOption(
                label="Never Buy The Ask🙅‍♂️", description="Don't be an ape. Don't slap that ask.",
                ),
            disnake.SelectOption(
                label="Avoid Corporate Actions⭕", description="Avoid corporate actions! Learn what to look for.",
                ),]
        super().__init__(

            placeholder="🔺 🇨  🇴  🇷  🇪 🔻",
            min_values=1,
            max_values=1,
            custom_id="mainmenu24",
            options=options,
            )

    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "🧠The Alpha Screener and Plays":
            em = disnake.Embed(title="Finding your play opportunities", description="```py\nThe process has been made pretty simple! Simply run the``` ```py\n /fudstop``` ```py\ncommand - and you can run the 'core' and 'put' screeners that will return tickers that fit our core logic criteria.``` ```py\nThe criteria is as follow: \n\n 1. MUST HAVE HAD EARNINGS REPORT WITHIN THE LAST 10 DAYS \n\n 2. MUST HAVE AN RSI LOWER THAN 30, OR GREATER THAN 70. \n\n 3. MUST HAVE A VISIBLE DAILY GAP THAT OCCURS ON EARNINGS OR THE DAY AFTER EARNINGS.``` ```py\nThe screener scans for these specific things OTHER than the gap - which is why you need to make sure when checking plays that you verify with your own eyes that they indeed meet all three criteria. \n\n 2/3 of the criteria has been met for you by default. Use the process and you'll scale consistent gains over-time.```", color=disnake.Colour.random())
            em.set_footer(text="Implemented by FUDSTOP Trading")
            em.add_field(name="IMPORTANT NOTE 📒", value="```py\nUTILIZE PAPER TRADING!!!!!! THESE PLAYS ARE DELIVERED DAILY - YOU CAN EASILY TEST WITH PAPER BEFORE RISKING YOUR OWN CAPITAL.```")

            await inter.response.edit_message(embed=em)
        elif self.values[0] == "❌Exit Strategy❌":

            embed = disnake.Embed(title="❌Exit Strategy❌", color = disnake.Colour.random())
            embed.add_field(name="❌Exit Strategy❌", value="```py\nYour exit strategy is simple - if you are pushed out of the money - EXIT. For example: If you buy a put at $40 and the price goes to $40.50 - SELL.```", inline = True)
            embed.set_image(url="https://i.ibb.co/gSM3S52/CORPACTION.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await inter.response.edit_message(embed=embed, view=AvoidView())
        elif self.values[0] == "Stay IN THE MONEY🚮":
            embed = disnake.Embed(title="Stay IN THE MONEY🚮", color = disnake.Colour.random())
            embed.add_field(name="Stay IN THE MONEY🚮", value="```py\nGet in the habit of buying IN THE MONEY``` ```py\nYES - In the money contracts are more expensive - because they hold more VALUE. \n\n When sitting out of the money - not only do you have zero intrinsic value - but theta will eat away at your cost average much faster. Play it safe and stick to what works - IN THE MONEY.``` ```py\nIN THE MONEY FOR PUTS:\nAny strike ABOVE the current price. \n\n IN THE MONEY FOR CALLS:\nAny strike **BELOW** the current price.```", inline = True)
            embed.set_image(url="https://i.ibb.co/Rjz0wwz/itmotm.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await inter.response.edit_message(embed=embed, view=AvoidView())
        elif self.values[0] == "Never Buy The Ask🙅‍♂️":
            embed = disnake.Embed(title="Never Buy The Ask🙅‍♂️", color = disnake.Colour.random())
            embed.add_field(name="Never Buy The Ask🙅‍♂️", value="```py\nNEVER BUY THE ASK!``` ```py\nWhen you buy the ask, you're paying a PREMIUM. With illiquid options - always buy between the MID and the BID. \n\n If it helps - set-up your options chain where the ask price is not visible. Out of sight out of mind!```", inline = True)
            embed.set_image(url="https://i.ibb.co/m0hzrzx/noask.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await inter.response.edit_message(embed=embed, view=AvoidView())
        elif self.values[0] == "Avoid Corporate Actions⭕":
            embed = disnake.Embed(title="Avoid Corporate Actions⭕", color = disnake.Colour.random())
            embed.add_field(name="Avoid Corporate Actions", value="```py\nWhen you see a super over-bought RSI that gaps up on the 'daily' and consolidates - look to the news to confirm a corporate action. Buyouts, mergers, splits, reverse splits, etc. are corporate actions - and should be avoided. \n\n This image here is exactly what to avoid.```", inline = True)
            embed.set_image(url="https://i.ibb.co/gSM3S52/CORPACTION.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await inter.response.edit_message(embed=embed, view=AvoidView())
        elif self.values[0] == "Avoid Weekly Expirations🗓️":
            embed = disnake.Embed(title="Avoid Weekly Expirations🗓️", color = disnake.Colour.random())
            embed.add_field(name="Avoid Weekly Expirations🗓️", value="```py\nWeekly expirations have more liquidity, and are typically more popular. Avoid them for best results when utilizing the core logic in MOST cases.```", inline = True)
            embed.set_image(url="https://i.ibb.co/c3PvNMH/weeklymonthly.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await inter.response.edit_message(embed=embed, view=AvoidView())


class CoreView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)
        self.add_item(CoreDropDown())
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="🅰️LPHAQUERY", url=f"https://www.alphaquery.com/saved-screens"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="🟢 Core Calls".center(1, " "), url=f"https://www.alphaquery.com/stock-screener/600010230?run=1"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="🔴 Core Puts".center(1, " "), url=f"https://www.alphaquery.com/stock-screener/600010229?run=1"))


class VideoSelect(disnake.ui.Select):
    def __init__(self):
    
        options= [
            disnake.SelectOption( label=f"🇨🇳 🇨 🇭 🇮 🇳 🇦"),
            disnake.SelectOption( label=f"🇩 🇹 🇨 🇨 / 🇩 🇹 🇨"),
            disnake.SelectOption( label=f"🇴 🇨 🇨"),
            disnake.SelectOption( label=f"🇳 🇸 🇨 🇨"),
            disnake.SelectOption( label=f"🇫 ℹ️ 🇳 🇷 🇦"),
            disnake.SelectOption( label=f"🇸 🇫 🇹  🇸 🇪 🇷 🇻 ℹ️ 🇨 🇪"),
            disnake.SelectOption( label=f"🇳 🇸 🇫 🇷  🇷 🇦 🇹 ℹ️ 🇴"),
            disnake.SelectOption( label=f"🇴 🇵 🇹 ℹ️ 🇴 🇳 🇸 1️⃣ 0️⃣ 1️⃣"),
            disnake.SelectOption( label=f"🇨 🇧 🇴 🇪"),
            disnake.SelectOption( label=f"🇮 🇨 🇪"),
            disnake.SelectOption( label=f"🇪 🇹 🇫 🇸"),
            disnake.SelectOption( label=f"🇳 🇾 🇸 🇪"),]

        super().__init__(
        placeholder=f"🇲 🇦 🇷 🇰 🇪 🇹 📽️ 🇻 ℹ️ 🇩 🇸", 
        min_values=1, 
        max_values=1, 
        custom_id=f"marketvids",
        options=options)

    async def callback(self, interaction: disnake.MessageCommandInteraction):
        await interaction.response.defer(with_message=True, ephemeral=True)
        if self.values[0] == "🇨🇳 🇨 🇭 🇮 🇳 🇦":
            await interaction.edit_original_message(view=ChinaView())
        elif self.values[0] == "🇩 🇹 🇨 🇨 / 🇩 🇹 🇨":
            await interaction.edit_original_message(view=DTCCView())
        elif self.values[0] == "🇴 🇨 🇨":
            await interaction.edit_original_message(view=OCCView())
        elif self.values[0] == "🇳 🇸 🇨 🇨":
            await interaction.edit_original_message(view=NSCCView())
        elif self.values[0] == "🇫 ℹ️ 🇳 🇷 🇦":
            await interaction.edit_original_message(view=FINRAView())
        elif self.values[0] == "🇸 🇫 🇹  🇸 🇪 🇷 🇻 ℹ️ 🇨 🇪":
            await interaction.edit_original_message(view=SFTView())
        elif self.values[0] == "🇳 🇸 🇫 🇷  🇷 🇦 🇹 ℹ️ 🇴":
            await interaction.edit_original_message(view=NSFRView())
        elif self.values[0] == "🇴 🇵 🇹 ℹ️ 🇴 🇳 🇸 1️⃣ 0️⃣ 1️⃣":
            await interaction.edit_original_message(view=Opt101View())
        elif self.values[0] == "🇨 🇧 🇴 🇪":
            await interaction.edit_original_message(view=CBOEView())
        elif self.values[0] == "🇮 🇨 🇪":
            await interaction.edit_original_message(view=ICEView())
        elif self.values[0] == "🇪 🇹 🇫 🇸":
            await interaction.edit_original_message(view=ETFView())
        elif self.values[0] == "🇳 🇾 🇸 🇪":
            await interaction.edit_original_message(view=NyseVIDView())


class NyseVIDView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The Designated Market Maker👷‍♂️", url="https://youtu.be/zFXZRspjOxY" ))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Dark Pools, Dark Fibers, and the NYSE🧵", url="https://youtu.be/0073Jg8hY-4"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The NYSE Adopts the Retail Order Type🚬",url="https://youtu.be/PVFECoLEIpU"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-47 | The OX and Pillar Systems🐂", url="https://youtu.be/tZ4M0vDj37s"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NYSE-ARCA-2021-58 || Options Fee Schedule Modifications (Liquidity)💦", url="https://youtu.be/b4KdRT9uKmE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEArca-2021-55 | Options Series⭕", url="https://youtu.be/hHz6QBoF5tE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSE-2021-40 | Trading Halt Permeance🚫", url="https://youtu.be/lLnCbYqf1W0"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Retail Orders cannot be executed by Algorithims🤖", url="https://youtu.be/DjegbrqKnSY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEArca-2021-63 | Risk / Hedging🌳", url="https://youtu.be/qH_gVxNWCcI"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-66 Reformat the Basic Rates Section➿", url="https://youtu.be/epkyjA2y8Sk"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSE-2021-045 Acquisition Spinoffs📴", url="https://youtu.be/yiZwfLwySVM"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-74 | A highly Competitive Market☠️", url="https://youtu.be/VAjXpBv4O3o"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-84 | Proxy Portfolios🥠", url="https://youtu.be/kSrV-Td6d4A"))# \n Learn about proxy portfolios. It's absurd to say the least.", inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NYSE CEO Can now Halt Trading for up to Two Days2️⃣",url="https://youtu.be/1S7kzaT4FYo"))# \n The NYSE CEO can now halt trading for up to two days at his own discretion.", inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEArca-2021-109 | Liquidity and Price Discovery🔎", url="https://youtu.be/53ptYMUqudE"))# \n NYSEARCA refers to the market share crisis happening in the markets.", inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The NYSE Gives Special treatment to ADRs.💌", url="https://youtu.be/V8ZjerMaq58"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSENAT-2022-06 | Directed Orders Added on Exchange🎯", url="https://youtu.be/0q-QndhzuBU"))# inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSE-2022-04 | Integrated Market Making🎊",url="https://youtu.be/8lr3Y0Xqp8w")) #\n SEC Adopts a new type of Market Making - Integrated Market Making", inline=False)


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )
        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="video menu.", color=disnake.Colour.dark_gold())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=VideoView())

class SmilesView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None
)

    @disnake.ui.button(label="Characteristics of Smiles", style=disnake.ButtonStyle.blurple)
    async def characteristics(self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="Option Smiles and Earnings", color=disnake.Colour.random())
        embed.add_field(name="SMILES CAN OCCUR ON BOTH THE CALL AND PUT SIDE", value ="An ITM smile for puts would be an OTM smile for calls, and vise versa. We are playing the OTM smiles (either call or put) because it is highly unusual for an options contract to have the lowest IV out of the money. ")
        embed.add_field(name="EVEN IF THE PLAY GOES AGAINST YOU - THERE IS STILL HOPE FOR PROFIT.", value="Using smiles as directional indicator is a great way to use this strategy. Unless the smile moves IN THE MONEY, or close to ATM, it should still pan out - as proven by plays we've already played like MSFT, and AMD, AND NFLX.")
        embed.set_image(url="https://i.ibb.co/2ZN6pcD/SMILES.png")
        embed.set_thumbnail(url="https://i.ibb.co/mz4MSh7/SMILES-MOVE.pn")
        await interaction.response.edit_message(embed=embed, view=SmilesView())


    @disnake.ui.button(label="Earnings", style=disnake.ButtonStyle.blurple, )
    async def earnings( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Option Smiles and Earnings", description="If you've been in this group for a bit - you'll remember where we started: GAPS. **since then, gaps have always been an essential part of our strategy, and nothing has changed there.** \n\n OPTION SMILES ARE AN INDICATION OF FUTURE PRICE ACTION DUE TO EARNINGS (positive news).", url="https://1drv.ms/x/s!AgLOXVUYbs6VhYMswtMd9SvCFGeA4w?e=g57FaY", color=disnake.Colour.random())
        embed.set_image(url="https://media.discordapp.net/attachments/896207280117264434/955135923530629190/816.png?width=789&height=629")
        embed.add_field(name="HOW TO FIND THE LIST", value="First - use the /sp500 command to get a list of all tickers in the sp500. Take that list - and copy/paste it into alphaquery, and then select next earnings report date for the list of tickers. This will return a giant list of sp500 components we can sort by date to have a scheduled list of plays!")
        await interaction.response.edit_message(embed=embed, view=SmilesView())

    @disnake.ui.button(label="Affected Tickers", style=disnake.ButtonStyle.blurple, )
    async def affected( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Option Smiles Constituents", description=" https://www.sec.gov/rules/sro/occ/2022/34-95319.pdf \n\n The filing above is the bread and butter for why this works. It clearly states in the filing that they are trying to remedy the options methodology for calculating RISK. \n\n In doing this - they're specifically targeting components of the SP500 index for the new methodology, which are the tickers we should be playing for SMILES near earnings.", color=disnake.Colour.random())
        embed.set_image(url="https://media.discordapp.net/attachments/896207280117264434/955135923530629190/816.png?width=789&height=629")
        embed.add_field(name="Sp500 earnings list by date", value="https://1drv.ms/x/s!AgLOXVUYbs6VhYMswtMd9SvCFGeA4w?e=g57FaY")
        await interaction.response.edit_message(embed=embed, view=SmilesView())

    @disnake.ui.button(label="A Moving Target", style=disnake.ButtonStyle.blurple, )
    async def moving( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="OPTION SMILES MOVE", description="Due to the fact option smiles move - IT IS IMPERATIVE NOT TO BUY IN TOO EARLY. Wait until the week of earnings and try to wait for a dip in the stock like any other strategy. If you buy a smile too soon - it could be the WRONG smile, which ill explain more in the next button.", color=disnake.Colour.random())
        embed.set_image(url="https://media3.giphy.com/media/4lXLKH5PxBD6CYhAKp/giphy.gif?cid=790b7611af379f64558476bc3a73966395e64d7a605c2d5c&rid=giphy.gif&ct=g")
        embed.add_field(name="Sp500 earnings list by date", value="https://1drv.ms/x/s!AgLOXVUYbs6VhYMswtMd9SvCFGeA4w?e=g57FaY")
        await interaction.response.edit_message(embed=embed, view=SmilesView())

    @disnake.ui.button(label="LOCK IN THE SMILE STRIKE", style=disnake.ButtonStyle.blurple, )
    async def lock( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Where's the real smile?", description="Since the dawn of this group - gaps and earnings has been our bread and butter. How can we be sure where the true smile should be if they move? \n\n\n USE THE GAPS ON THE CHART! ", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/fdXsVPY/clx.png")
        embed.add_field(name="For example - look for a gap on the daily. If the gap is at $150 and the stock is trading at $125 - go through the options chain for that ticker until you find a smile out at those prices ", value="https://1drv.ms/x/s!AgLOXVUYbs6VhYMswtMd9SvCFGeA4w?e=g57FaY")
        await interaction.response.edit_message(embed=embed, view=SmilesView())

    @disnake.ui.button(label="THIS IS NEW FOR EVERYONE!", style=disnake.ButtonStyle.blurple, )
    async def new( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="USE YOUR EYES", description="Just like everything else - this is a new occurence in the market compared to what we've seen lately. THIS MEANS IT WILL TAKE YOU, AS AN INDIVIDUAL, MANAGING YOUR POSITIONS AND TAKING NOTE OF YOUR SMILE LOCATION / THE DIRECTION OF THE GENERAL MARKET / AND HOW THE STRIKE MOVES AS YOU'RE EXPOSED TO IT. \n\n\n Please use risk management here with everything else - and **make sure you are watching your positions if holding intraday and overnight. It is nobody's responsibility to watch your plays for you but you!**", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/fdXsVPY/clx.png")
        embed.add_field(name="For example - look for a gap on the daily. If the gap is at $150 and the stock is trading at $125 - go through the options chain for that ticker until you find a smile out at those prices ", value="https://1drv.ms/x/s!AgLOXVUYbs6VhYMswtMd9SvCFGeA4w?e=g57FaY")
        await interaction.response.edit_message(embed=embed, view=SmilesView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Opportunities Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=OpportunitiesView())



class SpyView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="Spy🕵️", style=disnake.ButtonStyle.red, )
    async def spyn( self,interaction: disnake.ApplicationCommandInteraction ):
            embed = disnake.Embed(title="Spy🕵️", color = disnake.Colour.random())
            embed.add_field(name="Spy🕵️", value="**SPY** IS ONE OF THE MOST LIQUID TICKERS IN THE MARKET. \n\n **I HIGHLY RECOMMEND AVOIDING SPY UNTIL YOU GRASP CORE.** \n\n PLAY SPY WITH PROFITS ONLY IS MY RECOMMENDATION. TRADE AT YOUR OWN RISK.", inline = True)
            embed.add_field(name="Spy Relevance🕵️", value="**SPY** is best played around macro-economic events and especially around FOMC meetings. Other than that - the **CORE LOGIC** is the supreme logic and is what should be learned and practiced by anyone looking to scale gains consistently.", inline = True)
            embed.add_field(name="FOMC CALENDAR🕵️", value="**Save this calendar and refer to it. The dates here are important!** \n https://www.federalreserve.gov/monetarypolicy/fomccalendars.htm", inline=True)
            embed.set_image(url="https://i.ibb.co/x8H5Hys/FOMCMEETINGS.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=SpyView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def gohome( self,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Opportunities Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=OpportunitiesView())




class SFTView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url,label="Basel III Regulations and Reforms", url="https://youtu.be/G_4qeFJqSdk"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url,label="Introduction to the NSCC SFT Service" , url="https://youtu.be/cGjsCr72hjU"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url,label="SFT: Fire sale + Liquidity Drain Risk Mitigation", url="https://youtu.be/qLmSepmYnSo"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url,label="Agency and Principal models for the SFT Service", url="https://youtu.be/AhTysJ7Rc2E"))



    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="eo Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=VideoView())



class VidVideoView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="China", style=disnake.ButtonStyle.blurple, custom_id="chinas")
    async def China( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="China", description="```py\nChina experienced an earlier lockdown than other countries in the fight against the coronavirus, followed by an earlier easing of restrictions. Government policies in the initial crisis phase focused on containing the coronavirus via lockdowns, travel and immigration restrictions, and strict quarantine regulations. A second phase began in March as the policy focus shifted to a gradual easing of restrictions and the reopening of China’s economy. An important milestone was reached in early April. After 11 weeks, China announced the end of the lockdown in Wuhan, the epicenter of the initial outbreak, allowing stranded travelers and migrant workers to finally return home or to their place of work. Beijing’s successful strategy to contain the coronavirus is being reflected in household and business confidence, which are returning to more normal levels```", color=disnake.Colour.dark_green())
        embed.add_field(name="2012-2022 | The Completed Puzzle", value="https://youtu.be/cyFyepDlAh8", inline=False)
        embed.add_field(name="Learn about China's Three Red Lines Policy", value="https://youtu.be/qk0zftFn5s8", inline=False)
        embed.add_field(name="Learn about China's Macroeconomic Transformation", value="https://youtu.be/b4KdRT9uKmE", inline=False)
        embed.add_field(name="China's Recovery is Imminent - Learn Why.", value="https://youtu.be/gk_mNOZTN64", inline=False)
        embed.add_field(name="What's coming, what it means, and how to navigate it.", value="https://youtu.be/6u9w8tgjaoI", inline=False)
        embed.add_field(name="China's Transformation Explained", value="https://youtu.be/Uy8cwQylfzM",)
        embed.add_field(name="China IS The Supply Chain Issue", value="https://youtu.be/xwUF4TdfXsM", inline=False)
        embed.set_author(name="FUDSTOP Trading")
        embed.set_image(url="https://th.bing.com/th/id/OIP.hiZ2Ba_VYKvXz0u_zxS3swHaD4?pid=ImgDet&rs=1")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=ChinaView())

    @disnake.ui.button(label="The DTCC / DTC", style=disnake.ButtonStyle.gray, custom_id="dtcc")
    async def dtcc( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Depository Trust Clearing Corporation", description="```py\nThe Depository Trust and Clearing Corporation (DTCC) is an American financial services company founded in 1999 that provides clearing and settlement services for the financial markets. When the DTCC was established in 1999, it combined the functions of the Depository Trust Company (DTC) and the National Securities Clearing Corporation (NSCC).1 The NSCC is currently a subsidiary of the DTCC.```")
        embed.set_image(url="https://stopnakedshortselling.org/wp-content/uploads/2020/05/DTCC.jpg")
        embed.add_field(name="DTC-2021-005 | A Closer Look", value="https://youtu.be/DZ4e1zl_LxM", inline=False)
        embed.add_field(name= "DTC-2021-011 - Cyber Attacks / System Failures", value="https://youtu.be/c54ifHkXyIs", inline=False)
        embed.add_field(name= "DTC-2021-014 | Settlement Services for the SFT", value="https://youtu.be/GyglhxT4qR4", inline=False)
        embed.add_field(name= "State Street and DTCC are PARTNERS IN THIS FREE MARKET", value="https://youtu="").be/3I9WfTpsnJQ", inline=False)
        embed.add_field(name= "DRS, Fast Agents, and the DTC | Final Cut", value="https://youtu.be/ioSgS-e58QM", inline=False)
        embed.add_field(name= "DEMAT | DTCC, DRS, and the Uninformed", value="https://youtu.be/nLttk7nG9ms \n Share dematerialization has been an ongoing goal of the DTCC for nearly a decade. Learn about DEMAT in this video.", inline=False)
        embed.add_field(name= "Overstock Partners with US Treasury and DTCC", value="https://youtu.be/4wuuCmnK7oU", inline=False)
        embed.add_field(name= "DTCC Notice - Changes to Collateralized Haircuts", value="https://youtu.be/Hh70tMs7TkE", inline=False)
        embed.add_field(name= "SEC Filing | DTC 2021 002 - Adjust DTC's Investment Policy", value="https://youtu.be/rntLFb09Kuo", inline=False)
        embed.add_field(name= "Meet the DRS Fast Agents", value="https://youtu.be/SgfJXBINPqY", inline=False)
        embed.add_field(name= "DTC-2021-016 | Governing Law", value="https://youtu.be/g1IbrIdN_2Y", inline=False)
        embed.add_field(name= "DTC/FICC/NSCC increase Capital Requirements", value="https://youtu.be/HkTIiDQYR7o", inline=False)
        embed.add_field(name= "The DRS Guide to Reality", value="https://youtu.be/6TGTvunz9Nw", inline=False)
        embed.add_field(name= "15 Years of Pain - CMKM Diamond", value="https://youtu.be/6TGTvunz9Nw", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=DTCCView())

    @disnake.ui.button(label="The OCC", style=disnake.ButtonStyle.gray, custom_id="occ2")
    async def occ( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Options Clearing Corporation", description="```py\nOptions Clearing Corporation is a United States clearing house based in Chicago. It specializes in equity derivatives clearing, providing central counterparty clearing and settlement services to 16 exchanges.```",color=disnake.Colour.dark_orange())
        embed.add_field(name="OCC-2021-011 | Margin & Defaults", value="https://youtu.be/XJNTt2Yrf30 \n", inline=False)
        embed.add_field(name="SEC FILING OCC-2021-006", value="https://youtu.be/OkiPeHgDimk \n", inline=False)
        embed.add_field(name="SR-OCC-2021-004 Explained in 04:20", value="https://youtu.be/1MCVZH7QvAc \n", inline=False)
        embed.add_field(name="SR-OCC-2021-003 Explained", value="https://youtu.be/ChumKl1SWq8 \n", inline=False)
        embed.add_field(name="Shakeup at the OCC! Beat the news again!", value="https://youtu.be/tc1kn_au3Os \n", inline=False)
        embed.add_field(name="SR-OCC-2021-007 | Force Majeure / Bylaws / Act of God", value="https://youtu.be/BgBfSwFoQ1U \n", inline=False)
        embed.add_field(name="OCC Partial Tear-up Rule Approved", value="https://youtu.be/5s2ytMppZCg \n", inline=False)
        embed.add_field(name="SR-OCC-2021-803 | No Objection", value="https://youtu.be/H_4QuzqLDDc \n", inline=False)
        embed.add_field(name="The OCC Cloud | BIG Changes", value="https://youtu.be/sjCFhzoT6Mo \n", inline=False)
        embed.add_field(name="OCC-2021-013 | Equity Recovery / Operational Loss", value="https://youtu.be/CG6_X6LtwoQ \n", inline=False)
        embed.add_field(name="OCC-2021-014 | The Coming Slaughter", value="https://youtu.be/gT7Z25bnbnU \n", inline=False)
        embed.add_field(name="BREAKING: OCC-2022-801 | A New IV Model", value="https://youtu.be/oOZQCwk7gxc \n", inline=False)
        embed.add_field(name="The OCC Cloud | BIG Changes", value="https://youtu.be/sjCFhzoT6Mo \n", inline=False)
        embed.add_field(name="OCC to collect MARGIN DEFICITS On July 27th", value="https://youtu.be/hc3n2RsMG14 \n", inline=False)
        embed.set_image(url="https://res.cloudinary.com/crunchbase-production/image/upload/c_lpad,h_256,w_256,f_auto,q_auto:eco,dpr_1/ncc2rldzqyqqpk6aoobr")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OCCView())

    @disnake.ui.button(label="The NSCC", style=disnake.ButtonStyle.gray, custom_id="nscc")
    async def nscc( self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="The NSCC", description="```py\nNational Securities Clearing Corporation (NSCC) founded in 1976 is a subsidiary of Depository Trust & Clearing Corporation (DTCC). \n The NSCC operates as a seller for every buyer, and buyer for every seller in the financial industry for trades that settle in U.S. markets.```")
        embed.set_image(url="https://mark.trademarkia.com/logo-images/national-securities-clearing-corporation/ns-cc-73150136.jpg")
        embed.add_field(name="SR-NSCC-2022-009 | The Volatility Charge", value="https://youtu.be/4GERvX7EzZI", inline=False)
        embed.add_field(name="SR-NSCC-2021-007 | System Failure & Market Disruption Events", value="https://youtu.be/-xfHt_8mntg", inline=False)
        embed.add_field(name="SR-NSCC-2021-009 | Tax Obligations", value="https://youtu.be/901q5eaRKEU", inline=False)
        embed.add_field(name="NSCC-2021-803 SFT | Fire Sale and Liquidity Risk Mitigation", value="https://youtu.be/E_hQT954ACM", inline=False)
        embed.add_field(name="NSCC-2021-803 SFT | Agency vs. Principal Model", value="https://youtu.be/WGGCEvOl2io", inline=False)
        embed.add_field(name="NSCC-2021-011 | Game Over", value="https://youtu.be/6-jXYUi4HDs", inline=False)
        embed.add_field(name="SR-NSCC-2021-005 NSCC increases Margin Requirements by 25x", value="https://youtu.be/hHeqaMnkGrk", inline=False)
        embed.add_field(name="NSCC Introduction to Interval Funds", value="https://youtu.be/MdkpF6K85vo")
        embed.add_field(name="NYSE No Longer an NSCC Participant", value="https://youtu.be/t-zi0UED-KQ")
        embed.add_field(name="NSCC - Forced Settlement", value="https://youtu.be/RY0kPXZHQyA", inline=False)
        embed.add_field(name="SR-2021-NSCC-015 | DOUBLE-DEFAULTS and Mutual Funds", value="https://youtu.be/I59a1fwLONA", inline=False)
        embed.add_field(name="The execution of small / medium players in the industry.", value="https://youtu.be/Q6yKY2gdURg", inline=False)
        embed.add_field(name="SR-NSCC-2022-002 | Interval Fund Repurchase Orders", value="https://youtu.be/SP7MekrNQcE", inline=False)
        embed.add_field(name="NSCC SFT Removes Haircut Component from Margin", value="https://youtu.be/3XwWBmq8ggs", inline=False)
        embed.add_field(name="DTC / FICC / NSCC increase capital requirements.", value="https://youtu.be/HkTIiDQYR7o", inline=False)
        embed.add_field(name="NSCC's Stock Borrow Program Loophole Sealed", value="https://youtu.be/9BMludHQAHs", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NSCCView())

    @disnake.ui.button(label="FINRA", style=disnake.ButtonStyle.gray, )
    async def finra(self, interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="Financial Industry Regulatory Authority (FINRA)", description="```py\nUnderstanding FINRA - \n FINRA governs brokers and broker-dealer firms -- government lingo for financial institutions. Any institution that you use for a brokerage account or that a business uses to go public or sell securities is governed by FINRA.\n Although it acts as a governor of the industry, FINRA is a non-governmental organization. It is an independent regulatory body financial institutions must register with. The Securities and Exchange Commission (SEC) has given it the authority to discipline financial institutions with fines and other measures.``` ```py\nFINRA exists to protect investors in the following ways:\n 1️⃣ Makes sure all security products have been tested and qualified: FINRA-registered brokers can only sell investment products that have been reviewed and approved by the agency. \n2️⃣ Makes sure securities advertisements are truthful and not misleading: You may have noticed the seemingly endless fine print in all financial advertising. FINRA sets and enforces those guidelines.\n3️⃣ Makes sure securities products sold to investors are suitable for their needs: Brokers who sell volatile penny stocks to retirees or expensive annuities to college students will run afoul of FINRA.\n4️⃣ Makes sure investors receive complete disclosure for products before investing: Potential risk and a complete rundown of historical returns must be disclosed to investors.```", color=disnake.Colour.dark_blue())
        embed.set_image(url="https://th.bing.com/th/id/R.12686266421d26ae7414dd4e7da61055?rik=fzMjFgIMZj%2fh0w&pid=ImgRaw&r=0")
        embed.add_field(name="Alternate Display Facility - FINRAs Secondary Order Book", value="https://youtu.be/M_9Z4CayCx8", inline=False)
        embed.add_field(name="Alternate Display Facility History", value = "https://youtu.be/52m1cX9Mii8 \n Learn about SuperMontage, the NASD and how they eventually became FINRA - who now operates the two facilities that take up over 75% of market share on a daily basis. **The TRF Carteret Facility** and the **Alternate Display Facility**", inline=False)
        embed.add_field(name="SR FINRA 2021 009 Supplemental Liquidity", value = "https://youtu.be/HAs_aW2l1rI", inline=False)
        embed.add_field(name="FINRA RULE 6439 - New OTC Reporting Requirements", value = "https://youtu.be/GmA5LcaZyxM \n These new reporting requirements can be observed today at https://otce.finra.org/otce/home", inline=False)
        embed.add_field(name="SR-FINRA-2020-04 Restricted Firm Obligations", value = "https://youtu.be/K37TZiKD5gA", inline=False)
        embed.add_field(name="FINRA Partners with the FBI", value="https://youtu.be/oZctWlv3QUw", inline=False)
        embed.add_field(name="SR-FINRA-2021-011 | FINRA Approves Specified Risk Event", value="https://youtu.be/JYpwVZ6OqnY", inline=False)
        embed.add_field(name="SR-FINRA-2022-11 FINRA to Surveille Foreign Fixed Income Debt", value="https://youtu.be/1aUDZcCaopw", inline=False)
        embed.add_field(name="FINRA Treasury Portfolio Descrepancies", value="https://youtu.be/gy8DcK7rNgY", inline=False)
        embed.add_field(name="FINRA Rule 15c2-11", value="```py\n**Some** refer to this phenomenon as 'the zombie stock' effect. Learn how it works and the governing legislation behind it.``` https://youtu.be/KKpYE9UJUHg ", inline=False)
        embed.add_field(name="The Consolidated Audit Trail", value="```py\nLearn about the C.A.T. system that has taken nearly 14 years to complete. Bart of the Basel III reform post 2008 crisis - this is due for PRODUCTION GO-LIVE on July 27th.```https://youtu.be/QuMdFtg6ib4", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=FINRAView())

    @disnake.ui.button(label="The SFT Service", style=disnake.ButtonStyle.green, custom_id="sft")
    async def sft(self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Securities Financing Transaction Service", description="```py\nSFTs are transactions in which a securities lender loans securities to a securities borrower, for a fee. \n\n\n The borrowers typically use the borrowed securities to **cover short sales or fails to deliver that may result from either short or long sales.** \n\n A lender typically lends securities to generate income through the fees that it charges. \n\n As a CCP (Central Clearing Counterparty)***, NSCC would interpose itself **between the securities lender and borrower and become the counterparty to each entity. \n\n NSCC would then be obligated to complete the transaction, that is, to return loaned securities to the lender and collateral to the borrower, even if a lender or borrower in an SFT fails to satisfy its obligations, thereby assuming the risk of each entity’s failure to perform to each other.```", color=disnake.Color.random())
        embed.add_field(name="Basel III Regulations and Reforms", value="https://youtu.be/G_4qeFJqSdk \n Learn about the Basel III regulation regime.", inline=False)
        embed.add_field(name="Introduction to the NSCC SFT Service" , value="https://youtu.be/cGjsCr72hjU", inline=False)
        embed.add_field(name="SFT: Fire sale + Liquidity Drain Risk Mitigation", value="https://youtu.be/qLmSepmYnSo \n", inline=False)
        embed.add_field(name="Agency and Principal models for the SFT Service", value="https://youtu.be/AhTysJ7Rc2E \n", inline=False)
        embed.set_image(url="https://www.federalreserve.gov/econres/notes/feds-notes/figure-1-collateral.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=SFTView())

    @disnake.ui.button(label="The NET Stable Funding Ratio", style=disnake.ButtonStyle.green,custom_id="net" )
    async def net( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Net Stable Funding Ratio, TITLE 12 CFR", description="```py\nFollowing the failure of many banks to adequately measure, manage and control their liquidity risk in 2007 and in subsequent years, the Basel Committee on Banking Supervision (BCBS) introduced two liquidity standards as part of the Basel III post-crisis reforms. The first of these is the Liquidity Coverage Ratio (LCR). It enhances banks' short-term resilience and is presented in another Executive Summary. The second standard - the Net Stable Funding Ratio (NSFR) - aims to promote resilience over a longer time horizon by creating incentives for banks to fund their activities with more stable sources of funding on an ongoing basis.```", color=disnake.Colour.dark_gold())
        embed.set_image(url="https://www.novantas.com/wp-content/uploads/2016/10/figure1.jpg")
        embed.add_field(name="The Net Stable Funding Ratio - Intro", value="https://youtu.be/LHKekbnr2lY \n Learn about the Title 12 Net Stable Funding Ratio", inline=False)
        embed.add_field(name="This video covers the newly added part - Bank Monitoring", value="https://youtu.be/Al-4tbspxfE", inline=False)
        embed.add_field(name="Banks Corrective Action", value="https://youtu.be/L2L0I_Oxbw0 \n Banks now face prompt corrective action under these scenarios.", inline=False)
        embed.add_field(name="Required Stable Funding", value="https://youtu.be/BoGNFJ25peY \n Learn about the RSF Factors that effect the NSFR.", inline=False)
        embed.add_field(name="Available Stable Funding", value="https://youtu.be/ZOk48dF_TBs \n Learn about the **ASF factors** that effect the NSFR. (Available Stable Funding)", inline=False)
        embed.add_field(name="Net Stable Funding Ratio Definitions" , value="https://youtu.be/VF5W6j-VSpI \nThis video goes over the newly adopted definitions for TITLE 12 NSFR.", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NSFRView())

    @disnake.ui.button(label="Options 101 Course", style=disnake.ButtonStyle.green, )
    async def Options( self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="Options 101 Course", description="```py\nThis in-depth options 101 course is provided by the Options Industry Council.```")
        embed.add_field(name="#1 Options Introduction", value="https://youtu.be/7jcqknbX99c \n", inline=False)
        embed.add_field(name="#2 Options Terminology", value="https://youtu.be/namg44EBFBs \n", inline=False)
        embed.add_field(name="#3 Call and Put Specifics", value="https://youtu.be/NpSQdICvNBk \n", inline=False)
        embed.add_field(name="#4 Buying Calls", value="https://youtu.be/Bc5gpsa7Z1M \n", inline=False)
        embed.add_field(name="#5 Buying Puts", value="https://youtu.be/jrYUzSibjzo \n", inline=False)
        embed.add_field(name="#6 Options Premium", value="https://youtu.be/22X3h_rwiEA \n", inline=False)
        embed.add_field(name="#7 Options and Exercising - Part 1", value="https://youtu.be/Dgc2fO4GlR8 \n", inline=False)
        embed.add_field(name="#8 Options and Exercising - Part 2", value="https://youtu.be/e_W_5jd-2v4 \n", inline=False)
        embed.add_field(name="#9 Risk versus Reward", value="https://youtu.be/p36Ovh8x89I \n", inline=False)
        embed.add_field(name="WEBINAR: Covered Calls / Poor Man's Covered Calls / Leaps", value="https://youtu.be/ySoXAKuNjxg", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=Opt101View())


    @disnake.ui.button(label="Chicago Board Options Exchange (CBOE)", style=disnake.ButtonStyle.green, custom_id="cboe")
    async def cboes( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Chicago Board Options Exchange (CBOE)", description="```py\nCBOE is the abbreviation for the Chicago Board Options Exchange. It is the world's largest options exchange, having served as an innovator of new option-based products since its first day of trading in 1973. The CBOE offers options contracts on hundreds of stocks and exchange-traded funds, as well as several of the most popular stock indexes. \n\n Among its proprietary products are stock index options on the **S&P 500 (^GSPC)**, which are the most active index options in the U.S. market. These and other financial products give investors the opportunity to manage risk in executing their investment strategies.```", url="https://www.cboe.com/us/equities/market_share/", color=disnake.Colour.dark_gold())
        embed.set_image(url="https://th.bing.com/th/id/OIP.D58Ciou2qdjSeY0tCcCVVwHaEH?pid=ImgDet&rs=1")
        embed.add_field(name="SR-CBOE-2021-02 | ETF Manipulation", value="```py\nCBOE Files and specifically refers to ETFs being bad for price discovery in markets.``` https://youtu.be/vQCH8teGyHQ", inline=False)
        embed.add_field(name="SR-CBOE-2021-039 - The Market Share Crisis", value="https://youtu.be/WlAlny63XD4", inline=False)
        embed.add_field(name="SR-CBOE-2021-040 | Automated Halts", value="```py\nLearn about automated trading halts.``` https://youtu.be/Z6UO5qwv8es", inline=False)
        embed.add_field(name="SR CboeBZX-2021-055 | Price Discovery and Liquidity", value="https://youtu.be/qVsKTX3Ui3o", inline=False)
        embed.add_field(name="SR-CboeBZX-2022-009 | Drill-Through Price Protection", value="```py\nLearn about drill-throgh price protection.``` https://youtu.be/fqSCRm8SoYI", inline=False)
        embed.add_field(name="CBOE-2021-045 | Rule Violation Plan" , value="```py\nLearn about CBOE's Rule Violation Plan``` https://youtu.be/RPGF-MjD62I", inline=False)
        embed.add_field(name="CBOE Options Start Trading at 2:30AM EST", value="```py\nCBOE Opens up trading to participants as early as 3:30 AM now - 1 hour and 30 minutes before the regular Pre-Market session begins.``` https://youtu.be/tSvsur3vSC0", inline=False)
        embed.add_field(name="SR-CboeBZX-2021-058 - Rebates for LIQUIDATED ETFs", value="https://youtu.be/eXFqVkAjvqY", inline=False)
        embed.add_field(name="Options Position Limits Increased on CBOE Exchanges", value="https://youtu.be/UrSUMAKWNBA", inline=False)
        embed.add_field(name="SR-Cboe-2021-026 - Extreme Duplicate Price Protection" , value="https://youtu.be/z9o4xb7gCmU", inline=False)
        embed.add_field(name="The CBOE Volatility Index (VIX)", value="```py\nYou've probably heard of the VIX index, and maybe have even traded it. This video goes into detail about the VIX and its' background.``` https://youtu.be/B1wIJ4duwzM", inline=False)
        embed.add_field(name="CBOE BZX | 086 - Amend the Opening Auction", value="```py\nCBOE Amends the opening auction for options.``` https://youtu.be/mgaiE3dCKd0", inline=False)
        embed.add_field(name="CBOE EdGX-2021-048 - Easy To Borrow Securities" , value="https://youtu.be/7PEe99ZRA5o", inline=False)
        embed.add_field(name="SR-2021-CBOE-071 | CBOE Adds The New Curb Trading Session", value="```py\nCBOE adds the new 'curb' trading session.``` https://youtu.be/M48zMHH57-Q", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=CBOEView())

    @disnake.ui.button(label="Intercontinental Exchange", style=disnake.ButtonStyle.red, )
    async def ice( self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="Intercontinental Exchange (ICE)", description="```py\nThe Intercontinental Exchange (ICE) is an American company formed in 2000 that operates global financial exchanges, clearing houses and provides mortgage technology, data and listing services. \n Listed on the Fortune 500, S&P 500, and Russell 1000, the company owns exchanges for financial and commodity markets, and operates 12 regulated exchanges and marketplaces. \n\n This includes ICE futures exchanges in the United States, Canada and Europe, the Liffe futures exchanges in Europe, the New York Stock Exchange, equity options exchanges and OTC energy, credit and equity markets. \n\n ICE also owns and operates six central clearing houses:``` ```py\nICE Clear U.S., ICE Clear Europe, ICE Clear Singapore, ICE Clear Credit, ICE Clear Netherlands and ICE NGX. ICE has offices in Atlanta, New York, London, Chicago, Bedford, Houston, Winnipeg, Amsterdam, Calgary, Washington, D.C., San Francisco, Tel Aviv, Rome, Hyderabad, Singapore and Melbourne.```", color=disnake.Color.random())
        embed.set_image(url="https://mms.businesswire.com/media/20181210005339/en/411456/23/ICE_R_colour.jpg")
        embed.add_field(name="SR ICC 2021 005 Wind Down and Recovery", value="https://youtu.be/C6I29AICIsg \n", inline=False)
        embed.add_field(name="SR-ICC-2021-009 Explained in 3:33", value="https://youtu.be/CKEIAcWtKi0 \n Yet another risk based filing out of ICE.", inline=False)
        embed.add_field(name="ICC Approved Filing to Enhance Price Discovery for Options / CDS" , value="https://youtu.be/ClYYDRl2FWY \n", inline=False)
        embed.add_field(name="SR-ICC-2022-005 SWAPS ! Russian / Emerging Market SWAPS", value="https://youtu.be/FgjhEIeYiaA \n", inline=False)
        embed.add_field(name="SR-ICC-2021-015 | Beefing Up before Defaults", value="https://youtu.be/a7eU-lW-eZc \n", inline=False)
        embed.add_field(name="SR-ICEEU-2021-010 More Default Preparations", value="https://youtu.be/IYl511Yb3_o \n", inline=False)
        embed.add_field(name="ICE EUROPE - Libor Transition = More Potential Margin Calls", value="https://youtu.be/y6hS8wh4nY8 \n", inline=False)
        embed.add_field(name="ICE Prepares for Market-Wide Volatility", value="https://youtu.be/98DcxEVwBak \n", inline=False)
        embed.add_field(name="ICEEU-2022-005 | Cash Margin & Liquidity Risk", value="https://youtu.be/qi5A6OFAYhs \n", inline=False)
        embed.add_field(name="ICE Clear Credit Fixes 30minute Delivery Loophole for Swaps", value="https://youtu.be/_I2znHus9tw \n", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=ICEView())

    @disnake.ui.button(label="Exchange Traded Funds", style=disnake.ButtonStyle.red, custom_id="etfs")
    async def etfs( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Exchange Traded Funds", description="```py\nAn exchange-traded fund (ETF) is a basket of securities that trades on an exchange just like a stock does. \n ETF share prices fluctuate all day as the ETF is bought and sold this is different from mutual funds, which only trade once a day after the market closes. \n ETFs can contain all types of investments, including stocks, commodities, or bonds; some offer U.S.-only holdings, while others are international. \n ETFs offer low expense ratios and fewer broker commissions than buying the stocks individually.```", color=disnake.Colour.random())
        embed.add_field(name= "ETF Mechanics 101", value="https://youtu.be/CgsFdfTavvk \n Learn the basics of ETFs and how they work as explained by BlackRock.", inline=False)
        embed.add_field(name="Why ETFs Are Shorted", value="https://youtu.be/aeW_ETxGumc \n **Shorting** provides price disovery and liquidity in markets.", inline=False)
        embed.add_field(name="The ETF Ecosystem Creation Process", value="https://youtu.be/-SCL8F-ovgA \n Learn about how ETF **creation** and **redemption** works in this video.", inline=False)
        embed.add_field(name="ETF Mechanics", value="https://youtu.be/CgsFdfTavvk \n Learn about the mechanics of **ETFs**.", inline=False)
        embed.add_field(name="BlackRock's ETF Ecosystem", value="https://youtu.be/2tvcXsCq-Dc \n **Learn about the **ETF Ecosystem** as described by BlackRock from their own underlying documentation.", inline=False)
        embed.add_field(name="HDG mimics Market Making", value="https://youtu.be/e47kqgU2zt4 \n Yes. An ETF that is designed to mimic the actions of a market maker - ergo - an ETF which makes markets. (algorithim)", inline=False)
        embed.add_field(name="EXEMPTIVE RELIEF | Custom ETF Baskets", value="https://youtu.be/JeFYmKHtQ5A", inline=False)
        embed.add_field(name="NYSE ARCA wants more LIQUIDITY from ETFs and OPTIONS", value="https://youtu.be/b4KdRT9uKmE", inline=False)
        embed.add_field(name="Confirmed Lending - END Game ETFs", value="https://youtu.be/3G8Jm3RkwQE", inline=False)
        embed.add_field(name="ETF Liquidity | The Primary and Secondary Markets", value="https://youtu.be/CTiNffK2z00", inline=False)
        embed.set_image(url="https://th.bing.com/th/id/OIP._P3ktPObbhWdc_PWhS4yqgHaDM?pid=ImgDet&rs=1")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=ETFView())

    @disnake.ui.button(label="The New York Stock Exchange", style=disnake.ButtonStyle.red)
    async def nyse( self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="The New York Stock Exchange", description="```py\nThe NYSE is by far the world's largest stock exchange by market capitalization of its listed companies.```", color=disnake.Colour.dark_blue())
        embed.add_field(name="The Designated Market Maker👷‍♂️", value="```py\nA designated market maker is one that has been selected by the exchange as the primary market maker for a given security. A DMM is responsible for maintaining quotes and facilitating buy and sell transactions. Market makers are sometimes making markets for several hundred of listed stocks at a time.```https://youtu.be/zFXZRspjOxY", inline=False)
        embed.add_field(name="Dark Pools, Dark Fibers, and the NYSE🧵", value="https://youtu.be/0073Jg8hY-4 \n Hello all," "So while this topic is being dismissed by a few people, I find it interesting that I keep finding more and more information that links the NYSE to some form of dark manipulation. Dark meaning undetected." "Here's a link to an investigation that was conducted from the National Securities Exchange of India that was found to be using dark fibers as a method of manipulating the markets by undercutting other members with a latency advantage.```https://www.moneylife.in/article/nse-dark-fibre-scam-sebi-alleges-manipulation-irregular-acts-poor-due-diligence-fraud-misrepresentation-and-false-statements/57058.html#:~:text=NSE%20has%20been%20directed%20to,whole%20%E2%80%9Cdark%20fibre%E2%80%9D%20episode. ```py\nAlso, the filing that we saw SUSPENDING THIRD PARTY DATA SYSTEMS, which dark pools require to operate, IN FACT ALLOW CONNECTIVITY THROUGH DARK FIBER. Coincidence? Change my mind.```", inline=False)
        embed.add_field(name="The NYSE Adopts the Retail Order Type🚬", value="https://youtu.be/PVFECoLEIpU \n", inline=False)
        embed.add_field(name="SR-NYSEARCA-2021-47 | The OX and Pillar Systems🐂", value="```py\n'OX' refers to the Exchange’s current electronic order delivery, execution, and reporting system for designated option issues through which orders and quotes of Users are consolidated for execution and/or display. \n 'OX Book' refers to the OX’s electronic file of orders and quotes, which contain all of the orders in each of the Display Order and Working Order processes and all of the Market Makers’ quotes in the Display Order Process. \n **NYSE Pillar** is the new integrated trading technology platform that will enable member firms to connect to all NYSE equities and options markets using a standard protocol.``` https://youtu.be/tZ4M0vDj37s", inline=False)
        embed.add_field(name="NYSE-ARCA-2021-58 || Options Fee Schedule Modifications (Liquidity)💦", value="```py\nWhenever you see a filing that's related to FEE SCHEDULES - it means they're filing for either: \n 1️⃣ Liqudity \n 2️⃣ More Market share \n 3️⃣ Price Discovery``` https://youtu.be/b4KdRT9uKmE ", inline=False)
        embed.add_field(name="SR-NYSEArca-2021-55 | Options Series⭕", value="```py\nNYSE Arca files for more efficient Option's Chain They say straight up in the filing that Market Makers are using their capital inefficiently to quote options. We all know why. \n Here's the link:``` https://public-inspection.federalregister.gov/2021-14792.pdf**https://youtu.be/hHz6QBoF5tE", inline=False)
        embed.add_field(name="SR-NYSE-2021-40 | Trading Halt Permeance🚫", value="```py\nLearn about trading halts on the NYSE.``` https://youtu.be/lLnCbYqf1W0", inline=False)
        embed.add_field(name="Retail Orders cannot be executed by Algorithims🤖", value="https://youtu.be/DjegbrqKnSY \n ", inline=False)
        embed.add_field(name="SR-NYSEArca-2021-63 | Risk / Hedging🌳", value="https://youtu.be/qH_gVxNWCcI \n ", inline=False)
        embed.add_field(name="SR-NYSEARCA-2021-66 Reformat the Basic Rates Section➿", value="https://youtu.be/epkyjA2y8Sk", inline=False)
        embed.add_field(name="SR-NYSE-2021-045 Acquisition Spinoffs📴", value="https://youtu.be/yiZwfLwySVM")
        embed.add_field(name="SR-NYSEARCA-2021-74 | A highly Competitive Market☠️", value="```py\nThe exchange alludes to the fact that the market is highly competetive - BUT is also highly fragmented due to the large concentration of off-exchange dark pool flow coming out of the **FINRA ADF** and FINRA TRF CARTERET facilities.``` https://youtu.be/VAjXpBv4O3o", inline=False)
        embed.add_field(name="SR-NYSEARCA-2021-84 | Proxy Portfolios🥠", value="```py\nLearn about proxy portfolios. It's absurd to say the least.``` https://youtu.be/kSrV-Td6d4A", inline=False)
        embed.add_field(name="NYSE CEO Can now Halt Trading for up to Two Days2️⃣", value="```py\nThe NYSE CEO can now halt trading for up to two days at his own discretion.``` https://youtu.be/1S7kzaT4FYo", inline=False)
        embed.add_field(name="SR-NYSEArca-2021-109 | Liquidity and Price Discovery🔎", value="```py\nNYSEARCA refers to the market share crisis happening in the markets.``` https://youtu.be/53ptYMUqudE", inline=False)
        embed.add_field(name="The NYSE Gives Special treatment to ADRs.💌", value="https://youtu.be/V8ZjerMaq58", inline=False)
        embed.add_field(name="SR-NYSENAT-2022-06 | Directed Orders Added on Exchange🎯", value="https://youtu.be/0q-QndhzuBU", inline=False)
        embed.add_field(name="SR-NYSE-2022-04 | Integrated Market Making🎊", value="```py\nSEC Adopts a new type of Market Making - Integrated Market Making``` https://youtu.be/8lr3Y0Xqp8w", inline=False)
        embed.set_image(url="https://imgs-akamai.mnstatic.com/68/ca/68cad86290980319cbdf0d967deac2ee.jpg")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NyseVIDView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def gohome(self,interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=MainView2())




class VideoView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)


    @disnake.ui.button(label="China", style=disnake.ButtonStyle.blurple)
    async def China( self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="China", description="```py\nChina experienced an earlier lockdown than other countries in the fight against the coronavirus, followed by an earlier easing of restrictions. Government policies in the initial crisis phase focused on containing the coronavirus via lockdowns, travel and immigration restrictions, and strict quarantine regulations. A second phase began in March as the policy focus shifted to a gradual easing of restrictions and the reopening of China’s economy. An important milestone was reached in early April. After 11 weeks, China announced the end of the lockdown in Wuhan, the epicenter of the initial outbreak, allowing stranded travelers and migrant workers to finally return home or to their place of work. Beijing’s successful strategy to contain the coronavirus is being reflected in household and business confidence, which are returning to more normal levels```", color=disnake.Colour.dark_gold())
        embed.add_field(name="2012-2022 | The Completed Puzzle", value="https://youtu.be/cyFyepDlAh8", inline=False)
        embed.add_field(name="Learn about China's Three Red Lines Policy", value="https://youtu.be/qk0zftFn5s8", inline=False)
        embed.add_field(name="Learn about China's Macroeconomic Transformation", value="https://youtu.be/b4KdRT9uKmE", inline=False)
        embed.add_field(name="China's Recovery is Imminent - Learn Why.", value="https://youtu.be/gk_mNOZTN64", inline=False)
        embed.add_field(name="What's coming, what it means, and how to navigate it.", value="https://youtu.be/6u9w8tgjaoI", inline=False)
        embed.add_field(name="China's Transformation Explained", value="https://youtu.be/Uy8cwQylfzM",)
        embed.add_field(name="China IS The Supply Chain Issue", value="https://youtu.be/xwUF4TdfXsM", inline=False)
        embed.set_author(name="FUDSTOP Trading")
        embed.set_image(url="https://th.bing.com/th/id/OIP.hiZ2Ba_VYKvXz0u_zxS3swHaD4?pid=ImgDet&rs=1")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=ChinaView())

    @disnake.ui.button(label="The DTCC / DTC", style=disnake.ButtonStyle.gray)
    async def dtcc( self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="The Depository Trust Clearing Corporation", description="```py\nThe Depository Trust and Clearing Corporation (DTCC) is an American financial services company founded in 1999 that provides clearing and settlement services for the financial markets. When the DTCC was established in 1999, it combined the functions of the Depository Trust Company (DTC) and the National Securities Clearing Corporation (NSCC).1 The NSCC is currently a subsidiary of the DTCC.```", color=disnake.Colour.dark_red())
        embed.set_image(url="https://stopnakedshortselling.org/wp-content/uploads/2020/05/DTCC.jpg")
        embed.add_field(name="DTC-2021-005 | A Closer Look", value="https://youtu.be/DZ4e1zl_LxM", inline=False)
        embed.add_field(name= "DTC-2021-011 - Cyber Attacks / System Failures", value="https://youtu.be/c54ifHkXyIs", inline=False)
        embed.add_field(name= "DTC-2021-014 | Settlement Services for the SFT", value="https://youtu.be/GyglhxT4qR4", inline=False)
        embed.add_field(name= "State Street and DTCC are PARTNERS IN THIS FREE MARKET", value="https://youtu="").be/3I9WfTpsnJQ", inline=False)
        embed.add_field(name= "DRS, Fast Agents, and the DTC | Final Cut", value="https://youtu.be/ioSgS-e58QM", inline=False)
        embed.add_field(name= "DEMAT | DTCC, DRS, and the Uninformed", value="```py\nShare dematerialization has been an ongoing goal of the DTCC for nearly a decade. Learn about DEMAT in this video.``` https://youtu.be/nLttk7nG9ms", inline=False)
        embed.add_field(name= "Overstock Partners with US Treasury and DTCC", value="https://youtu.be/4wuuCmnK7oU", inline=False)
        embed.add_field(name= "DTCC Notice - Changes to Collateralized Haircuts", value="https://youtu.be/Hh70tMs7TkE", inline=False)
        embed.add_field(name= "SEC Filing | DTC 2021 002 - Adjust DTC's Investment Policy", value="https://youtu.be/rntLFb09Kuo", inline=False)
        embed.add_field(name= "Meet the DRS Fast Agents", value="https://youtu.be/SgfJXBINPqY", inline=False)
        embed.add_field(name= "DTC-2021-016 | Governing Law", value="https://youtu.be/g1IbrIdN_2Y", inline=False)
        embed.add_field(name= "DTC/FICC/NSCC increase Capital Requirements", value="https://youtu.be/HkTIiDQYR7o", inline=False)
        embed.add_field(name= "The DRS Guide to Reality", value="https://youtu.be/6TGTvunz9Nw", inline=False)
        embed.add_field(name= "15 Years of Pain - CMKM Diamond", value="https://youtu.be/6TGTvunz9Nw", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=DTCCView())

    @disnake.ui.button(label="The OCC", style=disnake.ButtonStyle.gray, )
    async def occ(self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="The Options Clearing Corporation", description="```py\nOptions Clearing Corporation is a United States clearing house based in Chicago. It specializes in equity derivatives clearing, providing central counterparty clearing and settlement services to 16 exchanges.```", color=disnake.Colour.dark_green())
        embed.add_field(name="OCC-2021-011 | Margin & Defaults", value="https://youtu.be/XJNTt2Yrf30 \n", inline=False)
        embed.add_field(name="SEC FILING OCC-2021-006", value="https://youtu.be/OkiPeHgDimk \n", inline=False)
        embed.add_field(name="SR-OCC-2021-004 Explained in 04:20", value="https://youtu.be/1MCVZH7QvAc \n", inline=False)
        embed.add_field(name="SR-OCC-2021-003 Explained", value="https://youtu.be/ChumKl1SWq8 \n", inline=False)
        embed.add_field(name="Shakeup at the OCC! Beat the news again!", value="https://youtu.be/tc1kn_au3Os \n", inline=False)
        embed.add_field(name="SR-OCC-2021-007 | Force Majeure / Bylaws / Act of God", value="https://youtu.be/BgBfSwFoQ1U \n", inline=False)
        embed.add_field(name="OCC Partial Tear-up Rule Approved", value="https://youtu.be/5s2ytMppZCg \n", inline=False)
        embed.add_field(name="SR-OCC-2021-803 | No Objection", value="https://youtu.be/H_4QuzqLDDc \n", inline=False)
        embed.add_field(name="The OCC Cloud | BIG Changes", value="https://youtu.be/sjCFhzoT6Mo \n", inline=False)
        embed.add_field(name="OCC-2021-013 | Equity Recovery / Operational Loss", value="https://youtu.be/CG6_X6LtwoQ \n", inline=False)
        embed.add_field(name="OCC-2021-014 | The Coming Slaughter", value="https://youtu.be/gT7Z25bnbnU \n", inline=False)
        embed.add_field(name="BREAKING: OCC-2022-801 | A New IV Model", value="https://youtu.be/oOZQCwk7gxc \n", inline=False)
        embed.add_field(name="The OCC Cloud | BIG Changes", value="https://youtu.be/sjCFhzoT6Mo \n", inline=False)
        embed.add_field(name="OCC to collect MARGIN DEFICITS On July 27th", value="https://youtu.be/hc3n2RsMG14 \n", inline=False)
        embed.set_image(url="https://res.cloudinary.com/crunchbase-production/image/upload/c_lpad,h_256,w_256,f_auto,q_auto:eco,dpr_1/ncc2rldzqyqqpk6aoobr")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OCCView())

    @disnake.ui.button(label="The NSCC", style=disnake.ButtonStyle.gray)
    async def nscc(self, interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="The NSCC", description="```py\nNational Securities Clearing Corporation (NSCC) founded in 1976 is a subsidiary of Depository Trust & Clearing Corporation (DTCC). \n The NSCC operates as a seller for every buyer, and buyer for every seller in the financial industry for trades that settle in U.S. markets.```", color=disnake.Colour.dark_gold())
        embed.set_image(url="https://mark.trademarkia.com/logo-images/national-securities-clearing-corporation/ns-cc-73150136.jpg")
        embed.add_field(name="SR-NSCC-2022-009 | The Volatility Charge", value="https://youtu.be/4GERvX7EzZI", inline=False)
        embed.add_field(name="SR-NSCC-2021-007 | System Failure & Market Disruption Events", value="https://youtu.be/-xfHt_8mntg", inline=False)
        embed.add_field(name="SR-NSCC-2021-009 | Tax Obligations", value="https://youtu.be/901q5eaRKEU", inline=False)
        embed.add_field(name="NSCC-2021-803 SFT | Fire Sale and Liquidity Risk Mitigation", value="https://youtu.be/E_hQT954ACM", inline=False)
        embed.add_field(name="NSCC-2021-803 SFT | Agency vs. Principal Model", value="https://youtu.be/WGGCEvOl2io", inline=False)
        embed.add_field(name="NSCC-2021-011 | Game Over", value="https://youtu.be/6-jXYUi4HDs", inline=False)
        embed.add_field(name="SR-NSCC-2021-005 NSCC increases Margin Requirements by 25x", value="https://youtu.be/hHeqaMnkGrk", inline=False)
        embed.add_field(name="NSCC Introduction to Interval Funds", value="https://youtu.be/MdkpF6K85vo")
        embed.add_field(name="NYSE No Longer an NSCC Participant", value="https://youtu.be/t-zi0UED-KQ")
        embed.add_field(name="NSCC - Forced Settlement", value="https://youtu.be/RY0kPXZHQyA", inline=False)
        embed.add_field(name="SR-2021-NSCC-015 | DOUBLE-DEFAULTS and Mutual Funds", value="https://youtu.be/I59a1fwLONA", inline=False)
        embed.add_field(name="The execution of small / medium players in the industry.", value="https://youtu.be/Q6yKY2gdURg", inline=False)
        embed.add_field(name="SR-NSCC-2022-002 | Interval Fund Repurchase Orders", value="https://youtu.be/SP7MekrNQcE", inline=False)
        embed.add_field(name="NSCC SFT Removes Haircut Component from Margin", value="https://youtu.be/3XwWBmq8ggs", inline=False)
        embed.add_field(name="DTC / FICC / NSCC increase capital requirements.", value="https://youtu.be/HkTIiDQYR7o", inline=False)
        embed.add_field(name="NSCC's Stock Borrow Program Loophole Sealed", value="https://youtu.be/9BMludHQAHs", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NSCCView())

    @disnake.ui.button(label="FINRA", style=disnake.ButtonStyle.gray)
    async def finra( self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="Financial Industry Regulatory Authority (FINRA)", description="```py\nUnderstanding FINRA \n FINRA governs brokers and broker-dealer firms -- government lingo for financial institutions. Any institution that you use for a brokerage account or that a business uses to go public or sell securities is governed by FINRA.\n Although it acts as a governor of the industry, FINRA is a non-governmental organization. It is an independent regulatory body financial institutions must register with. The Securities and Exchange Commission (SEC) has given it the authority to discipline financial institutions with fines and other measures.\n " "FINRA exists to protect investors in the following ways:``` ```py\n 1️⃣ Makes sure all security products have been tested and qualified: FINRA-registered brokers can only sell investment products that have been reviewed and approved by the agency. \n2️⃣ Makes sure securities advertisements are truthful and not misleading: You may have noticed the seemingly endless fine print in all financial advertising. FINRA sets and enforces those guidelines.\n3️⃣ Makes sure securities products sold to investors are suitable for their needs: Brokers who sell volatile penny stocks to retirees or expensive annuities to college students will run afoul of FINRA.\n4️⃣ Makes sure investors receive complete disclosure for products before investing: Potential risk and a complete rundown of historical returns must be disclosed to investors.\n```", color=disnake.Colour.dark_orange())
        embed.set_image(url="https://th.bing.com/th/id/R.12686266421d26ae7414dd4e7da61055?rik=fzMjFgIMZj%2fh0w&pid=ImgRaw&r=0")
        embed.add_field(name="Alternate Display Facility - FINRAs Secondary Order Book", value="https://youtu.be/M_9Z4CayCx8", inline=False)
        embed.add_field(name="Alternate Display Facility History", value = "https://youtu.be/52m1cX9Mii8 \n Learn about SuperMontage, the NASD and how they eventually became FINRA - who now operates the two facilities that take up over 75% of market share on a daily basis. **The TRF Carteret Facility** and the **Alternate Display Facility**", inline=False)
        embed.add_field(name="SR FINRA 2021 009 Supplemental Liquidity", value = "https://youtu.be/HAs_aW2l1rI", inline=False)
        embed.add_field(name="FINRA RULE 6439 - New OTC Reporting Requirements", value = "https://youtu.be/GmA5LcaZyxM \n These new reporting requirements can be observed today at https://otce.finra.org/otce/home", inline=False)
        embed.add_field(name="SR-FINRA-2020-04 Restricted Firm Obligations", value = "https://youtu.be/K37TZiKD5gA", inline=False)
        embed.add_field(name="FINRA Partners with the FBI", value="https://youtu.be/oZctWlv3QUw", inline=False)
        embed.add_field(name="SR-FINRA-2021-011 | FINRA Approves Specified Risk Event", value="https://youtu.be/JYpwVZ6OqnY", inline=False)
        embed.add_field(name="SR-FINRA-2022-11 FINRA to Surveille Foreign Fixed Income Debt", value="https://youtu.be/1aUDZcCaopw", inline=False)
        embed.add_field(name="FINRA Treasury Portfolio Descrepancies", value="https://youtu.be/gy8DcK7rNgY", inline=False)
        embed.add_field(name="FINRA Rule 15c2-11", value="https://youtu.be/KKpYE9UJUHg \n **Some** refer to this phenomenon as **the zombie stock** effect. Learn how it works and the governing legislation behind it.", inline=False)
        embed.add_field(name="The Consolidated Audit Trail", value="https://youtu.be/QuMdFtg6ib4 \n Learn about the C.A.T. system that has taken nearly 14 years to complete. Bart of the Basel III reform post 2008 crisis - this is due for **PRODUCTION GO-LIVE** on July 27th.", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=FINRAView())

    @disnake.ui.button(label="The SFT Service", style=disnake.ButtonStyle.green)
    async def sft( self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="The Securities Financing Transaction Service", description="```py\nSFTs are transactions in which a securities lender loans securities to a securities borrower, for a fee. \n\n\n The borrowers typically use the borrowed securities to **cover short sales or fails to deliver that may result from either short or long sales. \n\n A lender typically lends securities to generate income through the fees that it charges. \n\n As a CCP (Central Clearing Counterparty), NSCC would interpose itself between the securities lender and borrower and become the counterparty to each entity. \n\n NSCC would then be obligated to complete the transaction, that is, to return loaned securities to the lender and collateral to the borrower, even if a lender or borrower in an SFT fails to satisfy its obligations, thereby assuming the risk of each entity’s failure to perform to each other.```", color=disnake.Color.random())
        embed.add_field(name="Basel III Regulations and Reforms", value="https://youtu.be/G_4qeFJqSdk \n Learn about the Basel III regulation regime.", inline=False)
        embed.add_field(name="Introduction to the NSCC SFT Service" , value="https://youtu.be/cGjsCr72hjU \n", inline=False)
        embed.add_field(name="SFT: Fire sale + Liquidity Drain Risk Mitigation", value="https://youtu.be/qLmSepmYnSo \n", inline=False)
        embed.add_field(name="Agency and Principal models for the SFT Service", value="https://youtu.be/AhTysJ7Rc2E \n", inline=False)
        embed.set_image(url="https://www.federalreserve.gov/econres/notes/feds-notes/figure-1-collateral.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=SFTView())

    @disnake.ui.button(label="The NET Stable Funding Ratio", style=disnake.ButtonStyle.green)
    async def net( self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="The Net Stable Funding Ratio, TITLE 12 CFR", description="```py\nFollowing the failure of many banks to adequately measure, manage and control their liquidity risk in 2007 and in subsequent years, the Basel Committee on Banking Supervision (BCBS) introduced two liquidity standards as part of the Basel III post-crisis reforms. The first of these is the Liquidity Coverage Ratio (LCR). It enhances banks' short-term resilience and is presented in another Executive Summary. The second standard - the Net Stable Funding Ratio (NSFR) - aims to promote resilience over a longer time horizon by creating incentives for banks to fund their activities with more stable sources of funding on an ongoing basis.```")
        embed.set_image(url="https://www.novantas.com/wp-content/uploads/2016/10/figure1.jpg")
        embed.add_field(name="The Net Stable Funding Ratio - Intro", value="https://youtu.be/LHKekbnr2lY \n Learn about the Title 12 Net Stable Funding Ratio", inline=False)
        embed.add_field(name="This video covers the newly added part - Bank Monitoring", value="https://youtu.be/Al-4tbspxfE", inline=False)
        embed.add_field(name="Banks Corrective Action", value="https://youtu.be/L2L0I_Oxbw0 \n Banks now face prompt corrective action under these scenarios.", inline=False)
        embed.add_field(name="Required Stable Funding", value="https://youtu.be/BoGNFJ25peY \n Learn about the RSF Factors that effect the NSFR.", inline=False)
        embed.add_field(name="Available Stable Funding", value="https://youtu.be/ZOk48dF_TBs, \n Learn about the **ASF factors** that effect the NSFR. (Available Stable Funding)", inline=False)
        embed.add_field(name="Net Stable Funding Ratio Definitions" , value="https://youtu.be/VF5W6j-VSpI \nThis video goes over the newly adopted definitions for TITLE 12 NSFR.", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NSFRView())

    @disnake.ui.button(label="Options 101 Course", style=disnake.ButtonStyle.green)
    async def Options( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Options 101 Course", description="```py\nThis in-depth options 101 course is provided by the 'Options Industry Council.'```")
        embed.add_field(name="#1 Options Introduction", value="https://youtu.be/7jcqknbX99c \n", inline=False)
        embed.add_field(name="#2 Options Terminology", value="https://youtu.be/namg44EBFBs \n", inline=False)
        embed.add_field(name="#3 Call and Put Specifics", value="https://youtu.be/NpSQdICvNBk \n", inline=False)
        embed.add_field(name="#4 Buying Calls", value="https://youtu.be/Bc5gpsa7Z1M \n", inline=False)
        embed.add_field(name="#5 Buying Puts", value="https://youtu.be/jrYUzSibjzo \n", inline=False)
        embed.add_field(name="#6 Options Premium", value="https://youtu.be/22X3h_rwiEA \n", inline=False)
        embed.add_field(name="#7 Options and Exercising - Part 1", value="https://youtu.be/Dgc2fO4GlR8 \n", inline=False)
        embed.add_field(name="#8 Options and Exercising - Part 2", value="https://youtu.be/e_W_5jd-2v4 \n", inline=False)
        embed.add_field(name="#9 Risk versus Reward", value="https://youtu.be/p36Ovh8x89I \n", inline=False)
        embed.add_field(name="WEBINAR: Covered Calls / Poor Man's Covered Calls / Leaps", value="https://youtu.be/ySoXAKuNjxg", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=Opt101View())


    @disnake.ui.button(label="Chicago Board Options Exchange (CBOE)", style=disnake.ButtonStyle.green)
    async def cboe( self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="The Chicago Board Options Exchange (CBOE)", description="```py\nCBOE is the abbreviation for the Chicago Board Options Exchange. It is the world's largest options exchange, having served as an innovator of new option-based products since its first day of trading in 1973. The CBOE offers options contracts on hundreds of stocks and exchange-traded funds, as well as several of the most popular stock indexes. \n\n Among its proprietary products are stock index options on the **S&P 500 (^GSPC)**, which are the most active index options in the U.S. market. These and other financial products give investors the opportunity to manage risk in executing their investment strategies.```", url="https://www.cboe.com/us/equities/market_share/", color=disnake.Colour.dark_orange())
        embed.set_image(url="https://th.bing.com/th/id/OIP.D58Ciou2qdjSeY0tCcCVVwHaEH?pid=ImgDet&rs=1")
        embed.add_field(name="SR-CBOE-2021-02 | ETF Manipulation", value="https://youtu.be/vQCH8teGyHQ \n CBOE Files and specifically refers to ETFs being bad for price discovery in markets.", inline=False)
        embed.add_field(name="SR-CBOE-2021-039 - The Market Share Crisis", value="https://youtu.be/WlAlny63XD4", inline=False)
        embed.add_field(name="SR-CBOE-2021-040 | Automated Halts", value="https://youtu.be/Z6UO5qwv8es \n Learn about automated trading halts.", inline=False)
        embed.add_field(name="SR CboeBZX-2021-055 | Price Discovery and Liquidity", value="https://youtu.be/qVsKTX3Ui3o \n", inline=False)
        embed.add_field(name="SR-CboeBZX-2022-009 | Drill-Through Price Protection", value="https://youtu.be/fqSCRm8SoYI, \n Learn about drill-throgh price protection.", inline=False)
        embed.add_field(name="CBOE-2021-045 | Rule Violation Plan" , value="https://youtu.be/RPGF-MjD62I \n Learn about CBOE's Rule Violation Plan", inline=False)
        embed.add_field(name="CBOE Options Start Trading at 2:30AM EST", value="https://youtu.be/tSvsur3vSC0 \n CBOE Opens up trading to participants as early as **3:30 AM now - 1 hour and 30 minutes before the regular Pre-Market session begins.**", inline=False)
        embed.add_field(name="SR-CboeBZX-2021-058 - Rebates for LIQUIDATED ETFs", value="https://youtu.be/eXFqVkAjvqY \n", inline=False)
        embed.add_field(name="Options Position Limits Increased on CBOE Exchanges", value="https://youtu.be/UrSUMAKWNBA \n ", inline=False)
        embed.add_field(name="SR-Cboe-2021-026 - Extreme Duplicate Price Protection" , value="https://youtu.be/z9o4xb7gCmU \n", inline=False)
        embed.add_field(name="The CBOE Volatility Index (VIX)", value="https://youtu.be/B1wIJ4duwzM \n You've probably heard of the VIX index, and maybe have even traded it. This video goes into detail about the VIX and its' background.", inline=False)
        embed.add_field(name="CBOE BZX | 086 - Amend the Opening Auction", value="https://youtu.be/mgaiE3dCKd0 \n CBOE Amends the opening auction for options.", inline=False)
        embed.add_field(name="CBOE EdGX-2021-048 - Easy To Borrow Securities" , value="https://youtu.be/7PEe99ZRA5o \n", inline=False)
        embed.add_field(name="SR-2021-CBOE-071 | CBOE Adds The New Curb Trading Session", value="https://youtu.be/M48zMHH57-Q \n CBOE adds the new 'curb' trading session.", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=CBOEView())

    @disnake.ui.button(label="Intercontinental Exchange", style=disnake.ButtonStyle.red)
    async def ice( self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="Intercontinental Exchange (ICE)", description="```py\nThe Intercontinental Exchange (ICE) is an American company formed in 2000 that operates global financial exchanges, clearing houses and provides mortgage technology, data and listing services. \n Listed on the **Fortune 500, S&P 500, and Russell 1000**, the company owns exchanges for financial and commodity markets, and operates 12 regulated exchanges and marketplaces. \n\n This includes ICE futures exchanges in the United States, Canada and Europe, the Liffe futures exchanges in Europe, the New York Stock Exchange, equity options exchanges and OTC energy, credit and equity markets. \n\nICE also owns and operates six central clearing houses:``` ```py\nICE Clear U.S., ICE Clear Europe, ICE Clear Singapore, ICE Clear Credit, ICE Clear Netherlands and ICE NGX. ICE has offices in Atlanta, New York, London, Chicago, Bedford, Houston, Winnipeg, Amsterdam, Calgary, Washington, D.C., San Francisco, Tel Aviv, Rome, Hyderabad, Singapore and Melbourne.```", color=disnake.Color.random())
        embed.set_image(url="https://mms.businesswire.com/media/20181210005339/en/411456/23/ICE_R_colour.jpg")
        embed.add_field(name="SR ICC 2021 005 Wind Down and Recovery", value="https://youtu.be/C6I29AICIsg \n", inline=False)
        embed.add_field(name="SR-ICC-2021-009 Explained in 3:33", value="https://youtu.be/CKEIAcWtKi0 \n Yet another risk based filing out of ICE.", inline=False)
        embed.add_field(name="ICC Approved Filing to Enhance Price Discovery for Options / CDS" , value="https://youtu.be/ClYYDRl2FWY \n", inline=False)
        embed.add_field(name="SR-ICC-2022-005 SWAPS ! Russian / Emerging Market SWAPS", value="https://youtu.be/FgjhEIeYiaA \n", inline=False)
        embed.add_field(name="SR-ICC-2021-015 | Beefing Up before Defaults", value="https://youtu.be/a7eU-lW-eZc \n", inline=False)
        embed.add_field(name="SR-ICEEU-2021-010 More Default Preparations", value="https://youtu.be/IYl511Yb3_o \n", inline=False)
        embed.add_field(name="ICE EUROPE - Libor Transition = More Potential Margin Calls", value="https://youtu.be/y6hS8wh4nY8 \n", inline=False)
        embed.add_field(name="ICE Prepares for Market-Wide Volatility", value="https://youtu.be/98DcxEVwBak \n", inline=False)
        embed.add_field(name="ICEEU-2022-005 | Cash Margin & Liquidity Risk", value="https://youtu.be/qi5A6OFAYhs \n", inline=False)
        embed.add_field(name="ICE Clear Credit Fixes 30minute Delivery Loophole for Swaps", value="https://youtu.be/_I2znHus9tw \n", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=ICEView())

    @disnake.ui.button(label="Exchange Traded Funds", style=disnake.ButtonStyle.red)
    async def etfs( self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="Exchange Traded Funds", description="```py\nAn exchange-traded fund (ETF) is a basket of securities that trades on an exchange just like a stock does. \n ETF share prices fluctuate all day as the ETF is bought and sold this is different from mutual funds, which only trade once a day after the market closes. \n ETFs can contain all types of investments, including stocks, commodities, or bonds; some offer U.S.-only holdings, while others are international. \n ETFs offer low expense ratios and fewer broker commissions than buying the stocks individually.```", color=disnake.Colour.random())
        embed.add_field(name= "ETF Mechanics 101", value="https://youtu.be/CgsFdfTavvk \n Learn the basics of ETFs and how they work as explained by BlackRock.", inline=False)
        embed.add_field(name="Why ETFs Are Shorted", value="https://youtu.be/aeW_ETxGumc \n **Shorting** provides price disovery and liquidity in markets.", inline=False)
        embed.add_field(name="The ETF Ecosystem Creation Process", value="https://youtu.be/-SCL8F-ovgA \n Learn about how ETF **creation** and **redemption** works in this video.", inline=False)
        embed.add_field(name="ETF Mechanics", value="https://youtu.be/CgsFdfTavvk \n Learn about the mechanics of **ETFs**.", inline=False)
        embed.add_field(name="BlackRock's ETF Ecosystem", value="https://youtu.be/2tvcXsCq-Dc \n **Learn about the **ETF Ecosystem** as described by BlackRock from their own underlying documentation.", inline=False)
        embed.add_field(name="HDG mimics Market Making", value="https://youtu.be/e47kqgU2zt4 \n Yes. An ETF that is designed to mimic the actions of a market maker - ergo - an ETF which makes markets. (algorithim)", inline=False)
        embed.add_field(name="EXEMPTIVE RELIEF | Custom ETF Baskets", value="https://youtu.be/JeFYmKHtQ5A", inline=False)
        embed.add_field(name="NYSE ARCA wants more LIQUIDITY from ETFs and OPTIONS", value="https://youtu.be/b4KdRT9uKmE", inline=False)
        embed.add_field(name="Confirmed Lending - END Game ETFs", value="https://youtu.be/3G8Jm3RkwQE", inline=False)
        embed.add_field(name="ETF Liquidity | The Primary and Secondary Markets", value="https://youtu.be/CTiNffK2z00", inline=False)
        embed.set_image(url="https://th.bing.com/th/id/OIP._P3ktPObbhWdc_PWhS4yqgHaDM?pid=ImgDet&rs=1")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=ETFView())

    @disnake.ui.button(label="The New York Stock Exchange", style=disnake.ButtonStyle.red)
    async def nyse( self,interaction: disnake.ApplicationCommandInteraction):
        embed = disnake.Embed(title="The New York Stock Exchange", description="```py\nThe NYSE is by far the world's largest stock exchange by market capitalization of its listed companies.")
        embed.add_field(name="The Designated Market Maker👷‍♂️", value="https://youtu.be/zFXZRspjOxY \n A designated market maker is one that has been selected by the exchange as the primary market maker for a given security. A DMM is responsible for maintaining quotes and facilitating buy and sell transactions. Market makers are sometimes making markets for several hundred of listed stocks at a time.```", inline=False)
        embed.add_field(name="Dark Pools, Dark Fibers, and the NYSE🧵", value="https://youtu.be/0073Jg8hY-4 \n Hello all," "So while this topic is being dismissed by a few people, I find it interesting that I keep finding more and more information that links the NYSE to some form of dark manipulation. Dark meaning undetected." "Here's a link to an investigation that was conducted from the National Securities Exchange of India that was found to be using dark fibers as a method of manipulating the markets by undercutting other members with a latency advantage." "https://www.moneylife.in/article/nse-dark-fibre-scam-sebi-alleges-manipulation-irregular-acts-poor-due-diligence-fraud-misrepresentation-and-false-statements/57058.html#:~:text=NSE%20has%20been%20directed%20to,whole%20%E2%80%9Cdark%20fibre%E2%80%9D%20episode." "Also, the filing that we saw SUSPENDING THIRD PARTY DATA SYSTEMS, which dark pools require to operate, **IN FACT ALLOW CONNECTIVITY THROUGH DARK FIBER.**" "Coincidence? Change my mind.", inline=False)
        embed.add_field(name="The NYSE Adopts the Retail Order Type🚬", value="https://youtu.be/PVFECoLEIpU \n", inline=False)
        embed.add_field(name="SR-NYSEARCA-2021-47 | The OX and Pillar Systems🐂", value="**https://youtu.be/tZ4M0vDj37s** \n “OX** refers to the Exchange’s current electronic order delivery, execution, and reporting system for designated option issues through which orders and quotes of Users are consolidated for execution and/or display.** \n **“OX Book** refers to the OX’s electronic file of orders and quotes, which contain all of the orders in each of the Display Order and Working Order processes and all of the Market Makers’ quotes in the Display Order Process. \n **NYSE Pillar** is the new integrated trading technology platform that will enable member firms to connect to all NYSE equities and options markets using a standard protocol. ", inline=False)
        embed.add_field(name="NYSE-ARCA-2021-58 || Options Fee Schedule Modifications (Liquidity)💦", value="https://youtu.be/b4KdRT9uKmE \n Whenever you see a filing that's related to FEE SCHEDULES - it means they're filing for either: \n 1️⃣ **Liqudity** \n 2️⃣ **More Market share** \n 3️⃣ **Price Discovery**", inline=False)
        embed.add_field(name="SR-NYSEArca-2021-55 | Options Series⭕", value="https://youtu.be/hHz6QBoF5tE \n **NYSE Arca files for more efficient Option's Chain They say straight up in the filing that Market Makers are using their capital inefficiently to quote options. We all know why. \n Here's the link: https://public-inspection.federalregister.gov/2021-14792.pdf**", inline=False)
        embed.add_field(name="SR-NYSE-2021-40 | Trading Halt Permeance🚫", value="https://youtu.be/lLnCbYqf1W0 \n **Learn about trading halts on the NYSE.", inline=False)
        embed.add_field(name="Retail Orders cannot be executed by Algorithims🤖", value="https://youtu.be/DjegbrqKnSY \n ", inline=False)
        embed.add_field(name="SR-NYSEArca-2021-63 | Risk / Hedging🌳", value="https://youtu.be/qH_gVxNWCcI \n ", inline=False)
        embed.add_field(name="SR-NYSEARCA-2021-66 Reformat the Basic Rates Section➿", value="https://youtu.be/epkyjA2y8Sk", inline=False)
        embed.add_field(name="SR-NYSE-2021-045 Acquisition Spinoffs📴", value="https://youtu.be/yiZwfLwySVM")
        embed.add_field(name="SR-NYSEARCA-2021-74 | A highly Competitive Market☠️", value="https://youtu.be/VAjXpBv4O3o \n The exchange alludes to the fact that the market is highly competetive - BUT is also **highly fragmented** due to the large concentration of off-exchange dark pool flow coming out of the **FINRA ADF** and **FINRA TRF CARTERET** facilities.", inline=False)
        embed.add_field(name="SR-NYSEARCA-2021-84 | Proxy Portfolios🥠", value="https://youtu.be/kSrV-Td6d4A \n Learn about proxy portfolios. It's absurd to say the least.", inline=False)
        embed.add_field(name="NYSE CEO Can now Halt Trading for up to Two Days2️⃣", value="https://youtu.be/1S7kzaT4FYo \n The NYSE CEO can now halt trading for up to two days at his own discretion.", inline=False)
        embed.add_field(name="SR-NYSEArca-2021-109 | Liquidity and Price Discovery🔎", value="https://youtu.be/53ptYMUqudE \n NYSEARCA refers to the market share crisis happening in the markets.", inline=False)
        embed.add_field(name="The NYSE Gives Special treatment to ADRs.💌", value="https://youtu.be/V8ZjerMaq58", inline=False)
        embed.add_field(name="SR-NYSENAT-2022-06 | Directed Orders Added on Exchange🎯", value="https://youtu.be/0q-QndhzuBU", inline=False)
        embed.add_field(name="SR-NYSE-2022-04 | Integrated Market Making🎊", value="https://youtu.be/8lr3Y0Xqp8w \n SEC Adopts a new type of Market Making - Integrated Market Making", inline=False)
        embed.set_image(url="https://imgs-akamai.mnstatic.com/68/ca/68cad86290980319cbdf0d967deac2ee.jpg")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=NyseVIDView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def gohome( self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message()

    @disnake.ui.button(label="📌", style=disnake.ButtonStyle.red)
    async def pin(self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message(view=None)


class ChinaView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="2012-2022 | The Completed Puzzle", url="https://youtu.be/cyFyepDlAh8"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Learn about China's Three Red Lines Policy", url="https://youtu.be/qk0zftFn5s8"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Learn about China's Macroeconomic Transformation", url="https://youtu.be/b4KdRT9uKmE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="China's Recovery is Imminent - Learn Why.", url="https://youtu.be/gk_mNOZTN64"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="What's coming, what it means, and how to navigate it.", url="https://youtu.be/6u9w8tgjaoI"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="China's Transformation Explained", url="https://youtu.be/Uy8cwQylfzM"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="China IS The Supply Chain Issue", url="https://youtu.be/xwUF4TdfXsM"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home(self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message()

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple)
    async def goback(self, interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message(view=VideoView())



class NSFRView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="This video covers the newly added part - Bank Monitoring", url="https://youtu.be/Al-4tbspxfE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Banks Corrective Action", url="https://youtu.be/L2L0I_Oxbw0"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Required Stable Funding", url="https://youtu.be/BoGNFJ25peY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Available Stable Funding", url="https://youtu.be/ZOk48dF_TBs Stable Funding"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Net Stable Funding Ratio Definitions" , url="https://youtu.be/VF5W6j-VSpI"))

    @disnake.ui.button(label="NSFR LINKS", style=disnake.ButtonStyle.blurple)
    async def etfs(self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message(view=NSFRView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home(self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message()

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple)
    async def goback(self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message(view=VideoView())



class Opt101View(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#1 Options Introduction", url="https://youtu.be/7jcqknbX99c"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#2 Options Terminology", url="https://youtu.be/namg44EBFBs"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#3 Call and Put Specifics", url="https://youtu.be/NpSQdICvNBk"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#4 Buying Calls", url="https://youtu.be/Bc5gpsa7Z1M"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#5 Buying Puts", url="https://youtu.be/jrYUzSibjzo"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#6 Options Premium", url="https://youtu.be/22X3h_rwiEA"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#7 Options and Exercising - Part 1", url="https://youtu.be/Dgc2fO4GlR8"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#8 Options and Exercising - Part 2", url="https://youtu.be/e_W_5jd-2v4"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="#9 Risk versus Reward", url="https://youtu.be/p36Ovh8x89I"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="WEBINAR: Covered Calls / Poor Man's Covered Calls / Leaps", url="https://youtu.be/ySoXAKuNjxg"))

    @disnake.ui.button(label="OPTION COURSE LINKS", style=disnake.ButtonStyle.blurple)
    async def etfs(self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message(view=Opt101View())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home(self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message()

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple)
    async def goback(self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message(view=VideoView())

class FINRAView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Alternate Display Facility - FINRAs Secondary Order Book", url="https://youtu.be/M_9Z4CayCx8"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Alternate Display Facility History", url= "https://youtu.be/52m1cX9Mii8"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR FINRA 2021 009 Supplemental Liquidity", url= "https://youtu.be/HAs_aW2l1rI"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="FINRA RULE 6439 - New OTC Reporting Requirements", url= "https://youtu.be/GmA5LcaZyxM"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-FINRA-2020-04 Restricted Firm Obligations", url= "https://youtu.be/K37TZiKD5gA"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="FINRA Partners with the FBI", url="https://youtu.be/oZctWlv3QUw"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-FINRA-2021-011 | FINRA Approves Specified Risk Event", url="https://youtu.be/JYpwVZ6OqnY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-FINRA-2022-11 FINRA to Surveille Foreign Fixed Income Debt", url="https://youtu.be/1aUDZcCaopw"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="FINRA Treasury Portfolio Descrepancies", url="https://youtu.be/gy8DcK7rNgY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="FINRA Rule 15c2-11", url="https://youtu.be/KKpYE9UJUHg"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The Consolidated Audit Trail", url="https://youtu.be/QuMdFtg6ib4"))

    @disnake.ui.button(label="FINRA LINKS", style=disnake.ButtonStyle.blurple)
    async def etfs( self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message(view=FINRAView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home( self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message()

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple)
    async def goback( self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message(view=VideoView())


class NyseVIDView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The Designated Market Maker👷‍♂️", url="https://youtu.be/zFXZRspjOxY" ))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Dark Pools, Dark Fibers, and the NYSE🧵", url="https://youtu.be/0073Jg8hY-4"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The NYSE Adopts the Retail Order Type🚬",url="https://youtu.be/PVFECoLEIpU"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-47 | The OX and Pillar Systems🐂", url="https://youtu.be/tZ4M0vDj37s"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NYSE-ARCA-2021-58 || Options Fee Schedule Modifications (Liquidity)💦", url="https://youtu.be/b4KdRT9uKmE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEArca-2021-55 | Options Series⭕", url="https://youtu.be/hHz6QBoF5tE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSE-2021-40 | Trading Halt Permeance🚫", url="https://youtu.be/lLnCbYqf1W0"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Retail Orders cannot be executed by Algorithims🤖", url="https://youtu.be/DjegbrqKnSY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEArca-2021-63 | Risk / Hedging🌳", url="https://youtu.be/qH_gVxNWCcI"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-66 Reformat the Basic Rates Section➿", url="https://youtu.be/epkyjA2y8Sk"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSE-2021-045 Acquisition Spinoffs📴", url="https://youtu.be/yiZwfLwySVM"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-74 | A highly Competitive Market☠️", url="https://youtu.be/VAjXpBv4O3o"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEARCA-2021-84 | Proxy Portfolios🥠", url="https://youtu.be/kSrV-Td6d4A"))# \n Learn about proxy portfolios. It's absurd to say the least.", inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NYSE CEO Can now Halt Trading for up to Two Days2️⃣",url="https://youtu.be/1S7kzaT4FYo"))# \n The NYSE CEO can now halt trading for up to two days at his own discretion.", inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSEArca-2021-109 | Liquidity and Price Discovery🔎", url="https://youtu.be/53ptYMUqudE"))# \n NYSEARCA refers to the market share crisis happening in the markets.", inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The NYSE Gives Special treatment to ADRs.💌", url="https://youtu.be/V8ZjerMaq58"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSENAT-2022-06 | Directed Orders Added on Exchange🎯", url="https://youtu.be/0q-QndhzuBU"))# inline=False)
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NYSE-2022-04 | Integrated Market Making🎊",url="https://youtu.be/8lr3Y0Xqp8w")) #\n SEC Adopts a new type of Market Making - Integrated Market Making", inline=False)


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home(self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message()

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple)
    async def goback(self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message(view=VideoView())

    @disnake.ui.button(label="📌", style=disnake.ButtonStyle.red)
    async def pin(self,interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.edit_message(view=None)



class OpportunitiesView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="SMILES😄", style=disnake.ButtonStyle.green)
    async def smiles(self,interaction: ApplicationCommandInteraction):   
        embed = disnake.Embed(title="Option Smile Strategy", description="When you hear the term **option smile** all you need to do is realize that an option smile = the **lowest IV strike falling out of the money**. \n\n **THIS CAN HAPPEN FOR BOTH CALLS AND PUTS.** \n\n ", color=disnake.Colour.random())
        embed.set_image(url="https://media.discordapp.net/attachments/896207280117264434/955135923530629190/816.png?width=789&height=629")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=SmilesView())
    
    
    @disnake.ui.button(label="Core🧠", style=disnake.ButtonStyle.green)
    async def avoid(self,interaction: ApplicationCommandInteraction):         
        embed = disnake.Embed(title="Core🧠", color = disnake.Colour.random())
        embed.add_field(name="Note🧠", value="**The core logic is your **PRIMARY** gain builder. Any other category of plays here should only be considered IF YOU HAVE THE GAINS FROM CORE TO USE AS YOUR INVESTMENT.** \n\n If you are new - this is where to begin.", inline = True)
        embed.add_field(name="STEP 1", value="Our core logic revolves around the 14 day **RSI** indicator, as well as **GAPS** on daily charts. The best way to start is to **look for tickers with RSI that are lower than 25, or higher than 72.** \n\n The **alphaquery screener** button below can help with this task.**")
        embed.add_field(name="STEP 2", value="Once you've ran the screener and have found tickers with RSI below 25 or above 72, make sure: \n\n **NONE ARE HEALTHCARE** - Healthcare stocks tend to not work as well on the core logic. Also **AVOID ETFS**. \n\n **MAKE SURE NONE ARE WEEKLY OPTIONS** - Weekly options have more liquidity, and more room for the MMs to reallocate their positions. Stick to **monthly** expirations for the best success.")
        embed.set_image(url="https://i.ibb.co/ryBg8vy/rsioversoldoverbought.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CoreView())

    @disnake.ui.button(label="Spy🕵️", style=disnake.ButtonStyle.red)
    async def spy(self,interaction: ApplicationCommandInteraction):         
        embed = disnake.Embed(title="Spy🕵️", color = disnake.Colour.random())
        embed.add_field(name="Spy🕵️", value="**SPY** IS ONE OF THE MOST LIQUID TICKERS IN THE MARKET. \n\n **I HIGHLY RECOMMEND AVOIDING SPY UNTIL YOU GRASP CORE.** \n\n PLAY SPY WITH PROFITS ONLY IS MY RECOMMENDATION. TRADE AT YOUR OWN RISK.", inline = True)
        embed.add_field(name="Spy Relevance🕵️", value="**SPY** is best played around macro-economic events and especially around FOMC meetings. Other than that - the **CORE LOGIC** is the supreme logic and is what should be learned and practiced by anyone looking to scale gains consistently.", inline = True)
        embed.set_image(url="https://i.ibb.co/RpVdxH7/SPYNO.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=SpyView())

    @disnake.ui.button(label="China☯️", style=disnake.ButtonStyle.blurple)
    async def china(self,interaction: ApplicationCommandInteraction):   
        embed = disnake.Embed(title="China's Economic transformation☯️", description="China is the other end of United States Monetary Policy. Coined the 'yin-yang' by some retard on the internet the documentation is clear: \n\n China is an upcoming superpower - and their markets are EMERGING, and their tech and educational space is a sound investment once you understand the economic revolution that's occured for the better part of two decades.", color=disnake.Colour.random())
        embed.set_image(url="https://media.discordapp.net/attachments/896207280117264434/955135923530629190/816.png?width=789&height=629")
        await interaction.response.edit_message(embed=embed, view=ChinaOptView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home(self,interaction: ApplicationCommandInteraction):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )




class CoresView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)


    @disnake.ui.button(label="OG Core🧠 Step 1", style=disnake.ButtonStyle.red)
    async def step1(self,interaction: ApplicationCommandInteraction): 
        embed = disnake.Embed(title="OG Core🧠 Step 1", color = disnake.Colour.random())
        embed.add_field(name="STEP 1", value="Our core logic revolves around the 14 day **RSI** indicator, as well as **GAPS** on daily charts. The best way to start is to **look for tickers with RSI that are lower than 25, or higher than 72.** \n\n The **alphaquery screener** button below can help with this task.**")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CoresView())
    
    @disnake.ui.button(label="OG Core🧠 Step 2🧠", style=disnake.ButtonStyle.red)
    async def step2(self,interaction: ApplicationCommandInteraction):         
        embed = disnake.Embed(title="OG Core🧠 Step 2", color = disnake.Colour.random())
        embed.add_field(name="OG Core🧠 Step 2", value="Once you've ran the screener and have found tickers with RSI below 25 or above 72, make sure: \n\n **NONE ARE HEALTHCARE** - Healthcare stocks tend to not work as well on the core logic. Also **AVOID ETFS**. \n\n **MAKE SURE NONE ARE WEEKLY OPTIONS** - Weekly options have more liquidity, and more room for the MMs to reallocate their positions. Stick to **monthly** expirations for the best success.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CoresView())
        
    @disnake.ui.button(label="Core🧠 Step 3", style=disnake.ButtonStyle.red)
    async def step3(self,interaction: ApplicationCommandInteraction):            
        embed = disnake.Embed(title="OG Core🧠 Step 3", color = disnake.Colour.random())
        embed.add_field(name="Core🧠 Step 3", value="Once you confirm the RSI levels are overbought or oversold / confirm there are no HEALTHCARE /ETFs / corporate actions / or weekly options - look to purchase **IN THE MONEY** calls or puts.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CoresView())
    
    @disnake.ui.button(label="Core🧠 Step 4", style=disnake.ButtonStyle.red)
    async def step4(self,interaction: ApplicationCommandInteraction):            
        embed = disnake.Embed(title="OG Core🧠 Step 4", color = disnake.Colour.random())
        embed.add_field(name="Core🧠 Step 4", value="To help time your entry - you can use the 3-5 minute **MACD** indicator to help with timing. You'd want to time the entry around the MACD crosses as shown in the image.")
        embed.set_image(url="https://i.ibb.co/pPhC15K/MACD-CHART.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CoresView())
    
    @disnake.ui.button(label="Core🧠 Step 5", style=disnake.ButtonStyle.red)
    async def step5(self,interaction: ApplicationCommandInteraction): 
        embed = disnake.Embed(title="Core🧠 Step 5", color = disnake.Colour.random())
        embed.add_field(name="Core🧠 Step 5", value="**Once you're in your position: HAVE PATIENCE. Your exit strategy: **IF IN PROFIT** or **IF PUSHED OUT OF THE MONEY**. It's as easy as that!**")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=CoresView())


    @disnake.ui.button(label="What to Avoid❌", style=disnake.ButtonStyle.red)
    async def avoid(self,interaction: ApplicationCommandInteraction):         
        embed = disnake.Embed(title="What to Avoid❌", color = disnake.Colour.random())
        embed.add_field(name="Avoid Corporate Actions", value="**When you see a super over-bought RSI that gaps up on the **daily** and consolidates - look to the news to confirm a corporate action. **Buyouts, mergers, splits, reverse splits, etc. are corporate actions - and should be avoided. \n\n This image here is exactly what to avoid.", inline = True)
        embed.add_field(name="Avoid Weekly Expirations🗓️", value="**Weekly expirations have more liquidity, and are typically more popular. Avoid them for best results when utilizing the core logic.**", inline = True)
        embed.add_field(name="Never Buy The Ask🙅‍♂️", value="**NEVER BUY THE ASK!** \n\n When you buy the ask, you're paying a PREMIUM. With illiquid options - **always buy between the MID and the BID. \n\n If it helps - set-up your options chain where the ask price is not visible. Out of sight out of mind!**", inline = True)
        embed.set_image(url="https://i.ibb.co/gSM3S52/CORPACTION.png")
        embed.add_field(name="Stay IN THE MONEY🚮", value="**Get in the habit of buying IN THE MONEY** \n\n YES - In the money contracts are more expensive - because they hold more VALUE. \n\n When sitting out of the money - not only do you have zero intrinsic value - but theta will eat away at your cost average much faster. Play it safe and stick to what works - IN THE MONEY. \n\n **IN THE MONEY FOR PUTS:** Any strike **ABOVE** the current price. \n\n **IN THE MONEY FOR CALLS:** Any strike **BELOW** the current price.", inline = True)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=AvoidView())
        
    
    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def gohome(self,interaction: ApplicationCommandInteraction):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )




class ChinaOptView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="China Screeners", style=disnake.ButtonStyle.blurple)
    async def chinascreeners(self,interaction: ApplicationCommandInteraction):
        em = disnake.Embed(title='China Screeners', url='https://www.alphaquery.com/saved-queries', description="Run these queries to return back tickers that meet certain characteristics. \n Easily find protective put opportunities against your current China positions by running these. \n **Updated automatically, daily.**", color=disnake.Colour.random())
        em.add_field(name='CHINESE ADRS WITH AN RSI <=30🟢', value='https://www.alphaquery.com/query/300010258?run=1 \n This screener returns any Chinese ADRs with an oversold RSI for thos who have not entered yet.')
        em.add_field(name="China Protective Put Screener || RSI >=70 🔴", value="https://www.alphaquery.com/query/300010259?run=1")
        em.add_field(name='CHINESE ADRS WITH AN RSI <=30🟢', value='https://www.alphaquery.com/query/300010258?run=1 \n This screener returns any Chinese ADRs with an oversold RSI for thos who have not entered yet.')
        em.add_field(name="China Protective Put Screener || RSI >=70 🔴", value="https://www.alphaquery.com/query/300010259?run=1")
        await interaction.response.edit_message(embed = em, view=ScreenerView())

    @disnake.ui.button(label="China Explanations", style=disnake.ButtonStyle.blurple)
    async def chinaexplanations(self,interaction: ApplicationCommandInteraction):
        em = disnake.Embed(title="China Explanations", description = "Learn about why I'm bullish on China.")
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, view=ChinaView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def gohome(self,interaction: ApplicationCommandInteraction):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple)
    async def goback(self,interaction: ApplicationCommandInteraction):
        em = disnake.Embed(title="Opportunities Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, view=OpportunitiesView())



class ETFView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        embed= disnake.Embed(title="Exchange Traded Funds", description="👇", color=disnake.Colour.random())
        embed.add_field(name="CLICK THE BUTTON BELOW", value="👇")
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ETF Mechanics 101", url="https://youtu.be/CgsFdfTavvk"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Why ETFs Are Shorted", url="https://youtu.be/aeW_ETxGumc"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The ETF Ecosystem Creation Process", url="https://youtu.be/-SCL8F-ovgA"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="BlackRock's ETF Ecosystem", url="https://youtu.be/2tvcXsCq-Dc"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="HDG mimics Market Making", url="https://youtu.be/e47kqgU2zt4"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="EXEMPTIVE RELIEF | Custom ETF Baskets", url="https://youtu.be/JeFYmKHtQ5A"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NYSE ARCA wants more LIQUIDITY from ETFs and OPTIONS", url="https://youtu.be/b4KdRT9uKmE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Confirmed Lending - END Game ETFs", url="https://youtu.be/3G8Jm3RkwQE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ETF Liquidity | The Primary and Secondary Markets", url="https://youtu.be/CTiNffK2z00"))
        


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home(self,interaction: ApplicationCommandInteraction):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple)
    async def goback(self,interaction: ApplicationCommandInteraction):
        em = disnake.Embed(title="eo Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, view=VideoView())




class ICEView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR ICC 2021 005 Wind Down and Recovery", url="https://youtu.be/C6I29AICIsg"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-ICC-2021-009 Explained in 3:33", url="https://youtu.be/CKEIAcWtKi0"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ICC Approved Filing to Enhance Price Discovery for Options / CDS" , url="https://youtu.be/ClYYDRl2FWY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-ICC-2022-005 SWAPS ! Russian / Emerging Market SWAPS", url="https://youtu.be/FgjhEIeYiaA"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-ICC-2021-015 | Beefing Up before Defaults", url="https://youtu.be/a7eU-lW-eZc"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-ICEEU-2021-010 More Default Preparations", url="https://youtu.be/IYl511Yb3_o"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ICE EUROPE - Libor Transition = More Potential Margin Calls", url="https://youtu.be/y6hS8wh4nY8"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ICE Prepares for Market-Wide Volatility", url="https://youtu.be/98DcxEVwBak"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ICEEU-2022-005 | Cash Margin & Liquidity Risk", url="https://youtu.be/qi5A6OFAYhs"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="ICE Clear Credit Fixes 30minute Delivery Loophole for Swaps", url="https://youtu.be/_I2znHus9tw"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home(self,interaction: ApplicationCommandInteraction):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple)
    async def goback(self,interaction: ApplicationCommandInteraction):
        em = disnake.Embed(title="eo Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, view=VideoView())


class DTCCView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DTC-2021-005 | A Closer Look", url="https://youtu.be/DZ4e1zl_LxM"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "DTC-2021-011 - Cyber Attacks / System Failures", url="https://youtu.be/c54ifHkXyIs"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "DTC-2021-014 | Settlement Services for the SFT", url="https://youtu.be/GyglhxT4qR4"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "State Street and DTCC are PARTNERS IN THIS FREE MARKET", url="https://youtu.be/3I9WfTpsnJQ"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "DRS, Fast Agents, and the DTC | Final Cut", url="https://youtu.be/ioSgS-e58QM"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "DEMAT | DTCC, DRS, and the Uninformed", url="https://youtu.be/nLttk7nG9ms"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "Overstock Partners with US Treasury and DTCC", url="https://youtu.be/4wuuCmnK7oU"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "DTCC Notice - Changes to Collateralized Haircuts", url="https://youtu.be/Hh70tMs7TkE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "SEC Filing | DTC 2021 002 - Adjust DTC's Investment Policy", url="https://youtu.be/rntLFb09Kuo"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "Meet the DRS Fast Agents", url="https://youtu.be/SgfJXBINPqY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "DTC-2021-016 | Governing Law", url="https://youtu.be/g1IbrIdN_2Y"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "DTC/FICC/NSCC increase Capital Requirements", url="https://youtu.be/HkTIiDQYR7o"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "The DRS Guide to Reality", url="https://youtu.be/6TGTvunz9Nw"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label= "15 Years of Pain - CMKM Diamond", url="https://youtu.be/6TGTvunz9Nw"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home(self,interaction: ApplicationCommandInteraction):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=em, )

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple)
    async def goback(self,interaction: ApplicationCommandInteraction):
        em = disnake.Embed(title="eo Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        em.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed = em, view=VideoView())



class CBOEView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-CBOE-2021-02 | ETF Manipulation", url="https://youtu.be/vQCH8teGyHQ"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-CBOE-2021-039 - The Market Share Crisis", url="https://youtu.be/WlAlny63XD4"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-CBOE-2021-040 | Automated Halts", url="https://youtu.be/Z6UO5qwv8es"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR CboeBZX-2021-055 | Price Discovery and Liquidity", url="https://youtu.be/qVsKTX3Ui3o"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-CboeBZX-2022-009 | Drill-Through Price Protection", url="https://youtu.be/fqSCRm8SoYI"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="CBOE-2021-045 | Rule Violation Plan" , url="https://youtu.be/RPGF-MjD62I"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="CBOE Options Start Trading at 2:30AM EST", url="https://youtu.be/tSvsur3vSC0"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-CboeBZX-2021-058 - Rebates for LIQUIDATED ETFs", url="https://youtu.be/eXFqVkAjvqY"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Options Position Limits Increased on CBOE Exchanges", url="https://youtu.be/UrSUMAKWNBA"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-Cboe-2021-026 - Extreme Duplicate Price Protection" , url="https://youtu.be/z9o4xb7gCmU"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The CBOE Volatility Index (VIX)", url="https://youtu.be/B1wIJ4duwzMetail"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="CBOE BZX | 086 - Amend the Opening Auction", url="https://youtu.be/mgaiE3dCKd0"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="CBOE EdGX-2021-048 - Easy To Borrow Securities" , url="https://youtu.be/7PEe99ZRA5o"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-2021-CBOE-071 | CBOE Adds The New Curb Trading Session", url="https://youtu.be/M48zMHH57-Q"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home(self,interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple)
    async def goback(self,interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title="Video Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed = em, view=VidVideoView())





class OCCView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="OCC-2021-011 | Margin & Defaults", url="https://youtu.be/XJNTt2Yrf30"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SEC FILING OCC-2021-006", url="https://youtu.be/OkiPeHgDimk"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-OCC-2021-004 Explained in 04:20", url="https://youtu.be/1MCVZH7QvAc"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-OCC-2021-003 Explained", url="https://youtu.be/ChumKl1SWq8"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="Shakeup at the OCC! Beat the news again!", url="https://youtu.be/tc1kn_au3Os"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-OCC-2021-007 | Force Majeure / Bylaws / Act of God", url="https://youtu.be/BgBfSwFoQ1U"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="OCC Partial Tear-up Rule Approved", url="https://youtu.be/5s2ytMppZCg"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-OCC-2021-803 | No Objection", url="https://youtu.be/H_4QuzqLDDc"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The OCC Cloud | BIG Changes", url="https://youtu.be/sjCFhzoT6Mo"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="OCC-2021-013 | Equity Recovery / Operational Loss", url="https://youtu.be/CG6_X6LtwoQ"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="OCC-2021-014 | The Coming Slaughter", url="https://youtu.be/gT7Z25bnbnU"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="BREAKING: OCC-2022-801 | A New IV Model", url="https://youtu.be/oOZQCwk7gxc"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The OCC Cloud | BIG Changes", url="https://youtu.be/sjCFhzoT6Mo"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="OCC to collect MARGIN DEFICITS On July 27th", url="https://youtu.be/hc3n2RsMG14"))


    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home(self,interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple)
    async def goback(self,interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title="Video Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed = em, view=VidVideoView())



class NSCCView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NSCC-2022-009 | The Volatility Charge", url="https://youtu.be/4GERvX7EzZI"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NSCC-2021-007 | System Failure & Market Disruption Events", url="https://youtu.be/-xfHt_8mntg"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NSCC-2021-009 | Tax Obligations", url="https://youtu.be/901q5eaRKEU"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NSCC-2021-803 SFT | Fire Sale and Liquidity Risk Mitigation", url="https://youtu.be/E_hQT954ACM"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NSCC-2021-803 SFT | Agency vs. Principal Model", url="https://youtu.be/WGGCEvOl2io"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NSCC-2021-011 | Game Over", url="https://youtu.be/6-jXYUi4HDs"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NSCC-2021-005 NSCC increases Margin Requirements by 25x", url="https://youtu.be/hHeqaMnkGrk"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NSCC Introduction to Interval Funds", url="https://youtu.be/MdkpF6K85vo"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NYSE No Longer an NSCC Participant", url="https://youtu.be/t-zi0UED-KQ"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NSCC - Forced Settlement", url="https://youtu.be/RY0kPXZHQyA"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-2021-NSCC-015 | DOUBLE-DEFAULTS and Mutual Funds", url="https://youtu.be/I59a1fwLONA"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="The execution of small / medium players in the industry.", url="https://youtu.be/Q6yKY2gdURg"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="SR-NSCC-2022-002 | Interval Fund Repurchase Orders", url="https://youtu.be/SP7MekrNQcE"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NSCC SFT Removes Haircut Component from Margin", url="https://youtu.be/3XwWBmq8ggs"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="DTC / FICC / NSCC increase capital requirements.", url="https://youtu.be/HkTIiDQYR7o"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="NSCC's Stock Borrow Program Loophole Sealed", url="https://youtu.be/9BMludHQAHs"))

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green)
    async def home(self,interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=em, view=MainView2())

    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple)
    async def goback(self,interaction: disnake.ApplicationCommandInteraction):
        em = disnake.Embed(title="Video Menu", color=disnake.Colour.yellow())
        em.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed = em, view=VidVideoView())



import disnake
from disnake.ext import commands


class WebullDropdown(disnake.ui.Select):
    def __init__(self):

# Set the options that will be presented inside the dropdown
        options = [
            disnake.SelectOption(
            label="⚙️ Options Chain Setup", description="🏡 The Main Menu for learning all about the discord, trading, and markets.",
            ),
            disnake.SelectOption(
            label="⚙️ Analysis Tools", description="⚔️ The Main Trading Menu - Select from a variety of categories such as high FTD stocks.",
            ),
            disnake.SelectOption(
            label="⚙️ Order Types", description="💰Get the run-down on the Real-Time Play Alerts provided by TradyTics",
            ),
                    disnake.SelectOption(
            label="⚙️ Options Strategies", description="💰Get the run-down on the Real-Time Play Alerts provided by TradyTics",
            ),

        ]

        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="⚙️ 🇼  🇪  🇧  🇺  🇱  🇱  ⚙️",
            min_values=1,
            max_values=1,
            custom_id="mainmenu99",
            options=options,
        )

    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "⚙️ Options Chain Setup":
            embed = disnake.Embed(title="What is an options chain?", description="**An options chain, also as known as an options table, is a list that includes all available options contracts. \n\n The list will show the options side, expiration date, strike price, and quotes simultaneously. **", color=disnake.Colour.random())
            embed.add_field(name="How do you access the options chain on Webull.", value="Entry: Stock details page>Options>Options Chain")
            embed.set_image(url="https://u1sweb.webullfinance.com/social/cded019eb90f466bab9de4fc27fa3afe.gif")
            embed.set_footer(text="Implemented by FUDSTOP Trading")

            await inter.response.edit_message(embed=embed, view=ChainView())
        elif self.values[0] == "⚙️ Analysis Tools":
            embed = disnake.Embed(title="Learn about different order types in the market.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


            await inter.response.edit_message(embed=embed, view=OrderView())
        elif self.values[0] =="⚙️ Order Types":
            embed = disnake.Embed(title="Learn about different order types in the market.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


            await inter.response.edit_message(embed=embed, view=OrderView())
        elif self.values[0] =="⚙️Options Strategies":
            embed = disnake.Embed(title="Learn about Options - Webull & OIC", description="Options trading is one of the riskiest and most difficult method of trading that exists. With this will need to come an understanding of what Options are, how they work - which types of options you can use for various types of market situations, and the effect **time** has on options. \n\n\n This is - after all - why they're called *options.* If understood - they can provide paths in a multitude of market scenarios.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


            await inter.response.edit_message(embed=embed, view=OptionsView())

class WebullOrderDropdown(disnake.ui.Select):
    def __init__(self):

        # Set the options that will be presented inside the dropdown
        options = [
            disnake.SelectOption(
            label="⚙️ Market Orders", description="Learn about placing Market Orders in Webull.",
            ),
            disnake.SelectOption(
            label="⚙️ Limit Orders", description="Learn about placing Limit Orders in Webull.",
            ),
            disnake.SelectOption(
            label="⚙️ Stop Orders", description="Learn about plcing Stop Orders in Webull.",
            ),
            disnake.SelectOption(
            label="⚙️ Stop Limit Orders", description="Learn about placing Stop Limit Orders in Webull.",
            ),
            disnake.SelectOption(
            label="⚙️ How to Read the Bid/Ask Spread", description="Learn about placing Stop Limit Orders in Webull.",
            ),


        ]

        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="⚙️ 🇴 🇷 🇩 🇪 🇷 🇸 ⚙️",
            min_values=1,
            max_values=1,
            options=options,
        )

    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "⚙️ Market Orders":
            embed = disnake.Embed(title="Market Orders", description="A market order is an order to buy or sell a stock at the best available price, **which can typically be executed at the time of the order.**", color=disnake.Colour.random())
            embed.set_image(url="https://social-media.webullfintech.com/social/48a18a511df24c7796aca435052bd251.gif")


            await inter.response.edit_message(embed=embed, view=MarketOrderView())
        elif self.values[0] == "⚙️ Limit Orders":
            embed = disnake.Embed(title="Limit Orders", description="A limit order is an order to trade a security at a specified price or better.", color=disnake.Colour.dark_gold())
            embed.set_image(url="https://social-media.webullfintech.com/social/b18a4f33b1af4994b6461600bd8065be.gif")


            await inter.response.edit_message(embed=embed, view=LimitOrderView())
        elif self.values[0] == "⚙️ Stop Orders":
            embed = disnake.Embed(title="Stop Orders", description="A stop order trades at market price once the stock reaches above or below a specified price.", color=disnake.Colour.dark_gold())
            embed.set_image(url="https://social-media.webullfintech.com/social/1b5ffdf31d0a46cfbc9fa5f09a348907.gif")


            await inter.response.edit_message(embed=embed, view=StopOrderView())
        elif self.values[0] == "⚙️ Stop Limit Orders":
            embed = disnake.Embed(title="Stop Limit Orders", description="A stop limit order is similar to a stop order, except that the order is changed to a limit order upon triggering.", color=disnake.Colour.dark_gold())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/6fb6116cf9f74c3cbd3e853e02694aaa.gif")


            await inter.response.edit_message(embed=embed, view=StopLimitOrderView())
        elif self.values[0] == "⚙️ How to Read the Bid/Ask Spread":
            embed = disnake.Embed(title="The Bid/Ask Spread", description="Quite a few people make trade decisions based entirely on the current market prices they see, **neglecting bid and ask information.** \n\n However, it’s important to note that the current market price is the price of the last trade. \n\n Bid and ask, on the other hand, are prices at which investors are willing to trade. \n\n To be specific, the bid is the price a buyer is willing to pay for a stock. The ask is the price a seller will accept for the stock.", color=disnake.Colour.random())


            await inter.response.edit_message(embed=embed, view=BidAskOrderView())






class WebullCustomizeDropdown(disnake.ui.Select):
    def __init__(self):

        # Set the options that will be presented inside the dropdown
        options = [
            disnake.SelectOption(
            label="1️⃣Columns", description="How to organize your columns!",
            ),
            disnake.SelectOption(
            label="2️⃣Strike Numbers", description="Strike numbers.",
            ),
            disnake.SelectOption(
            label="3️⃣Expiration Type", description="Standard and non-standard options.",
            ),
            disnake.SelectOption(
            label="4️⃣Deliverables", description="Learn about deliverables.",
            ),
            disnake.SelectOption(
            label="5️⃣Sorting", description="Learn about sorting the data in the options chain.",
            ),


        ]

        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="⛓️ 🇴 🇵 🇹 🇨 🇭 🇦 🇮 🇳 ⛓️",
            min_values=1,
            max_values=1,
            custom_id="mainmenu41",
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        if self.values[0] == "1️⃣Columns":
            embed = disnake.Embed(title="1️⃣Columns", description="Webull provides over 20+ quotes under options contracts, which allows investors to select and analyze contracts from different quote dimensions. You can select one of them to display on your chain and change the order of the quotes on the page.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/ec78b671ea5c44b1b1b721e6d997f590.gif")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=CustomizeView())
        elif self.values[0] == "2️⃣Strike Numbers":
            embed = disnake.Embed(title="2️⃣Strike Numbers", description="Strike numbers:** 6, 10, 20, 30, 50, and All**. \n\n You can select the number of strikes shown in your options chain.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/8e68ac15466e471eaf39a4f8aa1e0783.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=CustomizeView())
        elif self.values[0] == "3️⃣Expiration Type":
            embed = disnake.Embed(title="3️⃣Expiration Type", description="Expiration Type: Regular, Weekly’s, and Quarterly’s.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/43b33051ce8e48f9a3c3c7210febc576.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=CustomizeView())
        elif self.values[0] == "4️⃣Deliverables":
            embed = disnake.Embed(title="4️⃣Deliverables", description="Deliverables: Standard and non-standard options.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/7642ade56e09409da33d57badada5391.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=CustomizeView())
        elif self.values[0] == "5️⃣Sorting":
            embed = disnake.Embed(title="5️⃣Sorting", description="Sort by Strike Price: Ascending and Descending.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/057d5458f7cf41d6b953abd1c31ae53e.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.response.edit_message(embed=embed, view=CustomizeView())


class CoveredCallsDropdownView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        # Replace HTML tags with an empty s

        self.add_item(CoveredCallSelect())

class CoveredCallSelect(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(label=f"Why Should Investors Consider Covered Calls and Cash Secured Puts?"),
            disnake.SelectOption(label=f"Pros and Cons: Selling Options for Income"),
            disnake.SelectOption(label=f"Enhance your Income with Covered Calls"),
            disnake.SelectOption(label=f"Selling Cash-Secured Puts for Income: Put Your Idle Cash to Work!"),
            disnake.SelectOption(label=f"How Do You Pick the Right Expiration Date and Strike Price as an Option Seller?"),
            disnake.SelectOption(label=f"The Importance of Strike Selection When Selling Options"),]



        super().__init__(
            placeholder = "🏫 🇨 🇴 🇺 🇷 🇸 🇪 🇸",
            min_values=1,
            max_values=1,
            options=options,
        )
    async def callback(self, interaction:disnake.MessageCommandInteraction):
        if self.values[0] == "Why Should Investors Consider Covered Calls and Cash Secured Puts?":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=9gaM5m&courseId=jZG0Fl").json()
            topic = r['topic']
            content=r['content']
            topic = r['topic']
            result = re.sub("<.*?>", "", content)[0:4000]

            bs = BeautifulSoup(content, 'html.parser')
            images = bs.find_all('img', {'src':re.compile('.png')})
            image1 = images[0]['src']+'\n'
            em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
            em.set_image(url=image1)
            await interaction.response.edit_message(embed=em, view=CoveredCallsDropdownView())
        elif self.values[0] == "Pros and Cons: Selling Options for Income":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=sPdHTR&courseId=jZG0Fl")
            d = r.json()
            content = d['content']

            topic = d['topic']
            result = re.sub("<.*?>", "", content)[0:4000]

            bs = BeautifulSoup(content, 'html.parser')
            images = bs.find_all('img', {'src':re.compile('.png')})
            image1 = images[0]['src']+'\n'
  
            em = disnake.Embed(title=topic, description=f"```py\n{result}```", color=disnake.Colour.dark_magenta())
            em.set_image(url=image1)
            await interaction.response.edit_message(embed=em, view=CoveredCallsDropdownView())
        elif self.values[0] == "Enhance your Income with Covered Calls":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=CnJOCN&courseId=jZG0Fl")
            d = r.json()
            content = d['content']

            topic = d['topic']
            result = re.sub("<.*?>", "", content)[0:4000]
 
            bs = BeautifulSoup(content, 'html.parser')
            images = bs.find_all('img', {'src':re.compile('.png')})
            image1 = images[0]['src']+'\n'

            em = disnake.Embed(title=topic, description=f"```py\n{result}...```", color=disnake.Colour.dark_magenta())
            em.set_image(url=image1)
            await interaction.response.edit_message(embed=em, view=CoveredCallsDropdownView())
        elif self.values[0] == "Selling Cash-Secured Puts for Income: Put Your Idle Cash to Work!":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=nAK39C&courseId=jZG0Fl")
            d = r.json()

            content = d['content']

            topic = d['topic']
            result = re.sub("<.*?>", "", content)[0:4000]

            bs = BeautifulSoup(content, 'html.parser')
            images = bs.find_all('img', {'src':re.compile('.png')})
            image1 = images[0]['src']+'\n'

            em = disnake.Embed(title=topic, description=f"```py\n{result}...```", color=disnake.Colour.dark_magenta())
            em.set_image(url=image1)
            await interaction.response.edit_message(embed=em, view=CoveredCallsDropdownView())
        elif self.values[0] == "How Do You Pick the Right Expiration Date and Strike Price as an Option Seller?":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=dMir0z&courseId=jZG0Fl")
            d = r.json()
            content = d['content']

            topic = d['topic']
            result = re.sub("<.*?>", "", content)[0:4000]

            bs = BeautifulSoup(content, 'html.parser')
            images = bs.find_all('img', {'src':re.compile('.png')})
            image1 = images[0]['src']+'\n'
    
            em = disnake.Embed(title=topic, description=f"```py\n{result}...```", color=disnake.Colour.dark_magenta())
            em.set_image(url=image1)
            await interaction.response.edit_message(embed=em, view=CoveredCallsDropdownView())

        elif self.values[0] == "The Importance of Strike Selection When Selling Options":
            r = requests.get(url="https://u1sact.webullfinance.com/api/edu/v1/l/lesson/getCoursewareDetail?coursewareId=iGCFL7&courseId=jZG0Fl")
            d = r.json()
            content = d['content']

            topic = d['topic']
            result = re.sub("<.*?>", "", content)[0:4000]
            bs = BeautifulSoup(content, 'html.parser')
            images = bs.find_all('img', {'src':re.compile('.png')})
            image1 = images[0]['src']+'\n'
    
            em = disnake.Embed(title=topic, description=f"```py\n{result}...```", color=disnake.Colour.dark_magenta())
            em.set_image(url=image1)
            await interaction.response.edit_message(embed=em, view=CoveredCallsDropdownView())



class LearningDropdown(disnake.ui.Select):
    def __init__(self):

        # Set the options that will be presented inside the dropdown
        options = [
            disnake.SelectOption(
            label="🏡 Learning Home Menu", description="🏡 The Main Menu for learning all about the discord, trading, and markets.",
            ),
            disnake.SelectOption(
            label="⚔️Trading Main Menu", description="⚔️ The Main Trading Menu - Select from a variety of categories such as high FTD stocks.",
            ),
            disnake.SelectOption(
            label="Real-Time Play Alerts💰", description="💰Get the run-down on the Real-Time Play Alerts provided by TradyTics",
            ),
            disnake.SelectOption(
            label="🧠 Learn Options", description="Learn all about options - from customizing your Options Menu to Order Types, greeks and more",
            ),
                disnake.SelectOption(
            label="Discord Sector Navigation", description="View and set notifications for the market feeds set-up in FUDSTOP",
            ),
                disnake.SelectOption(
            label="Webull Setup Help", description="View and set notifications for the market feeds set-up in FUDSTOP",
            ),


        ]

        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="👇  🇲  🇪  🇳  🇺  👇",
            min_values=1,
            max_values=1,
            custom_id="mainmenu241",
            options=options,
        )

    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "🏡 Learning Home Menu":
            em = disnake.Embed(title="You chose the **Learning Tab!**", description="In this area of the FUDSTOP app - you can re-watch videos, learn about market topics, discord, the webull APP, access several datasets, and more.", color=disnake.Colour.dark_green())
            em.set_footer(text="Implemented by FUDSTOP Trading")

            await inter.response.edit_message(embed=em, view=MainView2())

        elif self.values[0] == "⚔️Trading Main Menu":
            em = disnake.Embed(title="You chose the **⚔️ Trade Tab!**", description="Welcome to the trade tab! This side of the FUDSTOP Application is to help you find easy play opportunities, as well as quickly view updated lists of stocks that fall into certain categories - such as low float or stocks with high FTDs. Click a button below to get started.", color=disnake.Colour.dark_orange())
            em.set_footer(text="Implemented by FUDSTOP Trading")

            await inter.response.edit_message(embed = em, view=MainView2())
        elif self.values[0] == "Real-Time Play Alerts💰":
            embed = disnake.Embed(title="Real-Time Play Alerts💰", description="The real time alerts provided by trady-tics can be a very good way to earn some easy money. \n\n WHEN TRADING THE ALERTS: **GO IN THE MONEY**. They often recommend OTM strikes - but I have found with experience that if you play these alerts ITM, you'll see a much higher success rate.", color=disnake.Colour.random())
            embed.add_field(name="Analyst Upgrades",value='<#1016372139802234991>', inline=False)
            embed.add_field(name="Golden Sweeps 🫂", value="<#1016369933187301416>", inline=True)
            embed.add_field(name="Crypto Alerts🪙", value="<#1016372517251850360>", inline=True)
            embed.add_field(name="Crypto Signals🪙", value="<#1016372517251850360>", inline=True)
            embed.add_field(name="Important News📰", value="<#1016372151596630016>", inline=True)
            embed.add_field(name="Options Sweeps🧹", value="<#1016369913759285338>", inline=True)
            embed.add_field(name="Stock Breakouts📈", value="<#1016369985867743394>", inline=True)
            embed.add_field(name="Scalps🤳", value="<#1016369974945775666>", inline=True)
            embed.add_field(name="Insider Trades🔀", value="<#1016369984768852090>", inline=True)
            embed.add_field(name="Trady Flow🌻", value="<#1016369947829600297>", inline=True)
            embed.add_field(name="Bullseye Alerts🎯", value="<#1016369960810979388>", inline=True)
            embed.set_image(url="https://media.discordapp.net/attachments/1009552305869303828/1009554886817501204/ezgif-2-f4a5623248.gif")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await inter.response.edit_message(embed=embed, view=SetupView())
        elif self.values[0] == "Discord Sector Navigation":
            embed = disnake.Embed(title = "Sector Navigation", color=disnake.Colour.random())
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await inter.response.edit_message(embed=embed, view=SectorView())

        elif self.values[0] == "🧠 Learn Options":
            embed = disnake.Embed(title="Learn about Options - Webull & OIC", description="Options trading is one of the riskiest and most difficult method of trading that exists. With this will need to come an understanding of what Options are, how they work - which types of options you can use for various types of market situations, and the effect **time** has on options. \n\n\n This is - after all - why they're called *options.* If understood - they can provide paths in a multitude of market scenarios.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


            await inter.response.edit_message(embed=embed, view=OptionsEducationView())

        elif self.values[0] == "Webull Setup Help":
            embed = disnake.Embed(title="Learn about Options - Webull & OIC", description="Options trading is one of the riskiest and most difficult method of trading that exists. With this will need to come an understanding of what Options are, how they work - which types of options you can use for various types of market situations, and the effect **time** has on options. \n\n\n This is - after all - why they're called *options.* If understood - they can provide paths in a multitude of market scenarios.", color=disnake.Colour.random())
            embed.set_image(url="https://u1sweb.webullfinance.com/social/dfce13d49b4d47159b1d7c33b8e705c4.png")


            await inter.response.edit_message(embed=embed, view=ChainView())




class OptionsDropdown(disnake.ui.Select):
    def __init__(self):
        options = [
            disnake.SelectOption(
            label="Options Strategies♟️", description="♟️ Learn about different Options Strategies",
            ),
                disnake.SelectOption(
            label="Options Greeks🏹", description="🏹 Learn about the Greeks - Delta, Theta, Rho, Vega, and Gamma.",
            ),
                disnake.SelectOption(
            label="Options Education 🧠", description="Get edjumicated on Options!",
            ),
                disnake.SelectOption(
            label="🌟Top Options List🌟", description="Learn about the top Options List in Webull!",
            ),
        ]

        super().__init__(
            placeholder="👇 🇴 🅿 🇹 🇮 🇴 🇳 🇸 👇",
            min_values=1,
            max_values=1,
            custom_id="feeds92",
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.defer(with_message=True, ephemeral=True)
        if self.values[0] == "Options Strategies♟️":
            embed = disnake.Embed(title="Options Strategies♟️", description=f"```py\nThis menu provides educational content around different Options Strategies you can utilize in the market. Information is provided by Webull```", color=disnake.Colour.dark_blue())


            await interaction.edit_original_message(view=OStratsView())
        elif self.values[0] == "Options Greeks🏹":
            embed = disnake.Embed(title="What are Option Greeks and How Do I use them?", description="```py\nThose new to stock investing and options trading might wonder about what more savvy financial market operators usually refer to as **“The Greeks** and why these computed numbers might matter to them. \n\n For options traders, these Greeks refer to a set of risk management parameters commonly used to assess the risk of either a particular option position or a portfolio of option positions collectively.``` ```py\n These stock option Greeks are mainly computed as the sensitivity of an option position or portfolio given an incremental change in stock price, time, interest rates, or implied volatility. \n\n Greeks can be examined on an individual option or in a “portfolio additive manner. \n\n This means that the Greeks of individual option positions can be summed up and weighted by the individual option position size to compute the overall sensitivities of an entire portfolio of options.``` ```py\nYou can learn about each of the option Greeks in greater detail and will explain how traders, investors and/or option portfolio managers might use each of the Greeks to their benefit by clicking a button below.```", color=disnake.Colour.random())
            embed.add_field(name="Option Greeks", value="```py\nThe option Greeks consist of a set of first and second-order derivatives that relate to the option pricing model used in a particular market.``` ```py\nFor stock options, the five Greeks are named delta, gamma, rho, theta and vega.```")
            embed.add_field(name="The Options Table", value="```py\nThe derivatives shown in the table above are expressed using the following variables: \n\n V= the option value \n\n S = the underlying asset’s price \n\n r = the risk-free interest rate \n\n t*= time\n\n 𝜎 = the option’s implied volatility```")
            embed.set_image(url="https://i.ibb.co/7KR3RYS/greeks.png")

            await interaction.edit_original_message(embed=embed, view=GreeksView())
        elif self.values[0] == "Options Education 🧠":
            embed = disnake.Embed(title="Options Education 🧠", description="```py\nThose new to stock investing and options trading might wonder about what more savvy financial market operators usually refer to as The Greeks and why these computed numbers might matter to them.``` ```py\nFor options traders, these Greeks refer to **a set of risk management parameters commonly used to assess the risk of either a particular option position or a portfolio of option positions collectively.** \n\n These stock option Greeks are mainly computed as **the sensitivity of an option position or portfolio given an incremental change in stock price, time, interest rates, or implied volatility.``` ```py\n Greeks can be examined on an individual option or in a “portfolio additive manner. \n\n This means that the Greeks of individual option positions can be summed up and weighted by the individual option position size to compute the overall sensitivities of an entire portfolio of options. \n\n You can learn about each of the option Greeks in greater detail and will explain how traders, investors and/or option portfolio managers might use each of the Greeks to their benefit by clicking a button below.```", color=disnake.Colour.random())

            await interaction.edit_original_message(embed=embed, view=OptionsEducationView())
        elif self.values[0] == "🌟Top Options List🌟":
            embed = disnake.Embed(title="What is the top options list?", description="```py\nThe Top Option list is a ranking of options contracts based on different filtered conditions. The list can help the investor identify and filter options contracts out of the thousands offered and can also be used to monitor the changes of options market.```", color=disnake.Colour.random())
            embed.set_footer(text="Implemented by FUDSTOP Trading", )

            await interaction.edit_original_message(embed=embed, view=TopOptionsView())
class WeballsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(Weballs3())
        self.add_item(Weballs2())
        self.add_item(TechDropdown())

class TrendDropdown(disnake.ui.Select):
    def __init__(self):

        options = [

            disnake.SelectOption( label=f"📈 The Uptrend 📉"),
            disnake.SelectOption( label=f"📈 The Downtrend 📉"),
            disnake.SelectOption( label=f"📈 Consolidation 📉"),
            disnake.SelectOption( label=f"📈 Support 📉"),
            disnake.SelectOption( label=f"📈 Resistance 📉"),]
        super().__init__(
        placeholder=f"📈 🇹 🇷 🇪 🇳 🇩 🇱 🇮 🇳 🇪 🇸 📉",
        min_values=1,
        max_values=1,
        custom_id=f"📈 🇹 🇷 🇪 🇳 🇩 🇱 🇮 🇳 🇪 🇸 📉",
        options= options)
    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "📈 The Uptrend 📉":
            em = disnake.Embed(title="Three directions of trends - The Uptrend", description=f"```py\nAn asset is in an uptrend when price moves up to higher highs and higher lows. This occurs when demand exceeds supply. Buyers are willing to pay higher prices for the asset over time.```", color=disnake.Colour.dark_green())
            em.set_image(url="https://u1sweb.webullfinance.com/social/c607b8a6e46d4f7cacf32b9802c85930.png")
            await inter.response.edit_message(embed=em, view=TrendDropdownView())
        else:
            if self.values[0] == "📈 The Downtrend 📉":
                em = disnake.Embed(title="📈 The Downtrend 📉",description=f"```py\nAn asset is in a downtrend when price drops to lower highs and lower lows. This occurs when supply exceeds demand. Sellers are accepting lower prices to exit long positions over time.```", color=disnake.Colour.dark_red())
                em.set_image(url="https://u1sweb.webullfinance.com/social/975e9aeeaea94c1080bdc0310119a73d.png")
                await inter.response.edit_message(view=TrendDropdownView(),embed=em )
            else:
                if self.values[0] == "📈 Consolidation 📉":
                    em = disnake.Embed(title="📈 Consolidation 📉",description=f"```py\nWhen an asset is not trending, it is considered to be in a consolidation. This is when its prices move sideways.```", color=disnake.Colour.dark_gold())
                    em.set_image(url="https://u1sweb.webullfinance.com/social/b37f976d03dc4c749acd953ca2f8e77e.png")
                    await inter.response.edit_message(view=TrendDropdownView(),embed=em)
                else:
                    if self.values[0] == "📈 Support 📉":
                        em = disnake.Embed(title="📈 Support 📉",color=disnake.Colour.dark_green())
                        em.set_image(url="https://u1sweb.webullfinance.com/social/470d03fe5e7741c7a1acd7d4ae9da5c5.png")
                        await inter.response.edit_message(view=TrendDropdownView(),embed=em, )
                    else:
                        if self.values[0] == "📈 Resistance 📉":
                            em = disnake.Embed(title="📈 Resistance 📉",color=disnake.Colour.dark_red())
                            em.set_image(url="https://u1sweb.webullfinance.com/social/190f78232ebb49e3869add5df0539601.png")
                            await inter.response.edit_message(view=TrendDropdownView(),embed=em)




  

class CandleDropdown(disnake.ui.Select):
    def __init__(self):

        options = [

            disnake.SelectOption( label=f"🕯️ Doji Candlestick 🕯️"),
            disnake.SelectOption( label=f"🕯️ The Hammer 🕯️"),
            disnake.SelectOption( label=f"🕯️ Upside Down Hammer 🕯️"),
            disnake.SelectOption( label=f"🕯️ Double Candlestick Pattern 🕯️"),
            disnake.SelectOption( label=f"🕯️ Screen Stocks with a Specific Candlestick Pattern 🕯️"),]
        super().__init__(
        placeholder=f"🕯️ 🇨 🇦 🇳 🇩 🇱 🇪 🇸 🕯️",
        min_values=1,
        max_values=1,
        custom_id=f"🕯️ 🇨 🇦 🇳 🇩 🇱 🇪 🇸 🕯️",
        options= options)
    async def callback(self, inter: disnake.MessageInteraction):
        if self.values[0] == "🕯️ Doji Candlestick 🕯️":
            em = disnake.Embed(title="🕯️ Doji Candlestick 🕯️", description=
"```py\nThe Doji is formed when the price closes at a price where it opened. The Doji has no candle body. This pattern means the buyers and sellers in the market are roughly balanced during the period. When this pattern appears, its likely that the previous trend will end.```"

"```py\nA commonly used pattern is the gravestone Doji, also called Gravestone. Because its opening and closing price equal the lowest price of the period, it has no candle body and no lower wick.```"

"```py\nIt indicates a possible trend reversal and is often used as a short-term signal. Depending on the previous trend, gravestone Doji are divided into bullish gravestone and bearish gravestone.```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/90ec130f41294728aa451cb593a85213.gif")
            await inter.response.edit_message(embed=em, view=CandleDropdownView())
        else:
            if self.values[0] == "🕯️ The Hammer 🕯️":
                em = disnake.Embed(title="The Hammer", description=f"```py\nHammers have a long upper or lower wick and a small candle body on the opposite side. Like the Doji, a hammer candlestick pattern indicates that a price reversal might be on its way.```"

    "```py\nThere are two types of hammers:```"

    "```py\nThe first is a regular hammer. It has a long lower candlewick and a small body in the upper part of the candle. When it appears in a downtrend, it’s called a ‘Hammer’. It implies that an uptrend might be on the way. When it appears in an uptrend, it’s called a ‘Hanging Man’, implying that the price might change to the downside.```", color=disnake.Colour.dark_blue())
                em.set_image(url="https://u1sweb.webullfinance.com/social/eb092f7a78844f8dbce1b14289c6421f.gif")
                await inter.response.edit_message(embed=em, view=CandleDropdownView())
            else:
                if self.values[0] == "🕯️ Upside Down Hammer 🕯️":
                    em = disnake.Embed(title="🕯️ Upside Down Hammer 🕯️", description=f"```py\nThe second type is an upside down hammer. It has a long upper candlewick and a small body in the lower part of the candle. When it appears in a downtrend, it’s called an ‘Inverted Hammer’. It implies that an uptrend might be on the way. When it appears in an uptrend, it’s called a ‘Shooting Star’, implying a possible price decline.```", color=disnake.Colour.dark_blue())
                    em.set_image(url="https://u1sweb.webullfinance.com/social/b414e6ad5b6745559a54b0cf3ea3bd02.gif")
                    await inter.response.edit_message(embed=em, view=CandleDropdownView())
                else:
                    if self.values[0] == "🕯️ Double Candlestick Pattern 🕯️":
                        em = disnake.Embed(title="Engulfing Candlestick Patterns", description=f"```py\nAn engulfing candlestick pattern consists of a random candle and a bigger candle that fully “engulfs” it.```"

"```py\nA bullish engulfing pattern appears at the end of a downtrend. It is comprised of a small bearish candle and a bigger bullish candle that encompasses it. It indicates that an uptrend might follow.```"

"```py\nA bearish engulfing pattern appears at the end of an uptrend. It is comprised of a small bullish candle and a bigger bearish candle that encompasses it. It indicates that a downtrend might follow.```", color=disnake.Colour.dark_blue())
                        em.set_image(url="https://u1sweb.webullfinance.com/social/81aa50ced3214a3f92e5a1df7f8a1d63.gif")
                        await inter.response.edit_message(embed=em, view=CandleDropdownView())
                    else:
                        if self.values[0] == "🕯️ Screen Stocks with a Specific Candlestick Pattern 🕯️":
                            em = disnake.Embed(title="🕯️ Screen Stocks with a Specific Candlestick Pattern 🕯️", description=f"```py\nYou can use our screener to find stocks with a specific candlestick pattern, as shown below.```"

"```py\nYou can also add technical indicators into the screener so that the trading signals are more reliable.```", color=disnake.Colour.random())
                            em.set_image(url="https://u1sweb.webullfinance.com/social/2b3c325c1bed450ea2d62c7f0f990884.gif")
                            await inter.response.edit_message(embed=em, view=CandleDropdownView())


class FudstopCommandsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(FudstopBotDropdown())


import disnake
from disnake.ext import commands
from api_master.cfg import YOUR_NASDAQ_KEY

from disnake import ButtonStyle, ApplicationCommandInteraction

class NewsNotifView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="🔎52 Week Lows❗⭐⭐", style=disnake.ButtonStyle.gray)
    async def fiftytwowklow( self,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎52week-lows❗", description="🔎52week-lows❗ Posts a daily message with tickers that hit their 52 week lows. \n **THIS CAN BE VERY HELPFUL FOR FINDING PLAYS.** ", color=disnake.Colour.random())
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.url, label="AVBLS | Bitcoin Average Block Size", url=f"https://data.nasdaq.com/api/v3/datasets/BCHAIN/AVBLS.csv?&api_key={YOUR_NASDAQ_KEY}"))
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())

    @disnake.ui.button(label="🔎Top Stories❗📰", style=disnake.ButtonStyle.gray)
    async def topstories( self,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎topstories❗📰", url="https://discord.com/channels/888488311927242753/944732422120038410", color=disnake.Colour.random())
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())

    @disnake.ui.button(label="🔎Trade Ideas❗📰", style=disnake.ButtonStyle.gray)
    async def tradeideas( self,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎trade-ideas❗📰", url="https://discord.com/channels/888488311927242753/944732309196791818", color=disnake.Colour.random())
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="🔎Options❗📰", style=disnake.ButtonStyle.gray)
    async def options( self,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎Options❗📰", url="https://discord.com/channels/888488311927242753/975047476916658207", color=disnake.Colour.random())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="🔎Industry Specific❗📰", style=disnake.ButtonStyle.gray)
    async def industrynews( self,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎Industry Specific❗📰", url="https://discord.com/channels/888488311927242753/944396298709266502", color=disnake.Colour.random())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="🔎Penny Stocks❗📰", style=disnake.ButtonStyle.gray)
    async def pennynews( self,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎Penny Stocks❗📰", url="https://discord.com/channels/888488311927242753/975047628058394645", color=disnake.Colour.random())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="🔍Small Caps❗📰", style=disnake.ButtonStyle.gray)
    async def smallcapnews( self,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔍Small Caps❗📰",url="https://discord.com/channels/888488311927242753/944731458419978270", color=disnake.Colour.random())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="🔍Emerging Market ETFs📰⭐⭐", style=disnake.ButtonStyle.gray)
    async def emetfs( self,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔍Emerging Market ETFs📰", description="🔎52week-lows❗ Posts a daily message with tickers that hit their 52 week lows. \n **THIS CAN BE VERY HELPFUL FOR FINDING PLAYS.** ", url="https://discord.com/channels/888488311927242753/975049044189663332", color=disnake.Colour.dark_red())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="📰❗Technology News❗📰", style=disnake.ButtonStyle.gray)
    async def technews( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎Technology News❗📰", url="https://discord.com/channels/888488311927242753/975047252118749204", color=disnake.Colour.dark_gold())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="🌟The Federal Reserve and EuroZone News📰", style=disnake.ButtonStyle.gray)
    async def fednews( self,button, interaction: disnake.AppCommandInter):
        embed= disnake.Embed(title="🌟The Federal Reserve and EuroZone News📰", url= "https://discord.com/channels/888488311927242753/944395511752949801", color=disnake.Colour.dark_green())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="Futures News🕐", style=disnake.ButtonStyle.gray)
    async def futures( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="Futures News🕐", url="https://discord.com/channels/888488311927242753/975051343414833252", color=disnake.Colour.dark_blue())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


    @disnake.ui.button(label="🔎Economic News❗📰", style=disnake.ButtonStyle.gray)
    async def economicnews( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="🔎Economic News❗📰", url="https://discord.com/channels/888488311927242753/944394979638399016", color=disnake.Colour.dark_blue())
        embed.add_field(name="-", value="🔔Click the link to setup notifications for this topic.")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=NewsNotifView())


###TUTORIALS###
class TutorialsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="Setting notifications🔔", style=disnake.ButtonStyle.green)
    async def botcmds( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Setting notifications🔔", color=disnake.Colour.dark_green())
        embed.add_field(name="🔔", value="In order to receive push notifications as well as desk-top notifications, make sure you have notifications turned on for the information you want to have streamlined to you. There's a lot to choose from!")
        embed.add_field(name="🔔", value="FUDSTOP Video Help \n\n https://youtu.be/zPG_hoQXAto")
        embed.set_image(url="https://media.giphy.com/media/xSKZuOVFxMzG5BoYBG/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=TutorialsView())


    @disnake.ui.button(label="Slash Commands⚔️", style=disnake.ButtonStyle.blurple)
    async def slashr( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Slash Commands⚔️", color=disnake.Colour.dark_red())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(view=TutorialsView())


    @disnake.ui.button(label="Discord Tutorials⚔️", style=disnake.ButtonStyle.blurple)
    async def disctuts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Slash Commands⚔️", color=disnake.Colour.random())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(view=TutorialsView())




class SettingsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)


    @disnake.ui.button(label="🔔Discord Notifications🔔", style=ButtonStyle.gray)
    async def notifs( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):   
        embed= disnake.Embed(title="🔔Discord Notifications🔔", description="🔔 From News to real-time play opportunities, to dark-pool feeds, golden sweeps, announcements, Tweets from popular accounts, and more: Make sure to utilize the Discord Notifications Discord Notifications🔔 to make the most out of FUDSTOP. \n\n Click the buttons below to set-up your notifications.", color=disnake.Colour.blurple())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=NotificationsView())


class NotificationsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    
    @disnake.ui.button(label="📰 News", style=ButtonStyle.gray)
    async def news( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):   
        embed= disnake.Embed(title="📰 News", description="🔔 From News to real-time play opportunities, to dark-pool feeds, golden sweeps, announcements, Tweets from popular accounts, and more: Make sure to utilize the Discord Notifications Discord Notifications🔔 to make the most out of FUDSTOP. \n\n Click the buttons below to set-up your notifications.", color=disnake.Colour.dark_gold())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=NewsNotifView())

    @disnake.ui.button(label="RSS Feeds👁️", style=ButtonStyle.gray)
    async def rss( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):   
        embed= disnake.Embed(title="RSS Feeds👁️", description="🔔 From News to real-time play opportunities, to dark-pool feeds, golden sweeps, announcements, Tweets from popular accounts, and more: Make sure to utilize the Discord Notifications Discord Notifications🔔 to make the most out of FUDSTOP. \n\n Click the buttons below to set-up your notifications.", color=disnake.Colour.dark_gold())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=RSSNotifView())



class RSSNotifView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="Federal Reserve🔊", style=disnake.ButtonStyle.blurple)
    async def fedrss( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="Federal Reserve🔊", description="```py\nRecieve important updates out of the Fed AS they happen. Stay up to date with several releavnt topics.```", url="https://discord.com/channels/888488311927242753/985591253037121596", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=RSSNotifView())

    @disnake.ui.button(label="SEC Filings🔊", style=disnake.ButtonStyle.blurple)
    async def secfilings( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="SEC Filings🔊", description="```py\nRecieve SEC Filings as soon as they are scheduled to be published for Public Inspection. Stay ahead of the rest!```", url="https://discord.com/channels/888488311927242753/985590757702385795", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=RSSNotifView())

    @disnake.ui.button(label="FINRA Filings🔊", style=disnake.ButtonStyle.blurple)
    async def finrafilings( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="FINRA Filings🔊", description="```py\nFINRA Notifications sent straight to your desktop/SMS as soon as they are published.```", url="https://discord.com/channels/888488311927242753/986041022524030996", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=RSSNotifView())

    @disnake.ui.button(label="28day Treasury Bonds🔊", style=disnake.ButtonStyle.red)
    async def treasurybonds( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="28day Treasury Bonds🔊", description="```py\nReceive Important updates out of the US treasury related to 28 day bonds.```", url="https://discord.com/channels/888488311927242753/985591164742819860", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=RSSNotifView())

    @disnake.ui.button(label="Important Memos - Options Clearing Corporation🔊", style=disnake.ButtonStyle.red)
    async def memos( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="Important Memos - Options Clearing Corporation🔊", description="```py\nImportant MEMOs out of the Options Clearing Corporation```", url="https://discord.com/channels/888488311927242753/991454231083106354", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=RSSNotifView())

    @disnake.ui.button(label="FINRA Investor Alerts🔊", style=disnake.ButtonStyle.red)
    async def investoralerts( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed= disnake.Embed(title="FINRA Investor Alerts🔊", description="```py\nFINRA Investor Alerts - Feeds Sent Straight to you via SMS (phone) or desktop notification (PC)```", url="https://discord.com/channels/888488311927242753/985592266431291443", color=disnake.Colour.random())
        embed.add_field(name="-", value="```py\n🔔Click the link to setup notifications for this topic.```")
        embed.set_image(url="https://media.giphy.com/media/nyGYAlY0djsVoEA1T9/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed=embed, view=RSSNotifView())



    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.gray)
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=NotificationsView())


class SectorViewDropdown(disnake.ui.Select):
    def __init__(self):


        options = [
            disnake.SelectOption(
            label="🌐Communication Services #cs", description="🌐 View Options feeds for this sector. Navigate with #cs.",
            ),
            disnake.SelectOption(
            label="BASIC MATERIALS🧱 #bm", description="🧱 View Options feeds for this sector. Navigate with #bm.",
            ),
            disnake.SelectOption(
            label="The Technology Sector📀 #te", description="📀 View Options feeds for this sector. Navigate with #te.",
            ),
            disnake.SelectOption(
            label="The Industrial Sector🌇 #in", description="🌇 View Options feeds for this sector. Navigate with #in.",
            ),
            disnake.SelectOption(
            label="The Consumer Defensive Sector🚢 #cd", description="🚢 View Options feeds for this sector. Navigate with #cd.",
            ),
            disnake.SelectOption(
            label="The Energy Sector⚡ #en", description="⚡ View Options feeds for this sector. Navigate with #en.",
            ),
            disnake.SelectOption(
            label="The Utilities Sector💡 #ut", description="💡 View Options feeds for this sector. Navigate with #ut.",
            ),
            disnake.SelectOption(
            label="The Real Estate Sector🏠 #re", description="🏠 View Options feeds for this sector. Navigate with #re.",
            ),
            disnake.SelectOption(
            label="The HealthCare Sector💉 #he", description="💉 View Options feeds for this sector. Navigate with #he.",
            ),
            disnake.SelectOption(
            label="The Consumer Cyclical Sector🌒 #cc", description="🌒 View Options feeds for this sector. Navigate with #cc.",
            ),
            disnake.SelectOption(
            label="The Financial Services Sector💰 #fs", description="💰 View Options feeds for this sector. Navigate with #fs.",
            ),
            disnake.SelectOption(
            label="The ETF Sector🌀", description="🌀 View Options feeds for this sector. Navigate with #etf.",
            ),


        ]

        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="👇 🇸 🇪 🇨 🇹 🇴 🇷  🇫 🇪 🇪 🇩 🇸 👇",
            min_values=1,
            max_values=1,
            custom_id="feeds",
            options=options,
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        if self.values[0] == "🌐Communication Services #cs":
            embed = disnake.Embed(title = "🌐Communication Services #cs", color=disnake.Colour.random())
            embed.add_field(name="COMMUNICATION🌐",value='<#1015390439400034334> \n\n <#1015390936798351381> \n\n <#1015390977701183559> \n\n <#1015391118231339058> \n\n <#1015391238704332932>',inline=True)
            embed.add_field(name="#Keytag for: COMMUNICATION🌐",value='```#cs for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/T2Cc6tr/commservices.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "BASIC MATERIALS🧱 #bm":
            embed = disnake.Embed(title = "BASIC MATERIALS🧱 #bm", color=disnake.Colour.random())
            embed.add_field(name="BASIC MATERIALS🧱", value="<#1015391472121557022> \n\n <#1015391504333807746> \n\n <#1015392688511660142> \n\n <#1015391494263291904> \n\n <#1015391265870856252> \n\n <#1015391482447921212> \n\n <#1015391514458849342> \n\n <#1015391524013477898>", inline=True)
            embed.add_field(name="#Keytag for: **BASIC MATERIALS🧱**",value='```#bm for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/gTP2knd/basicmaterials.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Technology Sector📀 #te":
            embed = disnake.Embed(title = "The Technology Sector📀 #te", color=disnake.Colour.random())
            embed.add_field(name="**TECHNOLOGY SECTOR📀", value="<#1015398199785168927> \n\n <#1015398409051578418> \n\n <#1015398422087467008> \n\n <#1015398435656060978> \n\n <#1015398530900299806> \n\n <#1015398545249009715> \n\n <#1015398557668343928> \n\n <#1015398585120084018> \n\n <#1015398587737329714> \n\n <#1015400438541070398>", inline=False)
            embed.add_field(name="#Keytag for: **TECHNOLOGY SECTOR📀**",value='```#te for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/LSMLSVd/tech.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Industrial Sector🌇 #in":
            embed = disnake.Embed(title = "The Industrials Sector🌇 #in", color=disnake.Colour.random())
            embed.add_field(name="The Industrials Sector🌇", value="<#1015397859023147131> \n\n <#1015398055266234448> \n\n <#1015398068868362240> \n\n  <#1015398078464925736> \n\n  <#1015398089516912741>  \n\n <#1015398099071545446> \n\n <#1015398110626840606> \n\n <#1015398120248582205> \n\n  <#1015398129396371586> \n\n  <#1015398139026477156> \n\n  <#1015398149768089640> \n\n <#1015398159184314478> \n\n <#1015398169921720390> \n\n <#1015398188112420894> \n\n <#1015403810249781298> \n\n <#1015403820337070181>", inline=False)
            embed.add_field(name="#Keytag for: **INDUSTRIALS SECTOR🌇**",value='```#in for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/b57w2gF/industrials.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Consumer Defensive Sector🚢 #cd":
            embed = disnake.Embed(title = "**The Consumer Defensive Sector🚢 #cd**", color=disnake.Colour.random())
            embed.add_field(name="The Consumer Defensive Sector🚢", value="<#1015394369483849758> \n\n <#1015394456943472740> \n\n <#1015394467068514304> \n\n <#1015394479336865792> \n\n <#1015394491319975998> \n\n <#1015394502808195203> \n\n <#1015394516229963807>", inline=True)
            embed.add_field(name="#Keytag for: **CONSUMER DEFENSIVE 🚢**",value='```#cd for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/xGL6z3c/consumerdef.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Energy Sector⚡ #en":
            embed = disnake.Embed(title = "The Energy Sector⚡ #en", color=disnake.Colour.random())
            embed.add_field(name="The Energy Sector⚡", value="<#1015398944186056744> \n\n <#1015399058388561980> \n\n <#1015399068480045237>", inline=True)
            embed.add_field(name="#Keytag for: **ENERGY SECTOR⚡**",value='```#en for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/3zYVRK4/energy.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Utilities Sector💡 #ut":
            embed = disnake.Embed(title = "The Utilities Sector💡 #ut", color=disnake.Colour.random())
            embed.add_field(name="The Utilities Sector💡", value="<#1015399097500455013> \n\n <#1015399280221106217> \n\n <#1015399365394833499> \n\n <#1015399398794068151> \n\n <#1015399422269603880> \n\n <#1015405869929861130>", inline=True)
            embed.add_field(name="#Keytag for: UTILITIES💡",value='```#ut for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/z8MK87H/utilities.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Real Estate Sector🏠 #re":
            embed = disnake.Embed(title = "**The Real Estate Sector🏠 #re**", color=disnake.Colour.random())
            embed.add_field(name="The Real Estate Sector🏠", value="<#1015398703357505646> \n\n <#1015398716062060544> \n\n <#1015398609556094986> \n\n  <#1015398725801226260>", inline=True)
            embed.add_field(name="#Keytag for: REAL ESTATE🏠",value='```#re for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/CnTpG7m/realestate.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The HealthCare Sector💉 #he":
            embed = disnake.Embed(title = "The HealthCare Sector💉", color=disnake.Colour.random())
            embed.add_field(name="The HealthCare Sector💉", value="<#1015398746453966879> \n\n <#1015398872132091956> \n\n <#1015398885214138438> \n\n <#1015398898971451512> \n\n  <#1015398912049299486>  \n\n <#1015398924426674257>", inline=True)
            embed.add_field(name="#Keytag for: **HEALTHCARE SECTOR 💉**",value='```#he for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/TrWrxG4/health.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Consumer Cyclical Sector🌒 #cc":
            embed = disnake.Embed(title = "**The Consumer Cyclical Sector🌒**", color=disnake.Colour.random())
            embed.add_field(name="CONSUMER CYCLICAL🌒", value="<#1015399375171760289> \n\n <#1015399522458931291> \n\n <#1015399532336521226> \n\n <#1015399726960607292> \n\n <#1015399748515156119> \n\n <#1015413980598124625> \n\n <#1015413991549452288> \n\n <#1015414015956111480> \n\n <#1015414025808527361> \n\n <#1015416056816345139> \n\n <#1015416093826896013>", inline=True)
            embed.add_field(name="#Keytag for: **CONSUMER CYCLICAL🌒**",value='```#cc for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/jfHxy3q/consumercyc.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The Financial Services Sector💰 #fs":
            embed = disnake.Embed(title = "Sector Navigation", color=disnake.Colour.random())
            embed.add_field(name="The Financial Services Sector #fs💰", value="<#1015396231050182766> \n\n <#1015396387988447242> \n\n <#1015396402400084150> \n\n <#1015396459044143225> \n\n  <#1015396425451962408> \n\n <#1015396414014107719> \n\n <#1015396854772531292> \n\n <#1015396867028291614> \n\n <#1015397020120391700> \n\n <#1015397024629268580>", inline=True)
            embed.add_field(name="#Keytag for: **FINANCIAL SERVICES💰",value='```#fs for discord navigation```',inline=True)
            embed.set_image(url="https://i.ibb.co/8c66SQq/financialservices.png")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())
        elif self.values[0] == "The ETF Sector🌀 #etf":
            embed = disnake.Embed(title = "The ETF Sector🌀 #etf", color=disnake.Colour.random())
            embed.add_field(name="The ETF Sector🌀`", value="<#1015396437015674890>", inline=True)
            embed.add_field(name="#Keytag for: **ETF SECTOR🌀**",value='```#etf for discord navigation```',inline=True)
            embed.set_image(url="https://ibb.co/V93hgMb")
            embed.set_footer(text="Implemented by FUDSTOP Trading", )
            await interaction.response.edit_message(embed=embed, view=SectorView())

class OpenBBHelpers(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="**/candle Command**", style=disnake.ButtonStyle.blurple, )
    async def candle( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/candle", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER*",value="```py\n/candle ticker:'ticker' interval:'1440' trendline:'True' heikin_candles:'False' extended_hours:'True'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed,view=OpenBBHelpers())

    @disnake.ui.button(label="RSI Chart", style=disnake.ButtonStyle.blurple, )
    async def tamomrsi( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/ta-mom rsi", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - RSI*",value="```py\n/ta-mom rsi ticker:'ticker' interval:'1440' drift:'1' scalar:'100' extended_hours:'True' heikin_candles:'False' trendline:'True' length:'14'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="MACD Chart", style=disnake.ButtonStyle.blurple, )
    async def tamommacd( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/ta-mom rsi", description="py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - MACD*",value="```py\n/ta-mom macd ticker:'ticker' interval:'1440' trendline:'True' extended_hours:'True' heikin_candles:'False' signal:'9' fast:'12' slow:'26'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="Center of Gravity Chart", style=disnake.ButtonStyle.blurple, )
    async def tamomcg( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/ta-mom cg", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - CENTER OF GRAVITY",value="```py\n/ta-mom cg ticker:'ticker' length:'14'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="The FIB Chart", style=disnake.ButtonStyle.red, )
    async def tafib( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/ta-mom rsi", description="Command examples!", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - THE FIB",value="```py\n/ta fib ticker:'ticker' interval:'1440' trendline:'True' heikin_candles:'False' extended_hours:'True'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="Moving Averages Chart - SMA", style=disnake.ButtonStyle.red, )
    async def taema( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/ta ma", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - MOVING AVERAGES(SMA)*",value="```py\n/ta-ma ticker:'ticker' interval:'1440' ma_mode:'sma' extended_hours:'True' trendline:'True' heikin_candles:'False' offset:'0' window:'20,50'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="Moving Averages Chart - EMA", style=disnake.ButtonStyle.red, )
    async def tasma( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/ta ma", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - MOVING AVERAGES(EMA)*",value="```py\n/ta-ma ticker:'ticker' interval:'1440' ma_mode:'ema' extended_hours:'True' trendline:'True' heikin_candles:'False'offset:'0' window:'20,50'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="Options Chains", style=disnake.ButtonStyle.red, )
    async def optchains( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/opt chains", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - OPTIONS CHAINS*",value="```py\n/op chains ticker:'ticker' expiry:'2022-07-15' opt_type:```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="ETF Holdings By Ticker", style=disnake.ButtonStyle.gray, )
    async def etfhldbyticker( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/etf holdings-by-ticker", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - ETF HOLDINGS BY TICKER*",value="```py\n/etf holdings by-ticker ticker:'ticker' sort:Percentage of Fund num:'50'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="Holdings By ETFs", style=disnake.ButtonStyle.blurple, )
    async def hlgbyetf( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Holdings By ETFs", description="```py\nCommand examples!```", color=disnake.Colour.random())
        embed.add_field(name="COMMAND HELPER - HOLDINGS BY ETFs*",value="```py\n/etf holdings by-etf etf: num:'50'```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=OpenBBHelpers())

    @disnake.ui.button(label="**Technical Analysis (/ta)**", style=disnake.ButtonStyle.gray, )
    async def ta( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=OpenBBHelpers())

    @disnake.ui.button(label="**Dark Pool & Shorts (/dps)**", style=disnake.ButtonStyle.gray, )
    async def dps( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=OpenBBHelpers())

    @disnake.ui.button(label="**Options (/opt)**", style=disnake.ButtonStyle.green, )
    async def opt( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=OpenBBHelpers())


    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=OpenBBView())


    @disnake.ui.button(label="**OpenBB Bot - Technical Analysis**", style=disnake.ButtonStyle.grey, )
    async def openbbta( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=OpenBBHelpers())

    @disnake.ui.button(label="**OpenBB Bot - Technical Analysis**", style=disnake.ButtonStyle.grey, )
    async def openbbta( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=OpenBBHelpers())



class SectorView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(SectorViewDropdown())




    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def pin( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="You just went back to Discord Market Sectors section", color=disnake.Colour.dark_orange())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=SectorView())



class OpenBBView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @disnake.ui.button(label="**OpenBB Bot**", style=disnake.ButtonStyle.grey, )
    async def openbbslash( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="openBB Slash Help",  color=disnake.Colour.random())
        embed.add_field(name="EXPLANATION", value="Slash commands will come with different `ARGUMENTS.` The `ARGUMENTS` are often optional, but give more versatility to some options commands. \n\n  If on a P.C. you can use `TAB` to quickly move to the next argument. Once you have what you want, press `Enter` to run the command.", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())
    
    @disnake.ui.button(label="**OpenBB Bot - /candle**", style=disnake.ButtonStyle.grey, )
    async def openbbcandle( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        embed = disnake.Embed(title="/candle", description="Copy/Paste these command helpers into chat and press spacebar to auto-fill. All you need to do is replace the TICKER with the one you want.", color=disnake.Colour.random())
        embed.add_field(name="COMMAND: */candle*",value='Use `/candle` to chart stocks. `ARGUMENTS:` interval:`TRUE/FALSE` trendline:`TRUE/FALSE` start:`YYYY-MM-DD` past_days:`#of days` extended_hours:`TRUE/FALSE` end:`YYYY-MM-DD` news:`TRUE/FALSE` heikin_candles:`TRUE/FALSE`', inline=False)
        embed.add_field(name="COMMAND HELPER*",value='```/candle ticker: interval:1440 trendline:True heikin_candles:False extended_hours:True```', inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())   
    
    @disnake.ui.button(label="**OpenBB Bot - Technical Analysis**", style=disnake.ButtonStyle.grey, )
    async def openbbta( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        await interaction.response.edit_message(view=OpenBBHelpers())      

    @disnake.ui.button(label="**OpenBB Bot - Options Commands**", style=disnake.ButtonStyle.green, )
    async def openbboptions( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        embed = disnake.Embed(title="/opt", description="Copy/Paste these command helpers into chat and press spacebar to auto-fill. All you need to do is replace the TICKER with the one you want.", color=disnake.Colour.random())     
        embed.add_field(name="**Options Command List** `/opt`", value="/opt unu [unusual options] ```\n\n  ``` /opt itm ticker [in the money options] ```\n\n  ``` /opt info ticker [options info] ``` \n\n ``` /opt vsurf ticker <z>/<oi> ``` \n\n  ``` /opt oi ticker <EXPIRATION> <MIN-SP> <MAX-SP>``` \n\n ``` /opt vol ticker <EXPIRATION> <MIN-SP> <MAX-SP> ``` \n\n  ``` /opt smile ticker <EXPIRATION> <MIN-SP> <MAX-SP> ``` \n\n  ``` /opt overview ticker <EXPIRATION> <MIN-SP> <MAX-SP> ``` \n\n  ``` /opt hist ticker <STRIKE> <EXPIRATION> <OPT-TYPE> ``` \n\n  ``` /opt grhist ticker <STRIKE> <EXPIRATION> <OPT-TYPE> <GREEK> ``` \n\n  ``` /opt chain ticker <EXPIRATION> <OPT-TYPE> <MIN-SP> <MAX-SP> ``` \n\n ```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())   
    
    @disnake.ui.button(label="**OpenBB Bot - Dark Pool Command List**", style=disnake.ButtonStyle.green, )
    async def openbbdarkpool( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        embed = disnake.Embed(title="/dps", description="Copy/Paste these command helpers into chat and press spacebar to auto-fill. All you need to do is replace the TICKER with the one you want.", color=disnake.Colour.random())   
        embed.add_field(name="**Dark Pool Command List**", value=" ```/dps hsi <NUM> ``` \n\n  ``` /dps shorted (NUM) ``` \n\n  ``` /dps psi ticker ```\n\n ``` /dps spos ticker ``` \n\n  ``` /dps dpotc ticker ``` \n\n  ``` /dps pos <SORT> <NUM> <ASCENDING> ``` \n\n  ``` /dps sidtc <SORT> <NUM> ``` \n\n  ``` /dps ftd ticker  <DATE_START> <DATE_END> ```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())      
    
    @disnake.ui.button(label="**OpenBB Bot - Due Dilligence**", style=disnake.ButtonStyle.green, )
    async def openbbdd( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        embed = disnake.Embed(title="/dd", description="Copy/Paste these command helpers into chat and press spacebar to auto-fill. All you need to do is replace the TICKER with the one you want.", color=disnake.Colour.random())   
        embed.add_field(name="**DUE DILLIGENCE**", value="```/dd est ticker``` \n\n ```/dd sec ticker``` \n\n  ```/dd borrowed ticker``` \n\n ```/dd analyst ticker``` \n\n  ```/dd supplier ticker``` \n\n  ```/dd customer ticker``` \n\n  ```/dd arktrades ticker``` \n\n  ```/dd pt ticker <RAW> <DATE_START>```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())        
    
    @disnake.ui.button(label="**OpenBB Bot - ECONOMY**", style=disnake.ButtonStyle.red, )
    async def openbbeconomy( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        embed = disnake.Embed(title="/econ", description="Copy/Paste these command helpers into chat and press spacebar to auto-fill. All you need to do is replace the TICKER with the one you want.", color=disnake.Colour.random())   
        embed.add_field(name="**ECONOMY COMMAND LIST**", value="```/econ softs``` \n\n ```/econ meats```\n\n ```/econ energy``` \n\n  ```/econ metals``` \n\n  ```/econ grains``` \n\n ```/econ futures``` \n\n  ```/econ usbonds``` \n\n  ```/econ glbonds``` \n\n  ```/econ indices``` \n\n  ```/econ repo``` \n\n  ```/econ overview``` \n\n  ```/econ feargreed``` \n\n  ```/econ currencies``` \n\n  ```/econ valuation <GROUP>``` \n\n  ```/econ performance <GROUP>```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())   
    
    @disnake.ui.button(label="**OpenBB Bot - ETF Commands**", style=disnake.ButtonStyle.red, )
    async def openbbetf( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        embed = disnake.Embed(title="/etf", description="Copy/Paste these command helpers into chat and press spacebar to auto-fill. All you need to do is replace the TICKER with the one you want.", color=disnake.Colour.random())    
        embed.add_field(name="**ETF Command List**", value="``` /etfs disc-tops <SORT> ``` \n\n  ``` /etfs holdings by-etf <ETF> <NUM> ``` \n\n  ``` /etfs holdings by-ticker <TICKER> <NUM> ```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())       
    
    @disnake.ui.button(label="**OpenBB Bot - OTHER**", style=disnake.ButtonStyle.red, )
    async def openbbother( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):    
        embed = disnake.Embed(title="OTHER", description="Copy/Paste these command helpers into chat and press spacebar to auto-fill. All you need to do is replace the TICKER with the one you want.", color=disnake.Colour.random())   
        embed.add_field(name="**OTHER Commands List**", value="``` /futures ``` \n\n ```/heatmap``` \n\n ```/quote <ticker>``` \n\n ```/ins-last <ticker> <NUM>``` \n\n ```/btc <INTERVAL> <PAST_DAYS> <START> <END>``` \n\n  ```/eth <INTERVAL> <PAST_DAYS> <START> <END>``` \n\n  ```/sol <INTERVAL> <PAST_DAYS> <START> <END>```", inline=False)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=OpenBBView())



    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=BotsView())




class HelpView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        
    @disnake.ui.button(label="FUDSTOP and Discord Help Videos", style=disnake.ButtonStyle.green, )
    async def discordhelpers(self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):   
        
        embeds = [ 
        disnake.Embed(title="FUDSTOP and Discord Help Videos"),
        disnake.Embed(title="DISCORD HELP - Saving Messages as Threads", description="https://youtu.be/neWYeYpfpxY \n Learn how to quickly save messages as Threads to make notes, remember something, or store important information."),
        disnake.Embed(title="DISCORD HELP - Utilizing Discord Search", description="https://youtu.be/3CkRmT2SMNk \n Our discord search feature is one of the most useful tools in this entire Discord. Not only can you **search for specific information from specific users** but you can also search for **dark pool, golden sweep, unusual options, and any other data you can think of. \n **EXAMPLE:** \n In the search bar - you can filter results with the following methods: ```from:<user>``` ```has:<embed> / <image> / <pin> / <video> / <mentions>``` ```during: <date>``` ```between: <date 1> <date 2>``` ```in: <channel>``` ```before: <date> / after: <date>```"),
        disnake.Embed(title="DISCORD HELP - Turning on Developer Mode", description="https://youtu.be/b52p7V4QTaM \n It is **absolutely essential that you turn on developer mode.** This will allow for the hashtag navigation system - the next video in this series."),
        disnake.Embed(title="DISCORD HELP - The Hashtag Navigation System", description="https://youtu.be/scRK6rZ_HWY \n Typing '#' "),
        disnake.Embed(title="DISCORD HELP - Alphaquery and Play Screeners", description="\n **For play screeners - just use the /alphascreen command. It's that simple!**"),
        disnake.Embed(title="DISCORD HELP - Optimizing Your Discord Layout", description="https://youtu.be/xvlTy_GG10Y \n In discord - you can mute the channels you don't want to hear info from, and then set-up notifications for the rest. Utilize the discord setup that bets fits your personal interests!"),
        disnake.Embed(title="DISCORD HELP - How to Query Every Ticker in the Market", description="https://youtu.be/HLG-ol7bAkA \n A tutorial on how to query all tickers with Alphaquery."),
        disnake.Embed(title="DISCORD HELP - Navigation and Researching", description="https://youtu.be/sHthg4RKMRY \n Discord tricks regarding navigation within discord and researching. "),
        disnake.Embed(title="DISCORD HELP - How to Read Open Interest & Volume", description="https://youtu.be/7laLsbo3-K8"),
        disnake.Embed(title="FUDSTOP Shorts - Command Booklets", description="https://youtu.be/lsDV_y0fleM"),
        disnake.Embed(title="FUDSTOP Shorts - Spy Charting", description="https://youtu.be/Gucc9fkphbo \n Learn how to chart for SUPPORT and RESISTANCE by using **gaps.**"),
        disnake.Embed(title="FUDSTOP Shorts - Alphaquery Tutorial", description="https://youtu.be/J-GfKWFSWuk"),
        disnake.Embed(title="FUDSTOP Shorts - Desktop Notifications Example", description="https://youtu.be/zPG_hoQXAto"),
        disnake.Embed(title="FUDSTOP Shorts - Query Every Ticker in the Market by RSI", description="https://youtu.be/2_Jb42gtz7I")]
        options = [
        disnake.SelectOption(label="Home", value="0", emoji="🏡"),
        disnake.SelectOption(label="DISCORD HELP - Saving Messages as Threads", value="1", emoji="🤖"),
        disnake.SelectOption(label="DISCORD HELP - Utilizing Discord Search", value="2", emoji="📓"),
        disnake.SelectOption(label="DISCORD HELP - Turning on Developer Mode", value="3", emoji="🛠️"),
        disnake.SelectOption(label="DISCORD HELP - The Hashtag Navigation System", value="4", emoji="🏫"),
        disnake.SelectOption(label="DISCORD HELP - Alphaquery and Play Screeners", value="5", emoji="🆘"),
        disnake.SelectOption(label="DISCORD HELP - How to Query Every Ticker in the Market", value="6", emoji="💻"),
        disnake.SelectOption(label="DISCORD HELP - Navigation and Researching", value="7", emoji="📹"),
        disnake.SelectOption(label="DISCORD HELP - How to Read Open Interest & Volume", value="8", emoji="📜"),
        disnake.SelectOption(label="FUDSTOP Shorts - Command Booklets", value="9", emoji="🇨🇳"),
        disnake.SelectOption(label="FUDSTOP Shorts - Spy Charting", value="10", emoji="🌐"),
        disnake.SelectOption(label="FUDSTOP Shorts - Alphaquery Tutorial", value="11", emoji="🌐"),
        disnake.SelectOption(label="FUDSTOP Shorts - Desktop Notifications Example", value="12", emoji="🇨🇳"),
        disnake.SelectOption(label="FUDSTOP Shorts - Query Every Ticker in the Market by RSI", value="13", emoji="🌐")]

        super().__init__(
                )
                # Sends first embed with the buttons, it also passes the embeds list into the View class.
        await interaction.response.send_message(embed=embeds[0], view=Menu(embeds))
    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.edit_message(view=HelpView())

    @disnake.ui.button(label="Command Explanations🤖", style=disnake.ButtonStyle.blurple, )
    async def commands( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Command Explanations🤖", description="You are now viewing **Command Explanations🤖**", color=disnake.Colour.dark_green())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())

    @disnake.ui.button(label="Sectors In Discord🌐", style=disnake.ButtonStyle.blurple, )
    async def sectors( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Sectors In Discord🌐", description="You are now viewing **Sectors in Discord**", color=disnake.Colour.dark_green())
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view= SectorView())



    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title="🔙", description="You just went 🔙 from the **Discord Help Menu** and are now viewing the General Help Section")
        embed.add_field(name="🏡", value="Main Menu", inline=True)
        embed.add_field(name="🔙", value="Previous", inline=True)
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        embed.set_thumbnail(url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        await interaction.response.edit_message(embed=embed, view=HelpView())


class CommandExplanationsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

    @disnake.ui.button(label="/flow command", style=disnake.ButtonStyle.red, )
    async def commands( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/flow command", description="```py\nThe flow command helps you visualize real-time options flow by looking at Call versus Put premiums.```", color=disnake.Colour.random())
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())

    @disnake.ui.button(label="/flowsum command", style=disnake.ButtonStyle.red, )
    async def flowsum( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/flowsum command", description="```py\nThe /flowsum is another important command. This helps you visualize options orderflow summary for a given week for a specific ticker. The command: ```!flowsum <ticker```. \n\n See the image above to learn how to read it.", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/3fbt0FZ/FLOWSUM.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())

    @disnake.ui.button(label="/op oi command", style=disnake.ButtonStyle.red, )
    async def oi( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/op oi command", description="```py\nThe OI command is one of the most important. \n\n To use it - type /op oi 'ticker'``` **OR** ```py\n/op oi 'ticker' 'date' to search by expiration. \n\n Open Interest is important - and helps us identify 'SUPPORT' and 'RESISTANCE' when looking at an options chain. The open interest command uses real-time data to make this data easily accessible from Discord.``` ```py\n Also - try /op oichart <ticker>. \n\n (Replace <ticker> and <date> with the date / ticker you want)```", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/v447D3P/openinterestcommand.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())

    @disnake.ui.button(label="/fib command", style=disnake.ButtonStyle.red, )
    async def fib( self,button: disnake.ui.Button,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/fib command", description="'```py\nThe /fib command is super important - as it helps us identify where the stock is trading respective to its yearly high or low. If the target is near the 52week high - it fits put criteria. \n\n If the target is near the 52week low, it matches call criteria.``` **You can use:**```py\n /fib 'ticker' 'year'``````py\n /fib 'ticker' 'month'``` ```py\n /fib 'ticker' 'week'``` ```py\n/fib 'ticker' 'quarter'``` ```py\n /fib 'ticker' 'hour'``` - etc.", color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/BPHbsjN/fib.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading")

        await interaction.response.edit_message(embed=embed, view= CommandExplanationsView())






class ScreenMe(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)


    @disnake.ui.button(label="🟢Core Call Screener",style=disnake.ButtonStyle.link, url="https://www.alphaquery.com/stock-screener/600010230?run=1")
    async def calls(interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.send_message(fview=ScreenMe())
        
    @disnake.ui.button(label="🔴Core Puts Screener",style=disnake.ButtonStyle.link, url="https://www.alphaquery.com/stock-screener/600010230?run=1")
    async def call2s(interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.send_message(fview=ScreenMe())



class HelperView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/neWYeYpfpxY", label="Saving Messages as Threads"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/3CkRmT2SMNk", label="Utilizing Discord Search"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/b52p7V4QTaM", label="Turning on Developer Mode"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/scRK6rZ_HWY", label="The Hashtag Navigation System"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/HLG-ol7bAkA", label="How to Query Every Ticker in the Market"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/sHthg4RKMRY", label="Navigation and Researching"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/7laLsbo3-K8", label="How to Read Open Interest & Volume"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/lsDV_y0fleM/", label="Command Booklets"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/J-GfKWFSWuk", label="Alphaquery Tutorial"))
        self.add_item(disnake.ui.Button(style=disnake.ButtonStyle.link, url="https://youtu.be/xvlTy_GG10Y", label="Optimizing Your Discord Layout"))

class CommandsDropdown(disnake.ui.Select):
    def __init__(self):

        # Set the options that will be presented inside the dropdown
        options = [
            disnake.SelectOption(
                label="🤖 FUDSTOP Bot" ,description="Learn the commands from the in-house FUDSTOP Bot.",
            ),
            disnake.SelectOption(
                label="🤖 Quant Data",description="Quant Data bot commands.",
            ),
            disnake.SelectOption(
                label="🤖 Open BB",description="Learn the OpenBB Bot Commands.",
            ),
            disnake.SelectOption(
                label="🆘 Command Explanations",description="Learn how to interpret some of the commands.",
            ),
            disnake.SelectOption(
                label="🎯 Best Commands",description="Learn the best commands available!",
            ),
        ]
    
        

        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="🤖 🇨 🇴 🇲 🇲 🇦 🇳 🇩 🇸 🤖",
            min_values=1,
            max_values=1,
            custom_id ="xxx9",
            options=options,
        ),

    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.defer(with_message=True, ephemeral=False)
        if self.values[0] == "🤖 FUDSTOP Bot":
            embed = disnake.Embed(title = "FUDSTOP BOT", description = "FUDSTOP Bot is a bot that I've programmed myself using the highest quality data APIs to provide the group with original, highquality commands. This data comes from all of us - so enjoy its superiority. Notable commands:  \n\n **/all** **/fudstop** **/contract_scan** **/order_flow**",color=disnake.Colour.random(), url="https://www.fudstop.org")
            embed.set_image(url="https://media.discordapp.net/attachments/1009552305869303828/1009554886817501204/ezgif-2-f4a5623248.gif")
            embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
            embed.add_field(name="🟢Call Screener", value="https://www.alphaquery.com/stock-screener/600010230?run=1")
            embed.add_field(name="🔴Put Screener", value="https://www.alphaquery.com/stock-screener/600010229?run=1")
            await interaction.edit_original_message(embed=embed, view=FudstopCommandsView())
        else:
            if self.values[0] == "🤖 Quant Data":
                em = disnake.Embed(title="Quant Data Bot Helper", description="Quant Data provides a lot of great commands. Some to take note of are the /fib, /flow, and /stats command. **ALSO - Quant data allows for the individual organization of member feeds who have the personal portfolio setup.", color=disnake.Colour.blue())

                em.set_footer( text="Implemented by Fudstop Trading")
                await interaction.edit_original_message(embed = em, view=QuantDataView())
            else:
                if self.values[0] == "🤖 Open BB":
                    em = disnake.Embed(title="Open BB Bot Helper", color=disnake.Colour.blue())
                    em.set_footer(text="Implemented by FUDSTOP Trading", )

                    await interaction.edit_original_message(embed = em, view=OpenBBView())
                else:
                    if self.values[0] == "🆘 Command Explanations":
                        em = disnake.Embed(title="Command Explanations", description="Click a button below to see the explanation for it.", color=disnake.Colour.blue())
                        em.set_footer(text="Implemented by FUDSTOP Trading", )

                        await interaction.edit_original_message(embed=em, view=CommandExplanationsView())
                    else:
                        if self.values[0] == "🎯 Best Commands":
                            embed = disnake.Embed(title = "best commands🎯", color=disnake.Colour.random())
                            embed.add_field(name="Open Interest",value="```py\n/oi '<ticker>'``` ```py\nThis allows you to get a consolidated view of open interest. Its always recommended to then call /op oi '<ticker>' '<YYYY-MM-DD>' aferwards, as you can breakdown the OI by specific expiration, and the dates are given to you from the initial !oi command.``` ```py\n For example:\n/op oi 'gme'\n\n then\n\n/op oi 'gme' '2022-06-17'```", inline=False)
                            embed.add_field(name="Earnings",value="```py\n/earnings is a super important command. It creates a list of earnings separated After Hours from Premarket - and is already formatted to quickly make spreadsheets to find plays. Be sure to always go BACK one day after calling the command, as we dont want to enter into a core play BEFORE earnings, only after (and the gap has happened).``` ```py\nCommand usage: /earnings '<ticker>' for specific ticker or /earnings for all tickers.```", inline=False)
                            embed.add_field(name="The FIB",value="```py\nThe /fib command is super important - as it helps us identify where the stock is trading respective to its yearly high or low. If the target is near the 52week high - it fits put criteria. If the target is near the 52week low, it matches call criteria.``` ```py\nYou can use:\n/fib 'ticker' 'year'\n\n/fib '<ticker>' 'month'\n\n/fib '<ticker>' 'week'\n\n/fib '<ticker>' 'quarter'\n\n/fib '<ticker>' 'hour', etc.```", inline=False)
                            embed.add_field(name="The FIB Chart", value="```py\nThis is a nice chart that displays the FIB retracement with a nice chart. Use /ta fib '<ticker> <interval>' where interval can be '1min, 5min, 30min, 60min, and daily (1440)'. Other options: extended hours:'[true/false]' heiken candles:'[true/false]' trendline: '[true/false]'```", inline=False)
                            embed.add_field(name="Futures", value="```py\n/futures is an important command as it gives insight to the next pre-market session.```", inline=False)
                            embed.add_field(name="Max Pain", value="```py\n/mp '<ticker> <YYYY-MM-DD>' is an important command as it helps us identify our ceiling / floor with the core logic. The date format is the same as the !oi command, making it easy to remember the date format. Example use: '!mp gme 2022-05-20'. 'NOTE: MAX PAIN IS NOT THE STRIKE PRICE YOU BUY OR WHERE THE STOCK WILL BE TRADING COME EXPIRATION. IT'S YOUR CEILING FOR CORE PLAYS OR FLOOR DEPENDING ON THE DIRECTION.```", inline=False)
                            embed.add_field(name="Short Volume", value="```py\n/shortvol '<ticker>' is a helpful command as it helps you take note of the short volume for the last 5 days and gives you a % overall short. (the command says short interest - but this is actually short VOLUME.``` ```py\n Example use: /shortvol 'KC')```", inline=False)
                            embed.add_field(name="Heatmap", value="```py\n/heatmap are great for visualizing the current state of markets. The /heatmap option comes with ANY of the following: /heatmap '[SP500 / ETF MAP / WORLD MAP / STOCK MARKET MAP]' and the time frames of '[1day, 1week, 1month, 3month, 6month, 1year, and year to date.]'``` ```py\nExample use: /heatmap '[maps:SP500]' '[timeline: 1 Day Performance]'```", inline=False)
                            embed.add_field(name="Reverse Repo", value="```py\n /econ repo will return the last 50 days of the ON RRP in a paginated embed menu. You can survey as much as 100 days.```", inline=False)
                            embed.add_field(name="ETFs", value="```py\n/etf 'holdings by-etf <etf>' is a great command to quickly check the institutional owners piled into a specific ETF. Example use: /etf 'holdings-by-etf KC' will return the top 10 owners of the KC. The value can be increased to up to the top 25 owners.```", inline=False)
                            embed.add_field(name="ETF by Ticker", value="```py\n/etf 'holdings by-ticker' displays which ETFs are piled into the ticker selected. Example use: /etf 'holdings by-ticker' 'KC' returns all ETFs that are exposed to KC. Up to the top 25 will display - 10 by default.```", inline=False)
                            embed.add_field(name="flowsum", value="```py\nThe /flowsum '<ticker>' command is a great way to visualize option order flow intra-day. You'll see call and put side premium and can easily analyze it.``` ```py\nExample use: /flowsum DIDI```", inline=False)
                            embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
                            await interaction.edit_original_message(embed = embed, view=BestCommandsView())

class FudstopBotDropdown(disnake.ui.Select):
    def __init__(self):
        options= [
            disnake.SelectOption( label=f"🔍 /analysis", description=f"A list of commands used for market-wide analysis."),
            disnake.SelectOption( label=f"💵 /earnings", description=f"Earnings related commands."),
            disnake.SelectOption( label=f"🧠 /learn", description=f"Select from a plethora of topics to learn from including Discord help.", ),
            disnake.SelectOption( label=f"📈 /stock", description=f"A list of commands for individual stock analysis.", ),
            disnake.SelectOption( label="💉 /iv", description=f"Returns a list of commands for Implied Volatility.", ),
            disnake.SelectOption( label=f"🫧 /stream",description=f"Returns a list of commands that stream realtime data." ),]

        super().__init__(
            placeholder="🤖 🇫 🇺 🇩 🇸 🇹 🇴 🇵  🇧 🇴 🇹 ",
            min_values=1,
            max_values=1,
            custom_id ="12xxx9",
            options=options,
        ),

    async def callback(self, interaction: disnake.MessageInteraction):
        await interaction.response.defer(with_message=False, ephemeral=False)
        if self.values[0] == "🔍 /analysis":
            analysisem = disnake.Embed(title="🔍 Analysis Commands", description=f"```py\n 🔍 Analysis Commands are used to scan the market for ratings or a specific set of criteria. Example: 'stocks with the most short interest' or 'specific technical patterns`. \n\n Click a button below to learn more about each command.```", color=disnake.Colour.dark_orange())
            analysisbutton1 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="🎊/analysis gaps_down",)
            analysisbutton1.callback = lambda interaction: interaction.response.edit_message("```py\n/analysis gaps_down: Input a percentage and it will return gaps down, if any.``` </analysis gaps_down:1025074283942248481>",embed = analysisem)
            analysisbutton2 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="🎊/analysis gaps_up",)
            analysisbutton2.callback = lambda interaction: interaction.response.edit_message("```py\n/analysis gaps_up: Input a percentage and it will return gaps up, if any.``` </analysis gaps_up:1025074283942248481>",embed = analysisem)
            analysisbutton3 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="🎊/analysis newhigh",)
            analysisbutton3.callback = lambda interaction: interaction.response.edit_message("```py\n/analysis newhigh: Returns tickers that have just hit their 52 week highs.``` </analysis newhigh:1025074283942248481>",embed = analysisem)
            analysisbutton4 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="🎊/analysis newlow",)
            analysisbutton4.callback = lambda interaction: interaction.response.edit_message("```py\n/analysis newlow: Returns tickers that have just hit their 52 week lows.``` </analysis newlow:1025074283942248481>",embed = analysisem)
            analysisbutton5 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="🎊/analysis topshorts",)
            analysisbutton5.callback = lambda interaction: interaction.response.edit_message("```py\n/analysis topshorts: Returns a list of tickers with the most shorted volume / most shorted % of float.``` </analysis topshorts:1025074283942248481>",embed = analysisem)
            analysisbutton6 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="🎊/analysis analyst",)
            analysisbutton6.callback = lambda interaction: interaction.response.edit_message("```py\n/analyst: Returns the latest ratings for a ticker. [ephemeral]``` </analyst:1026367610708832328>",embed = analysisem)
            view1337 = disnake.ui.View()
            view1337.add_item(analysisbutton1)
            view1337.add_item(analysisbutton2)
            view1337.add_item(analysisbutton3)
            view1337.add_item(analysisbutton4)
            view1337.add_item(analysisbutton5)
            view1337.add_item(analysisbutton6)
         #   em = disnake.Embed(title=
         #   "```py\n/charlies_vids: Pick a category of videos and start learning!``` </charlies_vids:1021173878636171266>"
          #  "```py\n/check all_52s: Choose from 'newHigh' 'newLow' 'nearLow' and 'nearHigh' to return the respective tickers for each category.``` </check all_52s:1026367610708832334>"
          #  "```py\n/china ipo: Returns the latest China IPO.``` </china ipos:1024557728473022514>"
           # "```py\n/deep: Returns technicals drop-down, order-flow, capital-flow, stock data metrics, and earnings crush and other earnings metrics.``` </deep:1026568067649650808>"
           # "```py\n/discord help_me: Returns an ephemeral list of tips, tricks, and tutorials to help with Discord.``` </discord help_me:1025074283942248483>"
           # "```py\n/learn_options_101: The full course from the Options Industry Council on Options Trading.```</learn options_101:1026367610708832329> "
           # "```py\n/learn core_logic: Provides a very in-depth guide on how to utilize the core logic from what not to do - to chart setup - also includes the play screeners.``` </learn core_logic:1026367610708832329>"
           # "```py\n/learn covered_calls: Learn about the Level One Options Strategy: Covered Calls. Passive Income and Revenue Generating Strategy.``` </learn covered_calls:1026367610708832329>"
          #  "```py\n/learn etfs: Learn all about Exchange Traded Funds.``` </learn etfs:1026367610708832329>"
         #   "```py\n/stock orderflow: Returns a full picture of order-flow on the day - realtime.``` </stock capitalflow:1034275861941211161>"
        # "```py\n/stock capitalflow: Returns a real-time stream of capital-flow from 6 different sets of data. 'new' 'large' 'medium' 'small' 'super large' 'major'``` </stock capitalflow:1034275861941211161>"
         #  E "```py\n/earnings crush: Returns the amount of IV% that will be lost AFTER the next earnings report.``` </earnings crush:1026367610708832327>", color=disnake.Colour.dark_gold())
            await interaction.edit_original_message(view=view1337)
        else:
            if self.values[0] == "💵 /earnings":
                earningsem = disnake.Embed(title="💵 Earnings Commands", description=f"```py\n 💵 Earnings Commands are used to lookup things such as the upcoming earnings dates for tickers - EPS estimates, earnings estimates, earnings crush, and other financial information.```", color=disnake.Colour.dark_green())
                earningsbutton1 = disnake.ui.Button(style=disnake.ButtonStyle.green, label="💵/earnings crush")
                earningsbutton1.callback = lambda interaction: interaction.response.edit_message("```py\nThe Earnings Crush command is used to identify the amount of Implied Volatility that will be lost following the next scheduled earnings report date.</earnings crush:1026367610708832327>", embed = earningsem)
                earningsbutton2 = disnake.ui.Button(style=disnake.ButtonStyle.green, label="💵/earnings projection")
                earningsbutton2.callback = lambda interaction: interaction.response.edit_message("```py\nEarnings projection returns the next scheduled earnings date as well as the projected move from the earnings announcement.```</earnings projection:1026367610708832327>", embed = earningsem)
                earningsbutton3 = disnake.ui.Button(style=disnake.ButtonStyle.green, label="💵/earnings upcoming")
                earningsbutton3.callback = lambda interaction: interaction.response.edit_message("```py\nEarnings upcoming is a simple command that returns the tickers for the date that you chose when calling the command. The format for the date is YYYY-MM-DD```</earnings upcoming:1026367610708832327>", embed = earningsem)
                earningsview = disnake.ui.View()
                earningsview.add_item(earningsbutton1)
                earningsview.add_item(earningsbutton2)
                earningsview.add_item(earningsbutton3)
                await interaction.edit_original_message(view=earningsview)
            else:
                if self.values[0] == "🧠 /learn":
                    learnem = disnake.Embed(title="🧠 Learn Commands",description=f"```py\n🧠 Learn Commands are to help you learn several different topics. From discord tips, to tutorials, to market topic explanations, to datesets - and more ... use /learn to help get acclimated to the areas you need help in. And of course - you can always jump into the main chat and ask for help if needed.```", color=disnake.Colour.dark_gold())
                    learnview = disnake.ui.View()
                    learnbutton1 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="🧠/learn discord")
                    learnbutton1.callback = lambda interaction: interaction.response.edit_message("```py\n/learn discord is used to help learn the different areas of discord. Includes tutorials. You can also visit the help forum channels as well for additional help, or jump in chat with any questions.```</learn discord:1026367610708832329>", embed=learnem)
                    learnbutton2 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="🧠/learn options_101",)
                    learnbutton2.callback = lambda interaction: interaction.response.edit_message("```py\n/learn options_101 returns the entire Options 101 Course provided by the Options Industry Council.```</learn options_101:1026367610708832329>", embed=learnem)
                    learnbutton3 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="🧠/learn core_logic",)
                    learnbutton3.callback = lambda interaction: interaction.response.edit_message("```py\n/learn core_logic helps get familiarized with the core logic process. It's always recommended to start trading core utilizing PAPER TRADING this way you don't risk any capital when you're just beginning to learn the process.```</learn core_logic:1026367610708832329>", embed=learnem)
                    learnbutton4 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="🧠/learn covered_calls",)
                    learnbutton4.callback = lambda interaction: interaction.response.edit_message("```py\n/learn covered_calls helps you learn about the Covered Call options strategy for generating revenue.```</learn covered_calls:1026367610708832329>", embed=learnem)
                    learnbutton5 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="🧠/learn etfs",)
                    learnbutton5.callback = lambda interaction: interaction.response.edit_message("```py\n/learn etfs helps you learn about Exchange Traded Funds, their mechanics, and their ecosystem.```</learn etfs:1026367610708832329>", embed=learnem)
                    learnbutton6 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="🧠/learn calls",)
                    learnbutton6.callback = lambda interaction: interaction.response.edit_message("```py\n/learn calls helps you learn about the Level II Options Strategy - The Long Call.```</learn calls:1026367610708832329>", embed=learnem)
                    learnbutton7 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="🧠/learn china",)
                    learnbutton7.callback = lambda interaction: interaction.response.edit_message("```py\n/learn china helps you learn about the China Opportunity and the Emerging Markets. Once you get past the media FUD surrounding this topic and look into the underlying documentation - you realize that China is a once in a lifetime investing opportunity given their future growth trajectory.```</learn china:1026367610708832329>", embed=learnem)
                    learnview.add_item(learnbutton1)
                    learnview.add_item(learnbutton2)
                    learnview.add_item(learnbutton3)
                    learnview.add_item(learnbutton4)
                    learnview.add_item(learnbutton5)
                    learnview.add_item(learnbutton6)
                    learnview.add_item(learnbutton7)
                    await interaction.edit_original_message(view=learnview)
                else:
                    if self.values[0] == "📈 /stock":
                        stockem = disnake.Embed(title="📈 Stock Commands", description=f"```py\nStock Commands are used to gather data and insights on stock tickers. There are many options to choose from. Click a button below:", color=disnake.Colour.dark_red())
                        stockview = disnake.ui.View()
                        stockbutton1 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="📈/stock capitalflow")
                        stockbutton1.callback = lambda interaction: interaction.response.edit_message("```py\n/stock capitalflow returns the amount of capital flow in and out of a stock in real time. The capital is broken down in to seven different player types: 'new' 'super large' 'major' 'large' 'medium' 'small' 'retail'``` </stock capitalflow ticker:1034275861941211161>")
                        stockbutton2 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="📈/stock orderflow")
                        stockbutton2.callback = lambda interaction: interaction.response.edit_message("```py\n/stock orderflow shows you the volume broken down into three components and matches the data available in the Webull Volume Analysis tool: 'buy' 'sell' and 'neutral'.``` </stock orderflow:1034275861941211161>")
                        stockbutton3 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="📈/stock criminals")
                        stockbutton3.callback = lambda interaction: interaction.response.edit_message("```py\n/stock criminals returns the latest Government transactions. For example, use /stock_criminals NVDA to see Nancy Pelosi's transactions as of late.``` </stock criminals:1034275861941211161>")
                        stockbutton4 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="📈/stock liquidity")
                        stockbutton4.callback = lambda interaction: interaction.response.edit_message("```py\n/stock liquidity returns the liquidity ranking for a ticker. The rankings are 1-5. ``` </stock liquidity:1034275861941211161>")
                        stockbutton5 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="📈/stock company_brief")
                        stockbutton5.callback = lambda interaction: interaction.response.edit_message("```py\n/stock company_brief returns information surrounding a ticker, such as email, fax, address, number of employees, logo, and a description of the company.``` </stock company_brief:1034275861941211161>")
                        stockbutton6 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="📈/stock insider_summary")
                        stockbutton6.callback = lambda interaction: interaction.response.edit_message("```py\n/stock insider_summary gives a market-wide look at the tickers with the biggest insider moves.``` </stock insider_summary:1034275861941211161>")
                        stockbutton7 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="📈/stock institutions")
                        stockbutton7.callback = lambda interaction: interaction.response.edit_message("```py\n/stock institutions provides the top 10 institutional owners in order of size. Notice Blackrock, Fidelity, State Street and Vanguard will be the top four in most cases.``` </stock institutions:1034275861941211161>")
                        stockbutton8 = disnake.ui.Button(style=disnake.ButtonStyle.blurple, label="📈/stock leverage")
                        stockbutton8.callback = lambda interaction: interaction.response.edit_message("```py\n/stock leverage returns the current leverage rates for a ticke - including margin rates, overnight rates, and interest rates as well as daytrade leverage.``` </stock leverage:1034275861941211161>")
                        stockview.add_item(stockbutton1)
                        stockview.add_item(stockbutton2)
                        stockview.add_item(stockbutton3)
                        stockview.add_item(stockbutton4)
                        stockview.add_item(stockbutton5)
                        stockview.add_item(stockbutton6)
                        stockview.add_item(stockbutton7)
                        stockview.add_item(stockbutton8)
                        await interaction.edit_original_message(view=stockview)

class FudstopCommandsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)

        self.add_item(FudstopBotDropdown())
class BotsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
        self.add_item(CommandsDropdown())


    



class FUDSTOPView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    
    @disnake.ui.button(label="Active Stock Tickers", style=disnake.ButtonStyle.blurple, )
    async def active( self,button: disnake.ui.Button,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/active", description = "Returns the most active tickers for the day. Can easily plug into excel!",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/cvChp7P/active.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="🎯Advanced Price Target", style=disnake.ButtonStyle.grey, )
    async def active( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/advanced_pricetarget", description = "Advanced Price Target not only gives you analyst rating and industry thoughts, but it updaes once per week and constantly searches for new data for the average pricing!",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/gJszfyP/ADVANCED-PRICE-TARGET.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Agency Mortgage Backed Securities - FED", style=disnake.ButtonStyle.blurple, )
    async def ambs( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/ambs", description = "/ambs lists the recent Mortgage Backed Security Transactions out of the FED. Your options are: **all** ** sales** **purchases** **rolls** **swaps**",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/Wk3vpdB/AMBS.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Beneficial Owner", style=disnake.ButtonStyle.green, )
    async def beneficialowner( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/beneficial_owner", description = "/beneficial_owner lists the latest recorded 13F filed for a specific ticker of your choosing. Must search for tickers in all caps!**",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/jDGnzqJ/beneficialowner.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Criminals", style=disnake.ButtonStyle.grey, )
    async def criminals( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/criminals",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media0.giphy.com/media/EnOeJR5MUwR5tYol0m/giphy.gif?cid=790b7611790ee13ce59f1ac474aff94fb98af687496d8e9f&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Analyst Consensus", style=disnake.ButtonStyle.green, )
    async def analystconsensus( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/xHj1q29FBK3u9ZkYHp/giphy.gif?cid=790b761116c88281f98d49dc7617c98071f8a430efc2968a&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())


    @disnake.ui.button(label="Check Moving Averages (50ma and 200ma - DAILY)", style=disnake.ButtonStyle.grey, )
    async def checkmas( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/check_moving_averages",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media4.giphy.com/media/MA8oZhZLpsf04Y4cQN/giphy.gif?cid=790b7611e6c681d5b36d1eb4798ac05070b00cbd877df588&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Check all Major Indexes", style=disnake.ButtonStyle.blurple, )
    async def checkindex( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/check_indexes",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media4.giphy.com/media/wfzmlEV4joHdppVoPO/giphy.gif?cid=790b7611970dfa8cf41f4fd298c2ae6e656539f60b5f2aca&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Check Price Performance", style=disnake.ButtonStyle.grey, )
    async def check( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/check",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media1.giphy.com/media/m8xCbh80CfLjimDrv8/giphy.gif?cid=790b7611150592dcfa4af5fd09c6c086f7dde4149db4ba84&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Earnings", style=disnake.ButtonStyle.green, )
    async def earnings( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/earnings",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://giphy.com/gifs/RswiJjpckvTTi8fdRa")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Earnings Upcoming", style=disnake.ButtonStyle.blurple )
    async def earningsupcoming( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/earnings_upcoming <date>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/YcGDyz8/earnings-UPCOMING.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())


    @disnake.ui.button(label="Enviornmental, Social, and Governance Risk", style=disnake.ButtonStyle.grey, )
    async def esgrisk( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/IoWcUqVy8KlNnZerHn/giphy.gif?cid=790b7611ba41e28ad4b2675b57748008c8446a6b6d14a6d2&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Enviornmental, Social, and Governance Metrics", style=disnake.ButtonStyle.green, )
    async def esg( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media1.giphy.com/media/khvcU2xXGdKI3jw3pk/giphy.gif?cid=790b7611bfadbf75e499ede5e5e2f14197b47255a1312869&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Dow Jones List", style=disnake.ButtonStyle.grey, )
    async def dowjones( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/dowjones",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/7w3LnCN2lvpRQlBlcG/giphy.gif?cid=790b7611e87a8c7453800751137e56a5848d3641970e030e&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Realtime Top Gainers / Losers(dropGainers)", style=disnake.ButtonStyle.blurple, )
    async def topgain( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/direction <direction> <gainer/loser>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media0.giphy.com/media/vkqzRijPaYex4vnlcs/giphy.gif?cid=790b76110a1d363d8e7c4aa338be43c1574600bbb4c0c4ab&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Daily Ratings", style=disnake.ButtonStyle.blurple, )
    async def dailyrating( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/consensus",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media2.giphy.com/media/hoLAIJForW8v9L5pMy/giphy.gif?cid=790b761126c0d861142b53cfb6bcc1f18263e412ab46d699&rid=giphy.gif&ct=g")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Company Notes Due", style=disnake.ButtonStyle.blurple, )
    async def companynotes( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/company_notes_due",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/5M31qN7/COMPANY-notes-due.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="ETF Ticker List", style=disnake.ButtonStyle.green, )
    async def etflist( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/etf_holders",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/wz2Hb5K/etf-holders.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Evaluate A Company", style=disnake.ButtonStyle.grey, )
    async def evaluate( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/evaluate",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/pXj2x8p/evaluate.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Listed Exchange", style=disnake.ButtonStyle.grey, )
    async def exchange( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/exchange",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/BqBt9KD/exchange.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Fails to Deliver - Excel Ready", style=disnake.ButtonStyle.green, )
    async def fails( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fails",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/ZMfLsnG/fails.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://static.wixstatic.com/media/3235bb_fedadfcf38994349b7fa98fbf3f6f372~mv2.gif")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Fair Value - Industry", style=disnake.ButtonStyle.grey, )
    async def fair_value( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fair_value",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/ZMfLsnG/fails.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="52 week high / low + Dates", style=disnake.ButtonStyle.blurple, )
    async def fiftytwo( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fifty_two",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/wdWsFfq/fiftytwo.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView())

    @disnake.ui.button(label="Page 2 -->", style=disnake.ButtonStyle.red, )
    async def page2( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/fifty_two",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/wdWsFfq/fiftytwo.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media2.giphy.com/media/bVPcXheO9jDBYP2zXH/giphy.gif?cid=790b76116c18f3195489b517ff7ebc22a6fa6fa904ac40b1&rid=giphy.gif&ct=g")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())


    
    
    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def pin( self,interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=FUDSTOPView)



class FUDSTOPView2(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)


    @disnake.ui.button(label="Financial Score", style=ButtonStyle.blurple, )
    async def fiftytwo( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/financial_score",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/pKsWdps/financialscore.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media2.giphy.com/media/bVPcXheO9jDBYP2zXH/giphy.gif?cid=790b76116c18f3195489b517ff7ebc22a6fa6fa904ac40b1&rid=giphy.gif&ct=g")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="FINVIZ Market Screener", style=ButtonStyle.blurple, )
    async def finscreen( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/finscreen",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://i.ibb.co/F3L9gQB/finscreen.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media2.giphy.com/media/bVPcXheO9jDBYP2zXH/giphy.gif?cid=790b76116c18f3195489b517ff7ebc22a6fa6fa904ac40b1&rid=giphy.gif&ct=g")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="Float Ownership Check", style=ButtonStyle.blurple, )
    async def floats( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/float <ticker>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())
        
    @disnake.ui.button(label="Failure to Deliver Interactive Chart", style=ButtonStyle.blurple, )
    async def ftds( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title ="/ftds <ticker>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media.discordapp.net/attachments/1009552305869303828/1009556647934439505/unknown.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="Futures Maps", style=ButtonStyle.blurple, )
    async def futures( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/futures <map>",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media.discordapp.net/attachments/1009552305869303828/1009556927841308723/unknown.png?width=1283&height=610")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())

    @disnake.ui.button(label="FinViz top Shorts with 30%+ Shorted", style=ButtonStyle.blurple, )
    async def topshorts( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "/float",color=disnake.Colour.random(), url="https://www.fudstop.org")
        embed.set_image(url="https://media.discordapp.net/attachments/1009552305869303828/1009557120372449450/unknown.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://i.ibb.co/fXGB8VP/FAIRvalue.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/1009552305869303828/1009555505699639366/ezgif-2-f4a5623248.gif")
        await interaction.response.edit_message(embed=embed, view=FUDSTOPView2())


    @disnake.ui.button(label="🔙", style=ButtonStyle.blurple, )
    async def pin( self, button: disnake.ui.Button, interaction: ApplicationCommandInteraction ):
        await interaction.response.edit_message(view=None)


class QuantDataView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="Quant Data Bot", style=disnake.ButtonStyle.blurple, )
    async def quantdata( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "Quant Data", description = " **Quant Data Bot provides the following four feeds which we have set-up by industry here in the discord:",color=disnake.Colour.random())
        embed.set_image(url="https://media.giphy.com/media/EEbWVfRi4QeBPymCCe/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=QuantDataView())

    @disnake.ui.button(label="1️⃣Dark Pool Feeds", style=disnake.ButtonStyle.blurple, )
    async def unusualopt( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "1️⃣Dark Pool Feeds", description = "Dark Pool feeds come with side of sentiment. \n\n 🔴 = Sell Side \n\n 🟢 = Buy Side, GRAY = Neutral \n\n Dark Pool Feeds can be search using the Discord search by using the following search options: \n ```'Dark Pool Trade: <ticker>''' \n **or** \n ````Dark Pool Trade:' during:<date>```",color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/0rHRffZ/DARKPOOLTRADER.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=QuantDataView())
    
    @disnake.ui.button(label="2️⃣Unusual Options", style=disnake.ButtonStyle.blurple, )
    async def quantalerts( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "2️⃣Unusual Options", description = "Unusual Options Activity identifies options contracts that are trading at a higher volume relative to the contract's open interest. Unusual Options can provide insight on what **smart money** is doing with large volume orders, signaling new positions and potentially a big move in the underlying asset. \n\n 🔴 = Puts \n\n 🟢 = Calls \n\n Unusual Options Feeds can be searched in discord by using: \n ```'Unusual Opt' <ticker>``` **or** ```'Unusual Opt' during:<date>``` ",color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/7GD4rY2/UNUSUAL.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=QuantDataView())

    @disnake.ui.button(label="3️⃣Golden Sweeps", style=disnake.ButtonStyle.blurple, )
    async def sweeps( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "Quant Data", description = "Golden Sweeps are basically a very large order that hits the market and takes all or most the inventory/offers at once. This is usually a very high probability signal given the aggressive stance of the trader(s) behind it. \n\n These orders can be both **bullish or bearish** not only based on whether Puts or Calls were bought but also based on whether the sweep was on the Call or Put side. \n\n Golden Feeds can be searched in discord by using: \n ```'Golden' <ticker>``` **or** ```'Golden' during:<date>```",color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/6NjkxNj/golden-sweeps.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        await interaction.response.edit_message(embed=embed, view=QuantDataView())
    
    @disnake.ui.button(label="4️⃣Quant Alerts", style=disnake.ButtonStyle.blurple, )
    async def darkpool( self,interaction: ApplicationCommandInteraction ):
        embed = disnake.Embed(title = "4️⃣Quant Data", description = "Quant Alerts are **bullish** or **bearish** buy signals. I would avoid these as these feeds are solely for research, intention purposes and are 15 minute delayed. 🔴 = Bearish \n\n 🟢 = Bullish",color=disnake.Colour.random())
        embed.set_image(url="https://i.ibb.co/fqxQbbN/QUANTALERTING.png")
        embed.set_footer(text="Implemented by FUDSTOP Trading", icon_url="https://www.singlestore.com/images/cms/blog-posts/img_blog_post_featured_iex-cloud.png")
        
        await interaction.response.edit_message(embed=embed, view=QuantDataView())

    
class BestCommandsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)



    @disnake.ui.button(label="Open Interest", style=disnake.ButtonStyle.red)
    async def oicmnd( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/op oi", description="```py\nOpen Interest [/op oi <ticker] || [op oi '<ticker>' <YYYY-MM-DD>```", color=disnake.Colour.random())
        embed.add_field(name="Open Interest",value="```py\n/op oi '<ticker>'``` ```py\n || This allows you to get a consolidated view of open interest. Its always recommended to then call /op oi '<ticker>' '<YYYY-MM-DD>' aferwards, as you can breakdown the OI by specific expiration, and the dates are given to you from the initial !oi command. For example: !oi `gme` and then !oi 'gme 2022-06-17'.```", inline=False)
        embed.set_image(url="https://i.ibb.co/LxBz971/OI.png")

        embed.set_footer( text="Rise Above the Narratives")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="Earnings", style=disnake.ButtonStyle.red)
    async def earningscmnd( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/earnings", description="```py\n/earnings or /earnings <ticker>```", color=disnake.Colour.random())
        embed.add_field(name="Earnings",value='```py\n/earnings is a super important command.``` ```py\n It creates a list of earnings separated After Hours from Premarket - and is already formatted to quickly make spreadsheets to find plays. Be sure to always go BACK one day after calling the command, as we dont want to enter into a core play BEFORE earnings, only after (and the gap has happened). Command usage: /earnings `<ticker>` for specific ticker or /earnings for all tickers.```', inline=False)
        embed.set_image(url="https://i.ibb.co/7YcKSxF/earnings2.png")

        embed.set_footer( text="Rise Above the Narratives")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="The FIB", style=disnake.ButtonStyle.red)
    async def fibcmnd(self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/fib", description="```py\n/fib <timeframe> <ticker>```", color=disnake.Colour.random())
        embed.add_field(name="The FIB",value='```py\nThe /fib command is super important - as it helps us identify where the stock is trading respective to its yearly high or low.``` If the 🎯 is **near the 52week high** - it fits put criteria. \n\n If the 🎯is **near the 52week low**, it matches call criteria. You can use ```py\n/fib `<ticker> year`, /fib `<ticker> month`, /fib `<ticker> week`, /fib `<ticker> quarter`, /fib `<ticker> hour`, etc.```', inline=False)
        embed.set_image(url="https://i.ibb.co/BPHbsjN/fib.png")

        embed.set_footer( text="Rise Above the Narratives")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="The Fib Chart📈", style=disnake.ButtonStyle.red)
    async def fibcartcmd( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="The Fib Chart📈", description="```py\n/ta fib <ticker> <interval> where interval can be '1min', '5min', '30min', '60min', and 'daily (1440)'. Other options: extended hours:'[true/false]' heiken candles:'[true/false]' trendline: '[true/false]'```", color=disnake.Colour.random())
        embed.add_field(name="The FIB Chart", value="```py\nThis is a nice chart that displays the FIB retracement with a nice chart.``` ```py\n Use /ta fib <ticker> <interval> where interval can be '1min', '5min', '30min', '60min', and 'daily (1440)'. Other options: extended hours:'[true/false]' heiken candles:'[true/false]' trendline: '[true/false]'```", inline=False)
        embed.set_image(url="https://i.ibb.co/xzvS9Vd/TAFIB.png")

        embed.set_footer( text="Rise Above the Narratives")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="Futures🧞", style=disnake.ButtonStyle.red)
    async def futcmnd( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Futures🧞", description="```py\n/futures``` or ```py\n/futures <futures type>```", color=disnake.Colour.random())
        embed.add_field(name="Futures", value="```py\n/futures is an important command as it gives insight to the next pre-market session.```", inline=False)
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="Max Pain😩", style=disnake.ButtonStyle.red)
    async def mpxmnc( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Max Pain😩", description="```py\n/earnings or /earnings <ticker>```", color=disnake.Colour.random())
        embed.add_field(name="Max Pain", value="```py\n/mp <ticker> <YYYY-MM-DD> is an important command as it helps us identify our ceiling / floor with the core logic. The date format is the same as the /op oi command, making it easy to remember the date format.``` Example use: ```py\n/mp gme 2022-05-20`.``` ```py\nNOTE: MAX PAIN IS NOT THE STRIKE PRICE YOU BUY OR WHERE THE STOCK WILL BE TRADING COME EXPIRATION. IT'S YOUR CEILING FOR CORE PLAYS OR FLOOR DEPENDING ON THE DIRECTION.```", inline=False)
        embed.set_image(url="https://i.ibb.co/pjYp5kg/MPGME.png")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="Short Volume🩳", style=disnake.ButtonStyle.red)
    async def shortvol( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Short Volume", description="```/shortvol <ticker```", color=disnake.Colour.random())
        embed.add_field(name="Short Volume", value="```py\n/shortvol `<ticker>` is a helpful command as it helps you take note of the short volume for the last 5 days and gives you a % overall short.``` Example use: ```py\n /shortvol KC```", inline=True)
        embed.set_image(url="https://i.ibb.co/JyznBFH/SHORTINT-SPY.png")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())


    @disnake.ui.button(label="Heatmap🔥", style=disnake.ButtonStyle.red)
    async def heatmapx( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Heatmap", description="```py\n/heatmap``` or ```py\n/heatmap <heatmap type>```", color=disnake.Colour.random())
        embed.add_field(name="Heatmap", value="```py\n/heatmap is great for visualizing the current state of markets. The /heatmap option comes with ANY of the following:``` ```py\n /heatmap '[SP500 / ETF MAP / WORLD MAP / STOCK MARKET MAP]' and the time frames of '[1day, 1week, 1month, 3month, 6month, 1year, and year to date.]'``` Example use: ```py\n/heatmap [maps:SP500] [timeline: 1 Day Performance]```", inline=False)
        embed.set_image(url="https://i.ibb.co/Sdx00r3/HEATMAP.png")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="Reverse Repo♾️", style=disnake.ButtonStyle.red)
    async def repocmnd( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="-", description="```py\n/econ repo```", color=disnake.Colour.random())
        embed.add_field(name="Reverse Repo", value="```py\n/econ repo will return the last 50 days of the ON RRP in a paginated embed menu. You can survey as much as 100 days.```", inline=False)
        embed.set_image(url="https://i.ibb.co/dJCqnbN/ECONREPO.png")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())


    @disnake.ui.button(label="ETF Holders", style=disnake.ButtonStyle.red)
    async def etfs2cmnd(self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="ETF Holders", description="```py\n/etf_holders <ticker>```")
        embed.add_field(name="ETF stock holdings by ETF", value="```py\n/etf_holders <ticker> displays which tickers are piled into the ETF selected.``` Example use: ```py\n/etf_holders SPY returns all stocks that are exposed to SPY. Displays all holdings in order of weight.```", inline=False)
        embed.set_image(url="https://i.ibb.co/ctwXyDr/ETFHOLDINGSMYFUND.png")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())

    @disnake.ui.button(label="Flow Summary💦", style=disnake.ButtonStyle.red, )
    async def flowcmnd( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="/flowsum", description="```py\n/flowsum <ticker>```", color=disnake.Colour.random())
        embed.add_field(name="/flowsum", value="```py\nThe /flowsum <ticker> command is a great way to visualize option order flow intra-day. You'll see call and put side premium and can easily analyze it.``` Example use: ```py\n/flowsum DIDI```", inline=False)
        embed.set_image(url="https://i.ibb.co/3v9WsyN/FLOWSUM.png")
        await interaction.response.edit_message(embed=embed, view=BestCommandsView())


    @disnake.ui.button(label="🔙", style=disnake.ButtonStyle.blurple, )
    async def goback( self,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="Bots Menu", color=disnake.Colour.dark_blue())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed= em, view=BotsView())



class TimeRelatedDropdown(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(label="Time Decay", value="https://u1sweb.webullfinance.com/social/acfdfdb3529d43688b4e2d6dd95ec4c8.png"),
            disnake.SelectOption(label="Weekend Effect", value="https://u1sweb.webullfinance.com/social/ac6e9e9f1ffc41e1b18fdb864dba8c91.png"),
            disnake.SelectOption(label="Triple Witching Hour", value="https://u1sweb.webullfinance.com/social/5102275095354b19bd51ef5f2e851ffb.png"),
            disnake.SelectOption(label="Fiscal Year", value="https://u1sweb.webullfinance.com/social/e3bc874cf43844b39ef0a162b0f77960.png"),
            disnake.SelectOption(label="Option Cycle", value="https://u1sweb.webullfinance.com/social/eafe2d1b686f4f869e41eed00c12244c.png"),
            disnake.SelectOption(label="Day Around Order", value="https://u1sweb.webullfinance.com/social/25c22ba30aff45d4994eca460233edc8.png"),
            disnake.SelectOption(label="Day Order",value="https://u1sweb.webullfinance.com/social/63c61a991d28473c98ee66379be84939.png"),
            disnake.SelectOption(label="Calendar Effect", value="https://u1sweb.webullfinance.com/social/0f17d241d6ad4aa587461f795b894b1a.png"),
            disnake.SelectOption(label="Silver Thursday", value="https://u1sweb.webullfinance.com/social/5871faa90d2c4bea80010d456823e827.png"),
            disnake.SelectOption(label="Blackout Period", value="https://u1sweb.webullfinance.com/social/68238c27e84649059df7db0c5134ce43.png"),
            disnake.SelectOption(label="Black Wednesday", value="https://u1sweb.webullfinance.com/social/353b22e01e3e450e9b475489fcc836c9.png"),
            disnake.SelectOption(label="Time Value", value="https://u1sweb.webullfinance.com/social/03738f079ab6416c880a31efabcd3a88.png"),
            disnake.SelectOption(label="Black Friday", value="https://u1sweb.webullfinance.com/social/96d5e34c480d4fdca71cc2b53aacadd2.png"),
            disnake.SelectOption(label="Time Deposit", value="https://u1sweb.webullfinance.com/social/0469bbe27c1044a3b2597dbda72c53a8.png"),
            disnake.SelectOption(label="Monday Effect", value="https://u1sweb.webullfinance.com/social/82d0ffabaf8340e9bf8e38a8eaba8ae2.png"),
            disnake.SelectOption(label="January Effect", value="https://u1sweb.webullfinance.com/social/7fc05568f9024f0987e801f2dd11edcf.png"),
            disnake.SelectOption(label="Block Time", value="https://u1sweb.webullfinance.com/social/021842498b334ab19259f55ae75794ce.png"),
            disnake.SelectOption(label="May Day", value="https://u1sweb.webullfinance.com/social/05618ea575a340c5807ffe3316e5e065.png"),
            disnake.SelectOption(label="Index Fund", value="https://u1sweb.webullfinance.com/social/ea016e139ded4060853cea460cb4d5d5.png"),
            disnake.SelectOption(label="Wednesday Scramble", value="https://u1sweb.webullfinance.com/social/b0e68c4828eb42e083aea7553547cc9c.png"),
            disnake.SelectOption(label="Expiration Time", value="https://u1sweb.webullfinance.com/social/96f81bbfddf04538b1cd2204ef13b03d.png"),
            
            disnake.SelectOption(label="Investment Time Horizon", value="https://u1sweb.webullfinance.com/social/4363557fcde641b2a87dfd200700a51b.png"),
            disnake.SelectOption(label="Black Thursday", value="https://u1sweb.webullfinance.com/social/8d92867f6a9248659595f575350d04b1.png"),
            disnake.SelectOption(label="Black Tuesday", value="https://u1sweb.webullfinance.com/social/f073e6e004f94397888b63134fea2187.png"),
    

        ]


        super().__init__(
            placeholder="🇹 ℹ️ Ⓜ️ 🇪 🕐 🇻 🇴 🇨 🇦 🇧 🇺 🇦 🇷 🇾",
            min_values=1,
            max_values=1,
            options=options
        )

    async def callback(self, interaction: disnake.MessageCommandInteraction):
        if self.values[0] == self.values[0]:
            em = disnake.Embed(title="Time-Related Financial Vocabulary", description=f"```py\nSelect from the drop-down below to learn more about the item.```", color=disnake.Colour.dark_red(), url="https://www.webull.com/learn/course/GE53qd/Time-related-Financial-Vocabularies")
            em.set_image(url=f"{self.values[0]}")
            await interaction.response.edit_message(embed=em)



class Widgets(disnake.ui.Select):
    def __init__(self):

        options = [
            disnake.SelectOption(label="What is a Widget?", value="https://u1sweb.webullfinance.com/social/dd289b3babe340cd96614901e6261233.gif"),
            disnake.SelectOption(label="How to resize a widget",value="https://u1sweb.webullfinance.com/social/92f74d02d77c494bbe884f3893d34b66.gif"),
            disnake.SelectOption(label="How to move a widget",value="https://u1sweb.webullfinance.com/social/9ad2ec36342e41ef8b22ed325065d63f.gif"),
            disnake.SelectOption(label="How to overlap widgets",value="https://u1sweb.webullfinance.com/social/7abeb6f32ed644ae8072e3aee38b4f05.gif"),
            disnake.SelectOption(label="How to add a widget.",value="https://u1sweb.webullfinance.com/social/79ed5a715dbb4688a2997f2b7dac123d.gif"),
            disnake.SelectOption(label="What is a layout?",value="https://u1sweb.webullfinance.com/social/2fe4f8da8436441cb3771e90d34ddd84.gif"),
            disnake.SelectOption(label="How to use Webull Desktop in multiple screens",value="https://u1sweb.webullfinance.com/social/2f876e49e5d7416eb058cb49933bfdb0.gif"),]


        super().__init__(
            placeholder="🇼 🇪 🇧 🇺 🇱 🇱 🖥️ 🇩 🇪 🇸 🇰 🇹 🇴 🇵",
            min_values=1,
            max_values=1,
            options=options
        )

    async def callback(self, interaction: disnake.MessageCommandInteraction):
        if self.values[0] == "https://u1sweb.webullfinance.com/social/dd289b3babe340cd96614901e6261233.gif":
            em = disnake.Embed(title="What is a Widget? - Webull Desktop", description=f"```py\nWidget is the basic component of our platform. Every function is a stand-alone application, called a Widget. For example, a chart widget displays quotes of stocks with many useful features.``` ```py\nWebull Desktop provides 51 stand-alone widgets that can all be rearranged and resized to fit your preference.```", color=disnake.Colour.dark_blue())
            em.set_image(url=f"https://u1sweb.webullfinance.com/social/dd289b3babe340cd96614901e6261233.gif")
            await interaction.response.edit_message(embed=em)
        elif self.values[0] == "https://u1sweb.webullfinance.com/social/92f74d02d77c494bbe884f3893d34b66.gif":
            em = disnake.Embed(title="How to resize a widget - Webull Desktop", description=f"```py\nClick the border of any widget and drag it to the size you want. The display of the widget may be changed when resizing it.```", color=disnake.Colour.dark_blue())
            em.set_image(url=f"https://u1sweb.webullfinance.com/social/92f74d02d77c494bbe884f3893d34b66.gif")
            await interaction.response.edit_message(embed=em)
        elif self.values[0] == "https://u1sweb.webullfinance.com/social/9ad2ec36342e41ef8b22ed325065d63f.gif":
            em = disnake.Embed(title="How to move a widget - Default", description=f"```py\nIn default layouts, you can move a widget by clicking and dragging the top bar of the widget to the edge of another widget.```", color=disnake.Colour.dark_blue())
            em2 = disnake.Embed(title="How to move a widget - Custom", description=f"```py\nIn customized layouts, you can drag and move a widget anywhere on the layout.```", color=disnake.Colour.dark_blue())
            em.set_image(url="https://u1sweb.webullfinance.com/social/9ad2ec36342e41ef8b22ed325065d63f.gif")
            em2.set_image(url="https://u1sweb.webullfinance.com/social/926ef8dd5b8e49269892e9b5c2843e51.gif")
            view = disnake.ui.View()
            a = disnake.ui.Button(style = disnake.ButtonStyle.blurple, label="Default Layouts")
            b = disnake.ui.Button(style = disnake.ButtonStyle.blurple, label="Custom Layouts")
            a.callback = lambda interaction: interaction.response.edit_message(embed=em, view=view)
            b.callback = lambda interaction: interaction.response.edit_message(embed=em2,view=view)
            view.add_item(a)
            view.add_item(b)
            view.add_item(self) 
            await interaction.response.edit_message(embed=em, view=view)
        elif self.values[0] == "https://u1sweb.webullfinance.com/social/7abeb6f32ed644ae8072e3aee38b4f05.gif":
            view4 = disnake.ui.View()
            em = disnake.Embed(title="How to overlap widgets - Webull Desktop", description=f"```py\nYou can rearrange widgets by dragging one widget on the top of another. The two widgets will be overlapped, and you can switch widgets by clicking on tabs.``` ```py\nYou can detach an overlapped widget by dragging tabs outside the tab bar.```", color=disnake.Colour.dark_blue())
            em.set_image(url=f"https://u1sweb.webullfinance.com/social/7abeb6f32ed644ae8072e3aee38b4f05.gif")
            view4.add_item(self)
            await interaction.response.edit_message(embed=em, view=view4)
        elif self.values[0] == "https://u1sweb.webullfinance.com/social/79ed5a715dbb4688a2997f2b7dac123d.gif":
            view2 = disnake.ui.View()
            a = disnake.ui.Button(style = disnake.ButtonStyle.blurple, label="Default Layouts")
            b = disnake.ui.Button(style = disnake.ButtonStyle.blurple, label="Custom Layouts")
            a.callback = lambda interaction: interaction.response.edit_message(embed=em,  view=view2)
            b.callback = lambda interaction: interaction.response.edit_message(embed=em2, view=view2)
            view2.add_item(a)
            view2.add_item(b)
            view2.add_item(self)
            em = disnake.Embed(title="How to add a widget - Webull Desktop", description=f"```py\nClick 'All Widgets' in Widget menu, you can find the widgets you need under different categories and add them to layout.```", color=disnake.Colour.dark_blue())
            em.set_image(url=f"{self.values[0]}")
            em2 = disnake.Embed(title="How to add a widget - Customized", description=f"```py\nIn customized layouts, click 'Add Widgets' on top right to add widgets at any time.```", color=disnake.Colour.dark_blue())
            em2.set_image(url="https://u1sweb.webullfinance.com/social/e3ec2d8f8f8b4dcf8fe5be6127a3342e.gif")
            await interaction.response.edit_message(embed=em, view=view2)
        elif self.values[0] == "https://u1sweb.webullfinance.com/social/2fe4f8da8436441cb3771e90d34ddd84.gif":
            view3 = disnake.ui.View()
            default = disnake.ui.Button(style = disnake.ButtonStyle.blurple, label="What is a layout? - Webull Desktop")
            a = disnake.ui.Button(style = disnake.ButtonStyle.blurple, label="‌How do I find the layouts I want?")
            b = disnake.ui.Button(style = disnake.ButtonStyle.blurple, label="Custom Layouts")
            default.callback = lambda interaction: interaction.response.edit_message(embed=em, view=view3)
            a.callback = lambda interaction: interaction.response.edit_message(embed=em2, view=view3)
            b.callback = lambda interaction: interaction.response.edit_message(embed=em3,view=view3)
            view3.add_item(default)
            view3.add_item(a)
            view3.add_item(b)
            view3.add_item(self)
            em = disnake.Embed(title="What is a layout? - Webull Desktop", description=f"```py\nyout is the interface you are using in Webull Desktop. Layout is composed of widgets. You can move, resize, add remove widgets in layouts.``` ```py\nYour layouts will be saved automatically on your local devices. You can save it as a customized layout, if you would like access your layouts on different devices.```", color=disnake.Colour.dark_blue())
            em.set_image(url=f"{self.values[0]}")
            em2 = disnake.Embed(title="‌How do I find the layouts I want?", description=f"```py\nYou can use default layouts or build and save your own customized layouts.```", color=disnake.Colour.dark_blue())
            em2.set_image(url="https://u1sweb.webullfinance.com/social/1458cdb55ba043598229ecd2c5e7691b.gif")
            em3 = disnake.Embed(title="Custom Layouts", description=f"```py\nClick 'All Layouts' in layout menu, you can find all default and customized layouts. Select the layouts you want to use as favorite.```",color=disnake.Colour.dark_blue())
            em3.set_image(url="https://u1sweb.webullfinance.com/social/5fcb6c99b70e4a0c92d1f2477b919fb4.gif")
            await interaction.response.edit_message(embed=em, view=view3)
        elif self.values[0] == "https://u1sweb.webullfinance.com/social/2f876e49e5d7416eb058cb49933bfdb0.gif":
            view5 = disnake.ui.View()
            view5.add_item(self)
            em = disnake.Embed(title=" - Webull Desktop", description=f"```py\nClick 'Create a new Window' in windows menu, you can create multiple windows and place them in different screens.``` ```py\nAll the windows you set will be restored when you restart Webull Desktop.```", color=disnake.Colour.dark_blue())
            em.set_image(url=f"{self.values[0]}")
            await interaction.response.edit_message(embed=em, view=view5)


class WidgetView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=60)


        self.add_item(Widgets())









###TUTORIALS###
class TutorialsView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=80
)


    @disnake.ui.button(label="Setting notifications🔔", style=disnake.ButtonStyle.green)
    async def botcmds( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Setting notifications🔔", color=disnake.Colour.dark_green())
        embed.add_field(name="🔔", value="In order to receive push notifications as well as desk-top notifications, make sure you have notifications turned on for the information you want to have streamlined to you. There's a lot to choose from!")
        embed.add_field(name="🔔", value="FUDSTOP Video Help \n\n https://youtu.be/zPG_hoQXAto")
        embed.set_image(url="https://media.giphy.com/media/xSKZuOVFxMzG5BoYBG/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(embed=embed, view=TutorialsView())


    @disnake.ui.button(label="Slash Commands⚔️", style=disnake.ButtonStyle.blurple)
    async def slashr( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Slash Commands⚔️", color=disnake.Colour.dark_red())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(view=TutorialsView())


    @disnake.ui.button(label="Discord Tutorials⚔️", style=disnake.ButtonStyle.blurple)
    async def disctuts( self,interaction: disnake.ApplicationCommandInteraction ):
        embed = disnake.Embed(title="Slash Commands⚔️", color=disnake.Colour.random())
        embed.set_image(url="https://media.giphy.com/media/waq1okC7KZgqC6N229/giphy.gif")
        embed.set_footer(text="Implemented by FUDSTOP Trading")
        await interaction.response.edit_message(view=TutorialsView())

    @disnake.ui.button(label="🏡", style=disnake.ButtonStyle.green, )
    async def home( self,interaction: disnake.ApplicationCommandInteraction ):
        em = disnake.Embed(title="🏡 Home Menu", color=disnake.Colour.dark_green())
        em.set_footer(text="Implemented by FUDSTOP Trading", )

        await interaction.response.edit_message(embed = em, view=MainView2())


"""Leverage Command Dropdown"""

class LeverageDropdown(disnake.ui.Select):
    def __init__(self, ticker):
        self.ticker = ticker
        ids = ticker_list[ticker]
        r = requests.get(url=f"https://trade.webullfintech.com/api/trading/v1/global/ticker/permission?tickerId={ids}")
        d = r.json()
        permissions = d['permissions']
        tickers = d['ticker']
        self.brokerid1 = permissions[0]
        list2 = permissions[1]
        list3 = permissions[2]
        brokerid2 = list2['brokerId']
        self.shorttype = list2['shortType']
        lotsize = list2['lotSize']
        pricesteps = list2['priceSteps']
        pricesteps2 = list3['priceSteps']
        types = list2['types']
        self.canfract = list2['canFract']
        self.crypto = list2['cryptoTransferAllow']


        leverage = list2['leverage']
        self.tradetype = leverage['tradeType']#
        self.shortType = leverage['shortType']#
        self.tradepolicy = leverage['tradePolicy']#
        dtlongrate = float(leverage['dayTradeLongRate'])
        dtshortrate = float(leverage['dayTradeShortRate'])
        overnightlongrate = float(leverage['overnightLongRate'])
        overnightshortrate = float(leverage['overnightShortRate'])
        self.onlongrate = round(overnightlongrate * 100, ndigits=2)
        self.onshortrate = round(overnightshortrate * 100, ndigits=2)
        shortmaintenance = float(leverage['maintenanceForShort'])
        longmaintenance = float(leverage['maintenanceForLong'])
        lintrate = float(leverage['tradeLongInterestRate'])
        sintrate = float(leverage['tradeShortInterestRate'])
        longrate = float(leverage['longRate'])
        shortrate = float(leverage['shortRate'])


        steps1 = pricesteps[0]
        self.rangebegin = steps1['rangeBegin']#
        self.containBegin = steps1['containBegin']#
        self.rangeend = steps1['rangeEnd']#
        self.containend = steps1['containEnd']#


        steps2 = pricesteps[1]
        self.rangebegin2 = steps2['rangeBegin']#
        self.containBegin2 = steps2['containBegin']#
        self.rangeend2 = steps2['containEnd']#
        self.daytradelonglever = leverage['dayTradeLongLever']#
        self.daytradeshortlever = leverage['dayTradeShortLever']#
        self.overnightlonglever = leverage['overnightLongLever']#
        self.overnightshortlever = leverage['overnightShortLever']#
        self.dayshortrate = round(dtshortrate * 100, ndigits=2)#
        self.daylongrate = round(dtlongrate * 100, ndigits=2)#
        self.longmain = round(longmaintenance * 100, ndigits=2)#
        self.shortmain = round(shortmaintenance * 100, ndigits=2)#
        self.onlongrate = round(overnightlongrate * 100, ndigits=2)#
        self.onshortrate = round(overnightshortrate * 100, ndigits=2)#
        self.shortintrate = round(sintrate * 100, ndigits=2)#
        self.longintrate = round(lintrate * 100, ndigits=2)#
        self.lrate = round(longrate * 100, ndigits=2)#
        self.srate = round(shortrate * 100, ndigits=2)#

        super().__init__(
            placeholder="🇱  🇪  🇻  🇪  🇷  🇦  🇬  🇪",
            min_values=1,
            max_values=1,
            custom_id="🇱  🇪  🇻  🇪  🇷  🇦  🇬  🇪",
            options=[
                disnake.SelectOption(label=f"Trade Type: {self.tradetype}",description=f"Short Type: {self.shorttype} | Policy: {self.tradepolicy}"),
                disnake.SelectOption(label="Base Rates:",description=f"Long: {self.lrate} | Short: {self.srate}"),
                disnake.SelectOption(label="Interest Rates:",description=f"Long: {self.longintrate} | Short: {self.shortintrate}"),
                disnake.SelectOption(label="Daytrading Rates:",description=f"Long: {self.daylongrate} | Short: {self.dayshortrate}"),
                disnake.SelectOption(label="Daytrading Leverage:",description=f"Long: {self.daytradelonglever} | Short: {self.daytradeshortlever}"),
                disnake.SelectOption(label="Overnight Rates:",description=f"Long: {self.onlongrate} | Short: {self.onshortrate}"),
                disnake.SelectOption(label="Maintenance:",description=f"Long: {self.longmain} | Short: {self.shortmain}"),
            
            ]
        )
        async def callback(interaction: disnake.MessageCommandInteraction):
            if self.values[0] == self.values[0]:
                await interaction.send("```py\nDrop-down is for display! Use another command.```")
